#!/usr/bin/env python
# generated by wxGlade 0.2.1cvs on Sat Jan  4 20:08:04 2003

__version__ = ""
__author__ = "S.Hilbert, K.Hilbert"

import sys, os, string
# location of our modules
if __name__ == "__main__":
	#sys.path.append(os.path.join('..', '..', 'python-common'))
	#sys.path.append(os.path.join('..', '..', 'business'))
	sys.path.append(os.path.join('.','modules'))

import gmLog
_log = gmLog.gmDefLog
if __name__ == '__main__':
	_log.SetAllLogLevels(gmLog.lData)

_log.Log(gmLog.lData, __version__)

if __name__ == "__main__":
	import gmI18N

import gmCfg
_cfg = gmCfg.gmDefCfgFile

from wxPython.wx import *

[wxID_WXFRAME1, 
wxID_WXFRAME1NOTEBOOK1, 
wxID_WXFRAME1MAINPANEL, 
wxID_WXFRAME1STARTPANEL, 
wxID_WXFRAME1METADATAPANEL, 
wxID_WXFRAME1SCANPANEL, 
wxID_WXFRAME1INDEXPANEL, 
wxID_WXFRAME1IMPORTPANEL, 
wxID_WXFRAME1VIEWERPANEL,
wxID_WXFRAME1DATABASEPANEL,
wxID_WXFRAME1DUMPTOCFGFILEPANEL,
wxID_old_to_new_BTN,
wxID_new_to_old_BTN,
wxID_new_BTN,
wxID_old_to_new_rep_BTN,
wxID_new_to_old_rep_BTN,
wxID_check_metadata_BTN,
wxID_check_scan_BTN,
wxID_check_index_BTN,
wxID_check_import_BTN,
wxID_check_viewer_BTN,
wxID_check_database_BTN,
wxID_write_cfgfile_BTN,
wxID_new_rep_BTN,
wxID_tmp_dir_BTN,
wxID_export_dirBTN,
wxID_sel_idfile_BTN,
wxID_patient_fileBTN,
wxID_viewer_patient_fileBTN,
wxID_repository_dirBTN,
wxID_SelBOX_id_mode,
wxID_SelBOX_show_id,
wxID_SelBOX_do_barcodes,
wxID_SelBOX_JPEG_conv,
wxID_SelBOX_progressive_JPEG,
wxID_patient_format_view_LBOX,
wxID_patient_format_idx_LBOX,
wxID_patient_format_import_LBOX ] = map(lambda _init_ctrls: wxNewId(), range(38))

class gmConfigEditorPanel(wxPanel):
    def __init__(self, parent):
        wxPanel.__init__(self, parent, -1)
        self.parent_notebook = wxNotebook(self, -1, style=wxNB_RIGHT)
#       self.importpanel = wxPanel(self.parent_notebook, -1)
#	self.parent_notebook.AddPage(self.importpanel,'import')
        
	self.startpanel = wxPanel(id = wxID_WXFRAME1STARTPANEL, name = 'start', parent = self.parent_notebook, pos = wxPoint(0, 0), size = wxSize(768, 513), style = wxTAB_TRAVERSAL)
	self.parent_notebook.AddPage(self.startpanel,'start')
	self.statictext= wxStaticText(self.startpanel,-1,'start')
	
	self.metadatapanel = wxPanel(id = wxID_WXFRAME1METADATAPANEL, name = 'metadata', parent = self.parent_notebook, pos = wxPoint(0, 0), size = wxSize(768, 513), style = wxTAB_TRAVERSAL)
	self.parent_notebook.AddPage(self.metadatapanel,'metadata')
	
	self.scanpanel = wxPanel(id = wxID_WXFRAME1SCANPANEL, name = 'scan', parent = self.parent_notebook, pos = wxPoint(0, 0), size = wxSize(768, 513), style = wxTAB_TRAVERSAL)
	self.parent_notebook.AddPage(self.scanpanel,'scan')
	
	self.indexpanel = wxPanel(id = wxID_WXFRAME1INDEXPANEL, name = 'indexpanel', parent = self.parent_notebook, pos = wxPoint(0, 0), size = wxSize(768, 513), style = wxTAB_TRAVERSAL)
	self.parent_notebook.AddPage(self.indexpanel,'index')
	
	self.importpanel = wxPanel(id = wxID_WXFRAME1IMPORTPANEL, name = 'importpanel', parent = self.parent_notebook, pos = wxPoint(0, 0), size = wxSize(768, 513), style = wxTAB_TRAVERSAL)
	self.parent_notebook.AddPage(self.importpanel,'import')
		
	self.viewerpanel = wxPanel(id = wxID_WXFRAME1VIEWERPANEL, name = 'viewerpanel', parent = self.parent_notebook, pos = wxPoint(0, 0), size = wxSize(768, 513), style = wxTAB_TRAVERSAL)
	self.parent_notebook.AddPage(self.viewerpanel,'viewer')
	
	self.databasepanel = wxPanel(id = wxID_WXFRAME1DATABASEPANEL, name = 'databasepanel', parent = self.parent_notebook, pos = wxPoint(0, 0), size = wxSize(768, 513), style = wxTAB_TRAVERSAL)
	self.parent_notebook.AddPage(self.databasepanel,'database')
	
	self.dumptoCfgFilePanel = wxPanel(id = wxID_WXFRAME1DUMPTOCFGFILEPANEL, name = 'dumptoCfgFilePanel', parent = self.parent_notebook, pos = wxPoint(0,0), size = wxSize(768, 513), style = wxTAB_TRAVERSAL)
	self.parent_notebook.AddPage(self.dumptoCfgFilePanel,'dump to CfgFile')
	
	self.__get_properties()
	
	#metadata
	self.__drawMetadataControls()  
	self.__handle_document_types()
	# fill scan-wxnotebooktab with what's in section [scan]
	self.__drawScanControls()
	# fill index-tab with what's in section [index]
	self.__drawIndexControls()
	# fill import-tab with what's in section [import]	
	self.__drawImportControls()
	self.__handle_repositories()
	# fill viewer tab with what's in section [viewer]
	self.__drawViewerControls()
	# fill database tab with what's in section [database]
	self.__drawDatabaseControls()
	# finally we need to dump everything to the CfgFile
	self.__drawConfigFileControls()

        self.__do_layout()

    def __get_properties(self):
	self.__getMetadataFromFile()
	# fill scan-wxnotebooktab with what's in section [scan]
	self.__getScanvaluesFromFile()
	# fill index-tab with what's in section [index]
	self.__getIndexvaluesFromFile()
	# fill import-tab with what's in section [import]	
	self.__getImportvaluesFromFile()
	# fill viewer tab with what's in section [viewer]
	self.__getViewervaluesFromFile()
	# fill database tab with what's in section [database]
	self.__getDatabasevaluesFromFile()
	# finally we need to dump everything to the CfgFile
	self.__drawConfigFileControls()

    def __do_layout(self):
        # begin wxGlade: gmConfigeditor.__do_layout
        sizer_1 = wxBoxSizer(wxVERTICAL)
        sizer_2 = wxBoxSizer(wxVERTICAL)
        grid_sizer_2 = wxGridSizer(1, 3, 0, 0)
        sizer_3 = wxBoxSizer(wxVERTICAL)
	sizer_4 = wxBoxSizer(wxVERTICAL)
	sizer_5 = wxBoxSizer(wxVERTICAL)
        grid_sizer_1 = wxGridSizer(14, 2, 0, 0)
	grid_sizer_1.Add(self.statictext21, 0, wxLEFT, 10)
	grid_sizer_1.Add(self.descriptionTBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
	grid_sizer_1.Add(self.statictext22, 0, wxLEFT, 10)
	grid_sizer_1.Add(self.statictext23, 0, wxLEFT, 10)
	grid_sizer_1.Add(self.statictext20, 0, wxLEFT, 10)
        grid_sizer_1.Add(self.document_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
	grid_sizer_1.Add(self.statictext19, 0, wxLEFT, 10)
	grid_sizer_1.Add(self.name_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
        grid_sizer_1.Add(self.statictext18, 0, wxLEFT, 10)
	grid_sizer_1.Add(self.firstname_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
        grid_sizer_1.Add(self.statictext17, 0, wxLEFT, 10)
	grid_sizer_1.Add(self.birth_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
	grid_sizer_1.Add(self.statictext11, 0, wxLEFT, 10)
	grid_sizer_1.Add(self.date_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
        grid_sizer_1.Add(self.statictext12, 0, wxLEFT, 10)
        grid_sizer_1.Add(self.type_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
        grid_sizer_1.Add(self.statictext13, 0, wxLEFT, 10)
        grid_sizer_1.Add(self.comment_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
        grid_sizer_1.Add(self.statictext14, 0, wxLEFT, 10)
        grid_sizer_1.Add(self.aux_comment_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
        grid_sizer_1.Add(self.statictext15, 0, wxLEFT, 10)
        grid_sizer_1.Add(self.ref_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
        grid_sizer_1.Add(self.statictext16, 0, wxLEFT, 10)
        grid_sizer_1.Add(self.obj_tag_TBOX, 0, wxLEFT|wxRIGHT|wxEXPAND, 10)
        sizer_2.Add(grid_sizer_1, 1, wxEXPAND, 0)
	sizer_4.Add(self.statictext24, 0, wxLEFT, 10)
	sizer_4.Add(self.statictext25, 0, wxLEFT, 10)
	sizer_4.Add(self.statictext26, 0, wxLEFT, 10)
	sizer_4.Add(self.current_doctypes_LBOX, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 10)
	grid_sizer_2.Add(sizer_4, 1,wxEXPAND, 0)
	sizer_3.Add(self.old_to_new_BTN, 0, wxTOP|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 50)
        sizer_3.Add(self.new_to_old_BTN, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 6)
        sizer_3.Add(self.new_BTN, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 6)
        grid_sizer_2.Add(sizer_3, 1, wxEXPAND, 0)
	sizer_5.Add(self.statictext27, 0, wxLEFT, 10)
	sizer_5.Add(self.statictext28, 0, wxLEFT, 10)
	sizer_5.Add(self.statictext29, 0, wxLEFT, 10)
	sizer_5.Add(self.new_doctypes_LBOX, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 10)
	grid_sizer_2.Add(sizer_5, 1, wxEXPAND, 0)
        sizer_2.Add(grid_sizer_2, 1, wxEXPAND, 0)
        self.metadatapanel.SetAutoLayout(1)
        self.metadatapanel.SetSizer(sizer_2)
        sizer_2.Fit(self.metadatapanel)
        sizer_2.SetSizeHints(self.metadatapanel)
        sizer_1.Add(wxNotebookSizer(self.parent_notebook), 1, wxEXPAND, 0)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        self.Layout()
        # end wxGlade
	
    ############################################################
    # metadata related stuff
    ############################################################
    def __getMetadataFromFile(self):
	self.xml_description_comment = string.join(_cfg.getComment("metadata","description"),"\n")
	self.xml_description = _cfg.get("metadata","description")
	self.valid_doc_types_comment = string.join(_cfg.getComment("metadata","doctypes"))
	self.valid_doc_types = _cfg.get("metadata","doctypes")
	self.document_tag_comment = string.join(_cfg.getComment("metadata", "document_tag"),"\n")
	self.document_tag = _cfg.get("metadata", "document_tag")
	self.name_tag = _cfg.get("metadata", "name_tag")
	self.firstname_tag = _cfg.get("metadata", "firstname_tag")
	self.birth_tag = _cfg.get("metadata", "birth_tag")
	self.date_tag = _cfg.get("metadata", "date_tag")
	self.type_tag = _cfg.get("metadata", "type_tag")
	self.comment_tag = _cfg.get("metadata", "comment_tag")
	self.aux_comment_tag = _cfg.get("metadata", "aux_comment_tag")
	self.ref_tag = _cfg.get("metadata", "ref_tag")
	self.obj_tag = _cfg.get("metadata", "obj_tag")
    
    def __drawMetadataControls(self):
	# statictext 10-30 until I find out what is up
	self.statictext23     = wxStaticText(self.metadatapanel,-1,"")
	#self.statictext      = wxStaticText(self.metadatapanel,-1,_('[metadata]'))
	self.statictext21     = wxStaticText(self.metadatapanel,-1,self.xml_description_comment,(400,200))
	self.descriptionTBOX = wxTextCtrl(self.metadatapanel,-1,self.xml_description)
	#self.statictext3     = wxStaticText(self.metadatapanel,-1,self.valid_doc_types_comment)
	self.statictext24     = wxStaticText(self.metadatapanel,-1,_('document types read from config-file:'))
	self.statictext25     = wxStaticText(self.metadatapanel,-1,_('leaving them here means the will not '))
	self.statictext26     = wxStaticText(self.metadatapanel,-1,_('show up in thenewly created config file'))
	self.statictext27     = wxStaticText(self.metadatapanel,-1,_('doc types to be written to configfile'))
	self.statictext28     = wxStaticText(self.metadatapanel,-1,_('moving them here means they will show'))
	self.statictext29     = wxStaticText(self.metadatapanel,-1,_('up in the newly created config file'))
	self.current_doctypes_LBOX = wxListBox(self.metadatapanel,-1,(-1,-1))
	self.new_doctypes_LBOX = wxListBox(self.metadatapanel,-1,(-1,-1))
	self.old_to_new_BTN  = wxButton (self.metadatapanel,wxID_old_to_new_BTN,'-->')
	self.new_to_old_BTN  = wxButton (self.metadatapanel,wxID_new_to_old_BTN,'<--')
	self.new_BTN         = wxButton (self.metadatapanel,wxID_new_BTN,_('new type'))
	self.statictext22     = wxStaticText(self.metadatapanel,-1,self.document_tag_comment)
	self.statictext20     = wxStaticText(self.metadatapanel,-1,_('document_tag'))	
	self.statictext19     = wxStaticText(self.metadatapanel,-1,_('name_tag'))
	self.statictext18     = wxStaticText(self.metadatapanel,-1,_('firstname_tag'))
	self.statictext17    = wxStaticText(self.metadatapanel,-1,_('birth_tag'))
	self.statictext11    = wxStaticText(self.metadatapanel,-1,_('date_tag'))
	self.statictext12    = wxStaticText(self.metadatapanel,-1,_('type_tag'))
	self.statictext13    = wxStaticText(self.metadatapanel,-1,_('comment_tag'))
	self.statictext14    = wxStaticText(self.metadatapanel,-1,_('aux_comment_tag'))
	self.statictext15    = wxStaticText(self.metadatapanel,-1,_('ref_tag'))
	self.statictext16    = wxStaticText(self.metadatapanel,-1,_('obj_tag'))
	self.document_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.document_tag)
	self.name_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.name_tag)
	self.firstname_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.firstname_tag)
	self.birth_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.birth_tag)
	self.date_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.date_tag)
	self.type_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.type_tag)
	self.comment_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.comment_tag)
	self.aux_comment_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.aux_comment_tag)
	self.ref_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.ref_tag)
	self.obj_tag_TBOX    = wxTextCtrl(self.metadatapanel,-1,self.obj_tag)

    def __handle_document_types(self):
	for i in range (len(self.valid_doc_types)):
	    self.current_doctypes_LBOX.Append(self.valid_doc_types[i])
	EVT_BUTTON(self.old_to_new_BTN, wxID_old_to_new_BTN, self.on_old_to_new_types)
	EVT_BUTTON(self.new_to_old_BTN, wxID_new_to_old_BTN, self.on_new_to_old_types)
	EVT_BUTTON(self.new_BTN, wxID_new_BTN, self.on_new_types)

    #------------------------------------------------------
    # event handlers
    #------------------------------------------------------
    def on_old_to_new_types(self, event):
	curr_doctypes_LBOX_sel = self.current_doctypes_LBOX.GetStringSelection()
	if curr_doctypes_LBOX_sel == '':
		dlg = wxMessageDialog(
			self,
			_('document type error : no document type selected'),
			_('document type selection'),
			wxOK | wxICON_ERROR
		)
		dlg.ShowModal()
		dlg.Destroy()
		return None
	else:
	    self.current_doctypes_LBOX.Delete(self.current_doctypes_LBOX.GetSelection())
	    self.new_doctypes_LBOX.Append(curr_doctypes_LBOX_sel)
	
    def on_new_to_old_types(self, event):
	new_doctypes_LBOX_sel = self.new_doctypes_LBOX.GetStringSelection()
	if new_doctypes_LBOX_sel == '':
		dlg = wxMessageDialog(
			self,
			_('document type error : no document type selected'),
			_('document type selection'),
			wxOK | wxICON_ERROR
		)
		dlg.ShowModal()
		dlg.Destroy()
		return None
	else:
	    self.new_doctypes_LBOX.Delete(self.new_doctypes_LBOX.GetSelection())
	    self.current_doctypes_LBOX.Append(new_doctypes_LBOX_sel)
    
    def on_new_types(self, event):	
	check_idx = -1
	while check_idx == -1:
		dlg = wxTextEntryDialog(
			parent = self,
			message = _('Please enter the new document type !'),
			caption = _('enter new types'),
			defaultValue = ''
		)
		btn = dlg.ShowModal()
		dlg.Destroy()
		# new document type ?
		if  btn == wxID_OK:
			tmp = dlg.GetValue()	
			self.new_doctypes_LBOX.Append(tmp)
			return 1
			
		# or cancel addition of new document types ?
		elif btn == wxID_CANCEL:
			return 1
    #######################################################
    # scan related stuff
    #######################################################
    def __getScanvaluesFromFile(self):
	self.id_mode_comment   = string.join(_cfg.getComment('scanning','document ID mode'),"\n")    
	self.id_mode   = _cfg.get('scanning','document ID mode')
	self.id_file_comment   = string.join(_cfg.getComment('scanning','document ID file'),"\n")
	self.id_file   = _cfg.get('scanning','document ID file')
	self.show_id_comment   = string.join(_cfg.getComment('scanning','show document ID'),"\n")
	self.show_id   = _cfg.get('scanning','show document ID')
	self.tmp_dir_comment   = string.join(_cfg.getComment('scanning','tmp'),"\n")
	self.tmp_dir   = _cfg.get('scanning','tmp')
	self.barcode_comment   = string.join(_cfg.getComment('scanning','document barcode mode'),"\n")
	self.barcode   = _cfg.get('scanning','document barcode mode')
	self.barcode_cmd_comment      = string.join(_cfg.getComment('scanning','barcode generation command'),"\n")
	self.barcode_cmd      = _cfg.get('scanning','barcode generation command')
	self.conv_JPEG_comment        = string.join(_cfg.getComment('scanning','convert to JPEG'),"\n")
	self.conv_JPEG        = _cfg.get('scanning','convert to JPEG')
	self.JPEG_quality_comment     = string.join(_cfg.getComment('scanning','JPEG quality level'),"\n")
	self.JPEG_quality     = _cfg.get('scanning','JPEG quality level')
	self.progressive_JPEG_comment = string.join(_cfg.getComment('scanning','progressive JPEG'),"\n")
	self.progressive_JPEG = _cfg.get('scanning','progressive JPEG')

    def __drawScanControls(self):
	self.statictext      = wxStaticText(self.scanpanel,-1,_('[scanning]'))
	self.statictext2     = wxStaticText(self.scanpanel,-1,self.id_mode_comment,(1,20))
	self.SelBOX_id_mode  = wxComboBox (
	    id = wxID_SelBOX_id_mode,
	    name = 'SelBOX_id_mode',
	    parent = self.scanpanel,
	    value = _('id mode ?'),
	    choices = ['random','consecutive'],
	    style = wxCB_DROPDOWN,
	    pos = (500,30)
	)
	if self.id_mode in ['random','consecutive']:
	    self.SelBOX_id_mode.SetValue(self.id_mode)    
		    
	self.statictext3      = wxStaticText(self.scanpanel,-1,self.id_file_comment,(1,80))
	self.id_fileTBOX  = wxTextCtrl(self.scanpanel,-1,self.id_file,(500,100))
	self.sel_idfile_BTN  = wxButton (self.scanpanel,wxID_sel_idfile_BTN,_('choose id file'),(600,100))
	self.statictext4      = wxStaticText(self.scanpanel,-1,self.show_id_comment,(1,130))
	self.SelBOX_show_id  = wxComboBox (
	    id = wxID_SelBOX_show_id,
	    name = 'SelBOX_show_id',
	    parent = self.scanpanel,
	    value = _('show id ?'),
	    choices = ['yes','no'],
	    style = wxCB_DROPDOWN,
	    pos = (500,140)
	)
	if self.show_id in ['yes','no']:
	    self.SelBOX_show_id.SetValue(self.show_id)
	
	self.statictext5      = wxStaticText(self.scanpanel,-1,self.tmp_dir_comment,(1,190))
    	self.tmp_dirTBOX  = wxTextCtrl(self.scanpanel,-1,self.tmp_dir,(500,190))
	self.tmp_dir_BTN  = wxButton (self.scanpanel,wxID_tmp_dir_BTN,_('choose tmp dir'),(600,190))
	self.statictext6      = wxStaticText(self.scanpanel,-1,self.barcode_comment,(1,220))
	self.SelBOX_do_barcodes  = wxComboBox (
	    id = wxID_SelBOX_do_barcodes,
	    name = 'SelBOX_do_barcodes',
	    parent = self.scanpanel,
	    value = _('do barcodes ?'),
	    choices = ['on','off'],
	    style = wxCB_DROPDOWN,
	    pos = (500,220)
	)
	if self.barcode in ['on','off']:
	    self.SelBOX_do_barcodes.SetValue(self.barcode)
	self.statictext7      = wxStaticText(self.scanpanel,-1,self.barcode_cmd_comment,(1,250))
	self.barcode_cmdTBOX  = wxTextCtrl(self.scanpanel,-1,self.barcode_cmd,(500,270))
	self.statictext8      = wxStaticText(self.scanpanel,-1,self.conv_JPEG_comment,(1,290))
	self.SelBOX_JPEG_conv  = wxComboBox (
	    id = wxID_SelBOX_JPEG_conv,
	    name = 'SelBOX_JPEG_conv',
	    parent = self.scanpanel,
	    value = _('convert to JPEG ?'),
	    choices = ['yes','no'],
	    style = wxCB_DROPDOWN,
	    pos = (500,320)
	)
	if self.conv_JPEG in ['yes','no']:
	    self.SelBOX_JPEG_conv.SetValue(self.conv_JPEG)
	self.statictext9      = wxStaticText(self.scanpanel,-1,self.JPEG_quality_comment,(1,380))
    	self.JPEG_qualityTBOX  = wxTextCtrl(self.scanpanel,-1,self.JPEG_quality,(500,400))
	self.statictext10     = wxStaticText(self.scanpanel,-1,self.progressive_JPEG_comment,(1,440))
	self.SelBOX_progressive_JPEG  = wxComboBox (
	    id = wxID_SelBOX_progressive_JPEG,
	    name = 'SelBOX_progressive_JPEG',
	    parent = self.scanpanel,
	    value = _('progressive JPEG ?'),
	    choices = ['yes','no'],
	    style = wxCB_DROPDOWN,
	    pos = (500,440)
	)
	if self.progressive_JPEG in ['yes','no']:
	    self.SelBOX_progressive_JPEG.SetValue(self.progressive_JPEG)
	
	EVT_BUTTON(self.sel_idfile_BTN, wxID_sel_idfile_BTN, self.on_sel_idfile_BTN)
	EVT_BUTTON(self.tmp_dir_BTN, wxID_tmp_dir_BTN, self.on_tmp_dir_BTN)

    #------------------------------------------------------
    # event handlers
    #------------------------------------------------------
    def on_sel_idfile_BTN(self, event):
	# last doc_id file chooser
	dlg = wxFileDialog(
		self,
		_('choose a file'),
		'',
		'',
		wildcard = "all files(*.*)|*.*|dat files(*.dat)|*.dat",
		style = wxFILE_MUST_EXIST
	)
	dlg.ShowModal()
	dlg.Destroy()
	self.idfile = dlg.GetPath()
	self.id_fileTBOX.SetValue(self.idfile)
	return None
    
    def on_tmp_dir_BTN(self,event):
	# tmp dir chooser
	dlg = wxDirDialog(
		self,
		_('choose a directory'),
		''
	)
	dlg.ShowModal()
	dlg.Destroy()
	tmpdir = dlg.GetPath()
	self.tmp_dirTBOX.SetValue(tmpdir)
	return None 
	
    ##############################################################
    # indexer related stuff
    ##############################################################
    def __getIndexvaluesFromFile(self):
	self.index_checkpoint_comment      = string.join(_cfg.getComment('index','checkpoint file'),"\n")
	self.index_checkpoint              = _cfg.get('index','checkpoint file')
	self.index_lock_comment            = string.join(_cfg.getComment('index','lock file'),"\n")
	self.index_lock                    = _cfg.get('index','lock file')
	self.cookie_comment                = string.join(_cfg.getComment('index','cookie'),"\n")
	self.cookie                        = _cfg.get('index','cookie')
	self.index_patient_file_comment    = string.join(_cfg.getComment('index','patient file'),"\n")
	self.index_patient_file            = _cfg.get('index','patient file')
	self.index_patient_format_comment  = string.join(_cfg.getComment('index','patient file format'),"\n")
	self.index_patient_format          = _cfg.get('index','patient file format')
	self.repository_comment		   = string.join(_cfg.getComment('index','repository'),"\n")
	self.repository                    = _cfg.get('index','repository')

    def __drawIndexControls(self):
	self.statictext      = wxStaticText(self.indexpanel,-1,_('[index]'))
	self.statictext2     = wxStaticText(self.indexpanel,-1,self.index_checkpoint_comment,(1,20))
	self.checkpoint_TBOX = wxTextCtrl(self.indexpanel,-1,self.index_checkpoint,(500,20))
	self.statictext3     = wxStaticText(self.indexpanel,-1,self.index_lock_comment,(1,60))
	self.lock_file_TBOX  = wxTextCtrl(self.indexpanel,-1,self.index_lock,(500,60))
	self.statictext4     = wxStaticText(self.indexpanel,-1,self.cookie_comment,(1,100))	
	self.cookie_TBOX     = wxTextCtrl(self.indexpanel,-1,self.cookie,(500,100))
	self.statictext5     = wxStaticText(self.indexpanel,-1,self.index_patient_file_comment,(1,170))
	self.patient_fileTBOX = wxTextCtrl(self.indexpanel,-1,self.index_patient_file,(500,170))
	self.patient_fileBTN = 	wxButton (self.indexpanel,wxID_patient_fileBTN,_('choose patient file'),(600,170))
	self.statictext6     = wxStaticText(self.indexpanel,-1,self.index_patient_format_comment,(1,220))	
	self.patient_format_index_LBOX = wxComboBox(
	    id = wxID_patient_format_idx_LBOX,
	    name = 'patient_format_LBOX',
	    parent = self.indexpanel,
	    value = _('please choose'),
	    choices = ['xdt'],
	    style = wxCB_DROPDOWN,
	    pos = (500,210)
	)
	if self.index_patient_format in ['xdt']:
	    self.patient_format_index_LBOX.SetValue(self.index_patient_format)
	
	self.statictext7     = wxStaticText(self.indexpanel,-1,self.repository_comment,(1,250))	
	self.repository_dirTBOX = wxTextCtrl(self.indexpanel,-1,self.repository,(500,250))
	self.repository_dirBTN = wxButton (self.indexpanel,wxID_repository_dirBTN,_('choose repository directory'),(600,250))	
	
	EVT_BUTTON(self.patient_fileBTN, wxID_patient_fileBTN, self.on_patient_fileBTN)
	EVT_BUTTON(self.repository_dirBTN, wxID_repository_dirBTN, self.on_repository_dirBTN)
    #------------------------------------------------------
    # event handlers
    #------------------------------------------------------
    def on_patient_fileBTN(self, event):
	# last doc_id file chooser
	dlg = wxFileDialog(
		self,
		_('choose a file'),
		'',
		'',
		wildcard = "all files(*.*)|*.*|dat files(*.dat)|*.dat",
		style = wxFILE_MUST_EXIST
	)
	dlg.ShowModal()
	dlg.Destroy()
	patientfile = dlg.GetPath()
	self.patient_fileTBOX.SetValue(patientfile)
	return None
	
    def on_repository_dirBTN(self, event):
	# repository direcrory chooser
	dlg = wxDirDialog(
		self,
		_('choose a directory'),
		''
	)
	dlg.ShowModal()
	dlg.Destroy()
	repositorydir = dlg.GetPath()
	self.repository_dirTBOX.SetValue(repositorydir)
	return None
    ##############################################################
    # import related stuff
    ##############################################################
    def __getImportvaluesFromFile(self):
	self.import_checkpoint_comment     = string.join(_cfg.getComment('import','checkpoint file'),"\n")
	self.import_checkpoint             = _cfg.get('import','checkpoint file')
	self.import_lock_comment           = string.join(_cfg.getComment('import','lock file'),"\n")
	self.import_lock                   = _cfg.get('import','lock file')
	self.patient_file_comment          = string.join(_cfg.getComment('import','patient file'),"\n")
	self.patient_file                  = _cfg.get('import','patient file')
	self.import_patient_format_comment = string.join(_cfg.getComment('import','patient file format'),"\n")
	self.import_patient_format         = _cfg.get ('import','patient file format')
	self.completion_marker_comment     = string.join(_cfg.getComment('import','completion marker file'),"\n")
	self.completion_marker             = _cfg.get('import','completion marker file')
	self.repositories_comment          = string.join(_cfg.getComment('import','repositories'),"\n")
	self.repositories                  = _cfg.get('import','repositories')

    def __drawImportControls(self):

	self.statictext      = wxStaticText(self.importpanel,-1,_('[import]'))
	self.statictext2     = wxStaticText(self.importpanel,-1,self.import_checkpoint_comment,(1,20))
	self.import_checkpoint_TBOX = wxTextCtrl(self.importpanel,-1,self.import_checkpoint,(1,40))
    	self.statictext3     = wxStaticText(self.importpanel,-1,self.import_lock_comment,(1,70))
	self.import_lock_file_TBOX  = wxTextCtrl(self.importpanel,-1,self.import_lock,(1,90))
	self.statictext4     = wxStaticText(self.importpanel,-1,self.patient_file_comment,(1,110))
	self.import_patient_file_TBOX  = wxTextCtrl(self.importpanel,-1,self.patient_file,(1,130))
	self.statictext5     = wxStaticText(self.importpanel,-1,self.import_patient_format_comment,(1,150))
	self.patient_format_import_LBOX = wxComboBox(
	    id = wxID_patient_format_import_LBOX,
	    name = 'patient_format_LBOX',
	    parent = self.importpanel,
	    value = _('please choose'),
	    choices = ['xdt'],
	    style = wxCB_DROPDOWN,
	    pos = (1,170)
	)
	if self.import_patient_format in ['xdt']:
	    self.patient_format_import_LBOX.SetValue(self.import_patient_format)
	self.statictext6     = wxStaticText(self.importpanel,-1,self.completion_marker_comment,(1,190))
	self.TBOX_completion_marker = wxTextCtrl(self.importpanel,-1,self.completion_marker,(1,220))
	self.statictext7     = wxStaticText(self.importpanel,-1,self.repositories_comment,(1,260))
	self.statictext8     = wxStaticText(self.importpanel,-1,_('repositories read from config-file: \nleaving them here means they will not show up in the \nnewly created config file'),(1,300))
	self.statictext9     = wxStaticText(self.importpanel,-1,_('repositories to be written to config-file: \nmoving them here means they will show up in\nnewly created config file'),(300,300))
	self.curr_repositories_LBOX = wxListBox(self.importpanel,-1,(1,350),(-1,-1))
	self.new_repositories_LBOX = wxListBox(self.importpanel,-1,(300,350),(-1,-1))
	self.old_to_new_rep_BTN  = wxButton (self.importpanel,wxID_old_to_new_rep_BTN,'-->',(200,345))
	self.new_to_old_rep_BTN  = wxButton (self.importpanel,wxID_new_to_old_rep_BTN,'<--',(200,375))
	self.new_rep_BTN         = wxButton (self.importpanel,wxID_new_rep_BTN,_('new type'),(200,405))
    	
    def __handle_repositories(self):
	for i in range (len(self.repositories)):
	    self.curr_repositories_LBOX.Append(self.repositories[i])
	EVT_BUTTON(self.old_to_new_rep_BTN, wxID_old_to_new_rep_BTN, self.on_old_to_new_repositories)
	EVT_BUTTON(self.new_to_old_rep_BTN, wxID_new_to_old_rep_BTN, self.on_new_to_old_repositories)
	EVT_BUTTON(self.new_rep_BTN, wxID_new_rep_BTN, self.on_new_repository)

    #------------------------------------------------------
    # event handlers
    #------------------------------------------------------
    def on_old_to_new_repositories(self, event):
	curr_repositories_LBOX_sel = self.curr_repositories_LBOX.GetStringSelection()
	if curr_repositories_LBOX_sel == '':
		dlg = wxMessageDialog(
			self,
			_('repository error : no repository selected'),
			_('acquiring repository'),
			wxOK | wxICON_ERROR
		)
		dlg.ShowModal()
		dlg.Destroy()
		return None
	else:
	    self.curr_repositories_LBOX.Delete(self.curr_repositories_LBOX.GetSelection())
	    self.new_repositories_LBOX.Append(curr_repositories_LBOX_sel)
	
    def on_new_to_old_repositories(self, event):
	new_repositories_LBOX_sel = self.new_repositories_LBOX.GetStringSelection()
	if new_repositories_LBOX_sel == '':
		dlg = wxMessageDialog(
			self,
			_('repositories error : no repository selected'),
			_('acquiring repository'),
			wxOK | wxICON_ERROR
		)
		dlg.ShowModal()
		dlg.Destroy()
		return None
	else:
	    self.new_repositories_LBOX.Delete(self.new_repositories_LBOX.GetSelection())
	    self.curr_repositories_LBOX.Append(new_repositories_LBOX_sel)
    
    def on_new_repository(self, event):
	check_idx = -1
	while check_idx == -1:
		dlg = wxTextEntryDialog(
			parent = self,
			message = _('Please enter the new repository !'),
			caption = _('enter new repository'),
			defaultValue = ''
		)
		btn = dlg.ShowModal()
		dlg.Destroy()
		# new document type ?
		if  btn == wxID_OK:
			tmp = dlg.GetValue()
			
			self.new_repositories_LBOX.Append(tmp)
			return 1
			
		# or cancel addition of new document types ?
		elif btn == wxID_CANCEL:
			return 1
    ##############################################################
    # viewer related stuff
    ##############################################################
    def __getViewervaluesFromFile(self):
	self.viewer_patient_file_comment    = string.join(_cfg.getComment('viewer','patient file'),"\n")
	self.viewer_patient_file            = _cfg.get('viewer','patient file')
	self.viewer_patient_format_comment  = string.join(_cfg.getComment('viewer','patient file format'),"\n")
	self.viewer_patient_format          = _cfg.get('viewer','patient file format')
	self.export_dir_comment             = string.join(_cfg.getComment('viewer','export dir'),"\n")
	self.export_dir                     = _cfg.get('viewer','export dir')

    def __drawViewerControls(self):
	self.statictext      = wxStaticText(self.viewerpanel,-1,_('[viewer]'))
	self.statictext2     = wxStaticText(self.viewerpanel,-1,self.viewer_patient_file_comment,(1,20))	
	self.viewer_patient_fileTBOX = wxTextCtrl(self.viewerpanel,-1,self.viewer_patient_file,(500,20))
	self.viewer_patient_fileBTN = 	wxButton (self.viewerpanel,wxID_viewer_patient_fileBTN,_('choose patient file'),(600,20))
	self.statictext3     = wxStaticText(self.viewerpanel,-1,self.viewer_patient_format_comment,(500,40))	
	self.patient_format_viewer_LBOX = wxComboBox(
	    id = wxID_patient_format_view_LBOX,
	    name = 'patient_format_LBOX',
	    parent = self.viewerpanel,
	    value = _('please choose'),
	    choices = ['xdt'],
	    style = wxCB_DROPDOWN,
	    pos = (500,60)
	)
	if self.viewer_patient_format in ['xdt']:
	    self.patient_format_viewer_LBOX.SetValue(self.viewer_patient_format)
	
	self.statictext4     = wxStaticText(self.viewerpanel,-1,self.export_dir_comment,(1,100))
	self.export_dirTBOX = wxTextCtrl(self.viewerpanel,-1,self.export_dir,(500,100))
	self.export_dirBTN = wxButton (self.viewerpanel,wxID_export_dirBTN,_('choose export directory'),(600,100))	
	
	EVT_BUTTON(self.viewer_patient_fileBTN, wxID_viewer_patient_fileBTN, self.on_viewer_patient_fileBTN)
	EVT_BUTTON(self.export_dirBTN, wxID_export_dirBTN, self.on_export_dirBTN)
    	
    #------------------------------------------------------
    # event handlers
    #------------------------------------------------------
    def on_viewer_patient_fileBTN(self, event):
	# patient file chooser
	dlg = wxFileDialog(
		self,
		_('choose a file'),
		'',
		'',
		wildcard = "all files(*.*)|*.*|dat files(*.dat)|*.dat",
		style = wxFILE_MUST_EXIST
	)
	dlg.ShowModal()
	dlg.Destroy()
	patientfile = dlg.GetPath()
	self.viewer_patient_fileTBOX.SetValue(patientfile)
	return None

    def on_export_dirBTN(self, event):
	# export directory chooser
	dlg = wxDirDialog(
		self,
		_('choose a directory'),
		''
	)
	dlg.ShowModal()
	dlg.Destroy()
	exportdir = dlg.GetPath()
	self.export_dirTBOX.SetValue(exportdir)
	return None
    ##############################################################
    # database related stuff
    ##############################################################	
    def __getDatabasevaluesFromFile(self):
	self.user        = _cfg.get('database','user')
	self.password    = _cfg.get('database','password')
	self.host        = _cfg.get('database','host')
	self.port        = _cfg.get('database','port')
	self.database    = _cfg.get('database','database')
	self.options     = _cfg.get('database','options')
	if self.options == None:
	    self.options = ''
	self.tty         = _cfg.get('database','tty')
	if self.tty == None:
	    self.tty 	 = ''
    
    def __drawDatabaseControls(self):
	self.statictext      = wxStaticText(self.databasepanel,-1,_('[database]'))
	self.statictext2     = wxStaticText(self.databasepanel,-1,_(' user'),(1,20))	
	self.user_TBOX       = wxTextCtrl(self.databasepanel,-1,self.user,(100,20))
	self.statictext3     = wxStaticText(self.databasepanel,-1,_(' password'),(1,40))	
	self.password_TBOX   = wxTextCtrl(self.databasepanel,-1,self.password,(100,40))
	self.statictext4     = wxStaticText(self.databasepanel,-1,_('host'),(1,60))
	self.host_TBOX       = wxTextCtrl(self.databasepanel,-1,self.host,(100,60))	
	self.statictext5     = wxStaticText(self.databasepanel,-1,_('port'),(1,80))
	self.port_TBOX       = wxTextCtrl(self.databasepanel,-1,self.port,(100,80))
	self.statictext6     = wxStaticText(self.databasepanel,-1,_('database'),(1,100))
	self.database_TBOX   = wxTextCtrl(self.databasepanel,-1,self.database,(100,100))
	self.statictext7     = wxStaticText(self.databasepanel,-1,_('options'),(1,120))
	self.options_TBOX    = wxTextCtrl(self.databasepanel,-1,self.options,(100,120))
	self.statictext8     = wxStaticText(self.databasepanel,-1,_('tty'),(1,140))    
	self.tty_TBOX        = wxTextCtrl(self.databasepanel,-1,self.tty,(100,140))
		    
    ##############################################################
    # cfgFile related stuff
    ##############################################################
    def __drawConfigFileControls(self):
	self.check_metadata_BTN  = wxButton (self.dumptoCfgFilePanel,wxID_check_metadata_BTN,_('check metadata'),(1,20))
	self.check_scan_BTN      = wxButton (self.dumptoCfgFilePanel,wxID_check_scan_BTN,_('check scan'),(1,60))
	self.check_index_BTN     = wxButton (self.dumptoCfgFilePanel,wxID_check_index_BTN,_('check index'),(1,100))
	self.check_import_BTN    = wxButton (self.dumptoCfgFilePanel,wxID_check_import_BTN,_('check import'),(1,140))
	self.check_viewer_BTN    = wxButton (self.dumptoCfgFilePanel,wxID_check_viewer_BTN,_('check viewer'),(1,180))
	self.check_database_BTN  = wxButton (self.dumptoCfgFilePanel,wxID_check_database_BTN,_('check database'),(1,220))
	self.write_cfgfile_BTN  = wxButton (self.dumptoCfgFilePanel,wxID_write_cfgfile_BTN,_('write configfile'),(1,260))
	EVT_BUTTON(self.check_metadata_BTN, wxID_check_metadata_BTN, self.on_check_metadata_BTN)
	EVT_BUTTON(self.check_scan_BTN, wxID_check_scan_BTN, self.on_check_scan_BTN)
	EVT_BUTTON(self.check_index_BTN, wxID_check_index_BTN, self.on_check_index_BTN)
	EVT_BUTTON(self.check_import_BTN, wxID_check_import_BTN, self.on_check_import_BTN)
	EVT_BUTTON(self.check_viewer_BTN, wxID_check_viewer_BTN, self.on_check_viewer_BTN)
	EVT_BUTTON(self.check_database_BTN, wxID_check_database_BTN, self.on_check_database_BTN)
	EVT_BUTTON(self.write_cfgfile_BTN, wxID_write_cfgfile_BTN, self.__dump_to_cfgfile)

    ##################################################################
    # check sanity of supplied values in [metadata]
    #################################################################
    	
    def on_check_metadata_BTN(self, event):
	descriptionTBOX   = self.descriptionTBOX.GetValue()	
	document_tag_TBOX = self.document_tag_TBOX.GetValue()
	name_tag_TBOX     = self.name_tag_TBOX.GetValue()
	firstname_tag_TBOX = self.firstname_tag_TBOX.GetValue()
	birth_tag_TBOX    = self.birth_tag_TBOX.GetValue()
	date_tag_TBOX     = self.date_tag_TBOX.GetValue()
	type_tag_TBOX     = self.type_tag_TBOX.GetValue()
	comment_tag_TBOX  = self.comment_tag_TBOX.GetValue()
	aux_comment_tag_TBOX = self.aux_comment_tag_TBOX.GetValue()
	ref_tag_TBOX      = self.ref_tag_TBOX.GetValue()
	obj_tag_TBOX      = self.obj_tag_TBOX.GetValue()
	new_doctypes_LBOX = self.new_doctypes_LBOX.GetCount()
	
	# has the user supplied a filename for document metadata file ?
	if descriptionTBOX == '':
		msg =_('xml document filename : no filename for document metadata file supplied\n e.g. document.xml')
	elif document_tag_TBOX == '':
		msg =_('document tag : no document tag supplied\n e.g. "document"')
	elif name_tag_TBOX == '':
		msg =_('name tag : no name tag supplied\n e.g. "last_name"')
	elif firstname_tag_TBOX == '':
		msg =_('firstname tag : no firstname tag supplied\n e.g. "first_name"')
	elif birth_tag_TBOX == '':
		msg =_('birth tag : no birth tag supplied\n e.g. "dob"')
	elif date_tag_TBOX == '':
		msg =_('date tag : no date tag supplied\n e.g. "doc_date"')
	elif type_tag_TBOX == '':
		msg =_('type tag : no type tag supplied\n e.g. "doc_type"')
	elif comment_tag_TBOX == '':
		msg =_('comment tag : no comment tag supplied\n e.g. "doc_comment"')
	elif aux_comment_tag_TBOX == '':
		msg =_('auxillary comment tag : no aux comment tag supplied\n e.g. "doc_desc"')
	elif ref_tag_TBOX == '':
		msg =_('reference tag : no ref tag supplied\n e.g. "doc_ref"')
	elif obj_tag_TBOX == '':
		msg =_('object tag : no obj tag supplied\n e.g. "object"')
	# check if user supplied one or more repositories 
	elif new_doctypes_LBOX == 0:
		msg =_('doctypes: no doctypes selected. Please supply one or more doctypes'),
	else:
		return 1
	
	dlg = wxMessageDialog(
		self,
		_('The values you entered for section [metadata] are partly incomplete or incorrect.\nPlease complete/correct the vaules for\n\n%s' % msg),
		_('[metadata] data input error'),
		wxOK | wxICON_ERROR
	)
	dlg.ShowModal()
	dlg.Destroy()
	return 0

    ##################################################################
    # check sanity of supplied values in [scan]
    #################################################################	
    def on_check_scan_BTN(self, event):
	SelBOX_id_mode = self.SelBOX_id_mode.GetStringSelection()
	SelBOX_show_id = self.SelBOX_show_id.GetStringSelection()
	SelBOX_do_barcodes = self.SelBOX_do_barcodes.GetStringSelection()
	TBOX_id_file = self.id_fileTBOX.GetValue()
	TBOX_tmp_dir = self.tmp_dirTBOX.GetValue()
	TBOX_barcodecmd = self.barcode_cmdTBOX.GetValue()
	SelBOX_JPEG_conv = self.SelBOX_JPEG_conv.GetStringSelection()
	TBOX_JPEG_quality = self.JPEG_qualityTBOX.GetValue()
	SelBOX_progressive_JPEG = self.SelBOX_progressive_JPEG.GetStringSelection() 
	
	if not SelBOX_id_mode in ['consecutive','random']:
		msg =_('document id mode : please choose the preferred id mode\nconsecutive or random')
	elif not SelBOX_show_id in ['yes','no']:
		msg =_('show document id : please choose yes or no')
	elif TBOX_id_file == -1 or TBOX_id_file == '':
		msg =_('document id file : please supply an id file')
		# Fixme : check if path exists
	elif TBOX_tmp_dir == -1 or TBOX_tmp_dir == '':
		msg =_('temporara directory : please choose a temporary directory')
		# Fixme : check if path exists
	elif not SelBOX_do_barcodes in ['on','off']:
		msg =_('generate barcodes : please choose to generate barcodes or not to')
	elif TBOX_barcodecmd == -1 or TBOX_barcodecmd == '':
		msg =_('external barcode command :please supply the external command for generating barcodes on your system ')
	elif not SelBOX_JPEG_conv in ['yes','no']: 
		msg =_('JPEG conversion : please choose BMP to JPEG conversion : yes/no '),
	elif TBOX_JPEG_quality == -1 or TBOX_JPEG_quality == '':
		msg =_('JPEG quality : please supply a value for the intended JPEG quality \nbetween "0"and "100"')
	elif not SelBOX_progressive_JPEG in ['yes','no']: 
		msg =_('progressive JPEG : yes/no'),	
	else:
	    return 1
	dlg = wxMessageDialog(
		self,
		_('The values you entered for section [scan] are partly incomplete or incorrect.\nPlease complete/correct the vaules for\n\n%s' % msg),
		_('[scan] data input error'),
		wxOK | wxICON_ERROR
	)
	dlg.ShowModal()
	dlg.Destroy()
	return 0
    ##############################################################
    # check sanity of supplied values in [index]
    ##############################################################
    def on_check_index_BTN(self, event):
	checkpoint_TBOX = self.checkpoint_TBOX.GetValue() 
	lock_file_TBOX  = self.lock_file_TBOX.GetValue()  
	cookie_TBOX     = self.cookie_TBOX.GetValue()
	patient_format_LBOX = self.patient_format_index_LBOX.GetStringSelection()
	patient_data_TBOX = self.patient_fileTBOX.GetValue()
	repository_dir_TBOX = self.repository_dirTBOX.GetValue()
	
	if checkpoint_TBOX == -1 or checkpoint_TBOX == _(''):
		msg =_('checkpoint file : no checkpointfile filename supplied\n please supply a filename for a file that indicates\n that indexing can start on a directory \ne.g. index.ok')
	elif lock_file_TBOX == -1 or lock_file_TBOX == _(''):
		msg =_('lock file : no lock_file filename supplied\n please supply a filename for a file that indicates\n that a directory is locked by some other indexing process\ne.g. indexing.now')
	elif cookie_TBOX == -1 or cookie_TBOX == _(''):
		msg =_('cookie : no cookie string supplied\n please supply a unique string per machine\ne.g. "gnustation"')
	elif patient_data_TBOX == -1 or patient_data_TBOX == '':
		msg =_('patient file : no patient file supplied\n please supply a filename\ne.g. "pat_idx.dat"')
	elif not patient_format_LBOX in ['xdt']:
		msg =_('patient file format : no patient file format supplied\n please supply a patient file format\ne.g. "xdt"')
	elif repository_dir_TBOX == -1 or repository_dir_TBOX == '':
		msg =_('[index] repository error : no directory supplied\n please supply a directory')
	else :
	    return 1
	dlg = wxMessageDialog(
		self,
		_('The values you entered for section [index] are partly incomplete or incorrect.\nPlease complete/correct the vaules for\n\n%s' % msg),
		_('[index] data input error'),
		wxOK | wxICON_ERROR
	)
	dlg.ShowModal()
	dlg.Destroy()
	return 0
	
    #######################################################
    # check sanity of supplied values in [import]
    #######################################################    
    def on_check_import_BTN(self, event):
	import_checkpoint_TBOX = self.import_checkpoint_TBOX.GetValue()
	import_lock_file_TBOX = self.import_lock_file_TBOX.GetValue()
	import_patient_file_TBOX = self.import_patient_file_TBOX.GetValue()
	patient_format_import_LBOX = self.patient_format_import_LBOX.GetStringSelection()
	completion_marker_TBOX = self.TBOX_completion_marker.GetValue()
	new_repositories_LBOX = self.new_repositories_LBOX.GetCount()
    
	# has the user supplied a checkpoint filename
	if import_checkpoint_TBOX == '':
		msg =_('checkpoint file : no filename supplied \ne.g. import.ok')
	# has the user supplied a lockfile filename
	elif import_lock_file_TBOX == '':
		msg =_('lock file : no filename supplied\ne.g. importing.now')
	# has the user suplied a patient file filename
	elif import_patient_file_TBOX == '':
		msg =_('patient file : please supply a filename for a file that contains info about\n the patient whose documents we try to index/import\ne.g. pat_idx.dat')		
	# has the user supplied a completion marker file
	elif completion_marker_TBOX == '':
		msg =_('completion marker file : no filename supplied')
	# has the user supplied the patient file format
	elif not patient_format_import_LBOX in ['xdt']:
		msg =_('patient file format : please supply the format of the file\n e.g. "xdt"')
	# check if user supplied one or more repositories 
	elif new_repositories_LBOX == 0:
		msg =_('repository :  please supply at least one directory\n where you store your indexed documents')
	else:
	    return 1
		
	dlg = wxMessageDialog(
		self,
		_('The values you entered for section [import] are partly incomplete or incorrect.\nPlease complete/correct the vaules for\n\n%s' % msg),
		_('[import] data input error'),
		wxOK | wxICON_ERROR
	)
	dlg.ShowModal()
	dlg.Destroy()
	return 0
	    # Fixme : return checkpoint filename,
	    #                lockfile filename,
	    #                patientfile filename,
	    #                list of repositories here
	    
    ########################################################################
    # check sanity of supplied values in [viewer]
    ########################################################################     	
    def on_check_viewer_BTN(self, event):
	import_patient_file = self.import_patient_file_TBOX.GetValue()
	patient_format_LBOX = self.patient_format_viewer_LBOX.GetStringSelection()
	export_dir = self.export_dirTBOX.GetValue()
	
	if import_patient_file == '':
		msg =_('checkpoint filename : no filename supplied\ne.g. import.ok')
	elif not patient_format_LBOX in ['xdt']:
		msg =_('patient file format : no patient file format supplied')
	elif export_dir == -1 or export_dir == '':
		msg =_('export directory : no export directory supplied')
	else :
	    return 1
	
	dlg = wxMessageDialog(
		self,
		_('The values you entered for section [viewer] are partly incomplete or incorrect.\nPlease complete/correct the vaules for\n\n%s' % msg),
		_('[viewer] data input error'),
		wxOK | wxICON_ERROR
	)
	dlg.ShowModal()
	dlg.Destroy()
	return 0
    ########################################################################
    # check sanity of supplied values in [database]
    ########################################################################     	
    def on_check_database_BTN(self, event):
    
	user     = self.user_TBOX.GetValue()
	password = self.password_TBOX.GetValue()
	host     = self.host_TBOX.GetValue()    	
	port     = self.port_TBOX.GetValue()    	
	database = self.database_TBOX.GetValue()	
	options  = self.options_TBOX.GetValue() 	
	tty      = self.tty_TBOX.GetValue()     	
	
	if user == -1 or user == '':
		msg =_('username : no username supplied')
	elif password == -1 or password == '':
		msg =_('password : no password supplied')
	elif database == -1 or database == '':
		msg =_('database : no database supplied')
	elif host == -1 or host == '':
		msg =_('host : no database host supplied')
	elif port == -1 or port == '':
		msg =_('port : no port for database host supplied')	
	#elif tty == -1 or tty == '':
	#	msg =_('tty : no tty supplied')
			
	#elif options == -1 or options == '':
	#	msg =_('options : no options supplied')
	else:
	    return 1
			
	dlg = wxMessageDialog(
		self,
		_('The values you entered for section [database] are partly incomplete or incorrect.\nPlease complete/correct the vaules for\n\n%s' % msg),
		_('[database] data input error'),
		wxOK | wxICON_ERROR
	)
	dlg.ShowModal()
	dlg.Destroy()
	return 0
	

    ##########################################################
    # now it is time to really dump all to an existing file
    ##########################################################
    def __dump_to_cfgfile(self, aDir):
	# first check each section once again
	#self.on_check_metadata_BTN(event)
	#self.on_check_scan_BTN(event)
	#self.on_check_index_BTN(event)
	#self.on_check_import_BTN(event)
	#self.on_check_viewer_BTN(event)
	#self.on_check_database_BTN(event)
	
	#if self.metadatachk == '1':
	#    test = test
	#elif self.scanchk == '1':
	#    test = test
	#elif self.indexchk == '1':
	#    test = test
	#elif self.importchk == '1':
	#    test = test
	#elif self.viewerchk == '1':
	#    test = test
	#elif self.databasechk == '1':
	    valid_doc_types = []
	    for i in range(self.new_doctypes_LBOX.GetCount()):
		valid_doc_types.append(self.new_doctypes_LBOX.GetString(i))
	    repositories = []
	    for i in range(self.new_repositories_LBOX.GetCount()):
		repositories.append(self.new_repositories_LBOX.GetString(i))
	    # where are we gonna store the configfile?
	    # get location
	    # metadata
	    _cfg.set("metadata","description",self.descriptionTBOX.GetValue())
	    _cfg.set("metadata","doctypes",valid_doc_types)
	    _cfg.set("metadata", "document_tag",self.document_tag_TBOX.GetValue())
	    _cfg.set("metadata", "name_tag",self.name_tag_TBOX.GetValue())
	    _cfg.set("metadata", "firstname_tag",self.firstname_tag_TBOX.GetValue())
	    _cfg.set("metadata", "birth_tag",self.birth_tag_TBOX.GetValue())
	    _cfg.set("metadata", "date_tag",self.date_tag_TBOX.GetValue())
	    _cfg.set("metadata", "type_tag",self.type_tag_TBOX.GetValue())
	    _cfg.set("metadata", "comment_tag",self.comment_tag_TBOX.GetValue())
	    _cfg.set("metadata", "aux_comment_tag",self.aux_comment_tag_TBOX.GetValue())
	    _cfg.set("metadata", "ref_tag",self.ref_tag_TBOX.GetValue())
	    _cfg.set("metadata", "obj_tag",self.obj_tag_TBOX.GetValue())
	    # index
	    _cfg.set('index','checkpoint file',self.checkpoint_TBOX.GetValue())
	    _cfg.set('index','lock file', self.lock_file_TBOX.GetValue())
	    _cfg.set('index','cookie',self.cookie_TBOX.GetValue())
	    _cfg.set('index','patient file',self.patient_fileTBOX.GetValue())
	    _cfg.set('index','patient file format',self.patient_format_index_LBOX.GetStringSelection())
	    _cfg.set('index','repository',self.repository_dirTBOX.GetValue())
	    # import
	    _cfg.set('import','checkpoint file',self.import_checkpoint_TBOX.GetValue())
	    _cfg.set('import','lock file',self.import_lock_file_TBOX.GetValue())
	    _cfg.set('import','patient file',self.import_patient_file_TBOX.GetValue())
	    _cfg.set('import','patient file format',self.patient_format_import_LBOX.GetStringSelection())
	    _cfg.set('import','completion marker file',self.TBOX_completion_marker.GetValue())
	    _cfg.set('import','repositories',repositories)
	    # scan
	    _cfg.set('scanning','document ID mode',self.SelBOX_id_mode.GetStringSelection())
	    _cfg.set('scanning','document ID file',self.id_fileTBOX.GetValue())
	    _cfg.set('scanning','show document ID',self.SelBOX_show_id.GetStringSelection())
	    _cfg.set('scanning','tmp',self.tmp_dirTBOX.GetValue())
	    _cfg.set('scanning','document barcode mode',self.SelBOX_do_barcodes.GetStringSelection())
	    _cfg.set('scanning','barcode generation command', self.barcode_cmdTBOX.GetValue())
	    _cfg.set('scanning','convert to JPEG',self.SelBOX_JPEG_conv.GetStringSelection())
	    _cfg.set('scanning','JPEG quality level',self.JPEG_qualityTBOX.GetValue())
	    _cfg.set('scanning','progressive JPEG',self.SelBOX_progressive_JPEG.GetStringSelection()) 
	    # viewer
	    _cfg.set('viewer','patient file',self.import_patient_file_TBOX.GetValue())
	    _cfg.set('viewer','patient file format',self.patient_format_viewer_LBOX.GetStringSelection())
	    _cfg.set('viewer','export dir',self.export_dirTBOX.GetValue())
	    # database
	    _cfg.set('database','user',self.user_TBOX.GetValue())
	    _cfg.set('database','password',self.password_TBOX.GetValue())
	    _cfg.set('database','host',self.host_TBOX.GetValue())
	    _cfg.set('database','port',self.port_TBOX.GetValue())
	    _cfg.set('database','database',self.database_TBOX.GetValue())
	    #_cfg.set('database','options',self.options_TBOX.GetValue())
	    #_cfg.set('database','tty',self.tty_TBOX.GetValue())
	
	    _cfg.store()
	    print "ok"
	#else:
	#    dlg = wxMessageDialog(
	#	self,
	#	_('[dump] error : not all sections were ok'),
	#	_('checking [dump] sections'),
	#	wxOK | wxICON_ERROR
	#    )
	#    dlg.ShowModal()
	#    dlg.Destroy()
	#    return 1

#================================================================
# MAIN
#----------------------------------------------------------------
if __name__ == '__main__':
	_log.Log (gmLog.lInfo, "starting display handler")

	if _cfg == None:
		_log.Log(gmLog.lErr, "Cannot run without config file.")
		sys.exit("Cannot run without config file.")

	# catch all remaining exceptions
	try:
		application = wxPyWidgetTester(size=(800,600))
		application.SetWidget(gmConfigEditorPanel)
		application.MainLoop()
	except:
		_log.LogException("unhandled exception caught !", sys.exc_info(), fatal=1)
		# but re-raise them
		raise

	_log.Log (gmLog.lInfo, "closing display handler")

else:
	import gmPlugin

	class gmConfigEditor(gmPlugin.wxNotebookPlugin):
		def name (self):
			return _("XDT")

		def GetWidget (self, parent):
			self.configeditor = gmConfigEditorPanel(parent)
			return self.viewer

		def MenuInfo (self):
			return ('tools', _('&show XDT'))

		def ReceiveFocus(self):
			# get file name
			# - via file select dialog
			aWildcard = "%s (*.BDT)|*.BDT|%s (*.*)|*.*" % (_("xDT file"), _("all files"))
			aDefDir = os.path.abspath(os.path.expanduser(os.path.join('~', "gnumed")))
			dlg = wxFileDialog(
				parent = NULL,
				message = _("Choose an xDT file"),
				defaultDir = aDefDir,
				defaultFile = "",
				wildcard = aWildcard,
				style = wxOPEN | wxFILE_MUST_EXIST
			)
			if dlg.ShowModal() == wxID_OK:
				fname = dlg.GetPath()
			dlg.Destroy()
			_log.Log(gmLog.lData, 'selected [%s]' % fname)

			# - via currently selected patient -> XDT files
			# ...

			self.viewer.filename = fname
			self.viewer.Populate()
			return 1

# $Log: gmConfigeditor.py,v $
# Revision 1.3  2003-04-05 00:22:05  shilbert
# clean up
#