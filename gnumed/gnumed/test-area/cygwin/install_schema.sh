rm err
#reads the filelist generated by bootstrap-parse and approximates a 
#gnumed schema install as per redo-max.sh , which is broken currently in cygwin
#DATABASE=gnumed_v3
DATABASE=gnumed_v2

sql_path=../../server/sql
bootstrap_path=../../server/bootstrap

echo "PARSING $bootstrap_path/bootstrap-monolithic_core.conf ..."

echo python bootstrap-parse.py $bootstrap_path/bootstrap-monolithic_core.conf filelist;
echo
python bootstrap-parse.py $bootstrap_path/bootstrap-monolithic_core.conf filelist > parse.log

echo "RESULT ***  file \"filelist\" now contains the ordered sql scripts "

read -p "press enter to view filelist:" 
echo "The contents of ** filelist ** is "
echo
cat filelist
echo
echo "-----------------"

read -p "press enter to start $DATABASE database install:" 
echo 
echo
echo "make sure postgres  has password access "
echo "e.g. do "
echo "  su"
echo "  su postgres"
echo "  psql template1"
echo "  alter user postgres password \"aknownpassword\"; "
echo
echo " then make sure pg_hba.conf allows md5 access to all on localhost"
echo 
echo " an example of pg_hba.conf is "
tail -n20 pg_hba.conf
echo
echo "**** Beginning install"
echo 


echo "enter the password for the user **  postgres ** for the next DROPDB command"
echo
echo dropdb -Upostgres -h127.0.0.1 $DATABASE
dropdb  -h127.0.0.1 -Upostgres $DATABASE
echo

echo "enter the password for the user ** postgres ** for the next CREATEDB command"
echo createdb -h.127.0.0.1 -Upostgres -O "gm-dbo" $DATABASE

createdb -h127.0.0.1 -Upostgres --owner "gm-dbo" $DATABASE

echo "creating the user gm-dbo ( may not work, if already exists for $DATABASE\(_vxx\), as gm-dbo is a global object, and can't be dropped)"
echo
echo creatuser -h127.0.0.1 -Upostgres -a -d -e -P  gm-dbo 
echo
echo "enter and confirm the password for ** gm-dbo ** (new user), then when Password: appears, enter ** postgres **'s password"

createuser -h127.0.0.1 -Upostgres -a -d -e -P gm-dbo 

echo enter password for the user ** postgres ** to run CREATELANG  \"plpgsql\"

createlang  -h127.0.0.1 -Upostgres "plpgsql" $DATABASE  ||  echo "failed to createlang plpgsql with user postgres" exit;

rm all
touch all

echo "Creating the installation script \"all\""
echo

echo "adding group and user creation"
echo
echo create group \"gm-public\"\; >> all
echo create group \"gm-doctors\"\; >> all
echo create user \"any-doc\" with password \'any-doc\' in group \"gm-doctors\", \"gm-public\"\; >> all

echo


for  x in `cat filelist`;do
	cat $sql_path/$x >> all
done

#some of the country specific data is needed, such as enum_ext_id_types
sh append_local_schema.sh

x=all



echo
echo "********* BEGINNING TO INSTALL the SCRIPT \"all\" **************"
echo 
echo "Please enter the password for the user \" gm-dbo \" **NOT user postgres** , it is often gm-dbo "
echo
echo "NB. the file \"err\" will contain the nonfatal errors, such as drops of non-existent entities, and any fatal error, which will be the last."
echo
echo  "executing"
echo "psql -Ugm-dbo -f $x -h127.0.0.1 $DATABASE"
echo "**  enter password for gm-dbo"
psql -f$x -Ugm-dbo -h127.0.0.1 $DATABASE  2> err

echo "finished the monolithic core"
echo
echo "inputting the test data"

sh append_test_data.sh $DATABASE

