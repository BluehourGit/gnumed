<?xml version="1.0" encoding="UTF-8"?>
<project basedir="./" default="setup" name="xgmed">
    <property environment="-diagnostics" file="build.ant.properties"/>

<patternset id="config.files">
    <include name="./conf/*.properties"/>
</patternset>

<patternset id="source.config.files">
    <include name="./java/*.properties"/>
</patternset>
	

<patternset id="property.files">
	<include name="**/*.properties"/>
</patternset>


<patternset id="custom.hbm.files">
	<include name="**/*.xml"/>
</patternset>

<target name="init">
		<property file="build.properties"/>
		<property file="${database.property.file}"/>

<!-- once a path with an id is defined, it is referred by <path refid="the id defined"/> inside a <classpath> -->		
	<path id="lib.class.path">
		<fileset dir="${lib.dir}" includes="**/*.jar"/>
	</path>

	<mkdir dir="${build.dir}"/>
	<mkdir dir="${build.hibernate.dir}"/>
	<mkdir dir="${build.java.dir}"/>
	<mkdir dir="${build.sql.dir}"/>
	<mkdir dir="${build.class.dir}"/>
	<mkdir dir="${build.hibernate.codegen.dir}"/>
</target>


<target depends="init" name="setup">
        <antcall target="configuration"/>
	
	<antcall target="xdoclet.hibernate.ddl"/>
	<antcall target="compile"/>
	
    <antcall target="test"/>
    </target>


<!-- +++++==++++++++++++++++++++++++++++  MAIN TASK -->
<!-- this is the old main task. Because the xdoclet generates faulty hbm files,
	you need to manually edit some of the hbm files after generate task,
	then call ant ddl to complete the sql generation.
	-->

<target depends="init" name="all">
	<antcall target="clean"/>
        <antcall target="configuration"/>
	<antcall target="generate"/>
	<antcall target="compile"/>
	<antcall target="xdoclet.hibernate.properties"/>
	<antcall target="xdoclet.hibernate.ddl"/>
</target>

<!-- ============================================================= -->


<target depends="init" name="clean">
	<echo>+++++++++++++++++++++++++++ </echo>
	<echo> cleaning	</echo>
	<echo/>

	<delete>
		<fileset dir="${build.dir}"/>
	</delete>
</target>	
		
<!-- ++++++++++++++++ "generate":This task looks through the java files for hibernate attributes,
			and generates the .hbm hibernate configuration files for each class, 
			using the HibernateDocletTask from xdoclet.
-->
<target depends="init" description="Generate hibernate class descriptor files." name="generate">
	
	<copy todir="${build.hibernate.dir}">
		<fileset dir="${custom.hbm.dir}">
			<patternset refid="custom.hbm.files"/>
		</fileset>
	</copy>

	<taskdef classname="xdoclet.modules.hibernate.HibernateDocletTask" classpathref="lib.class.path" name="hibernatedoclet"/>


	<hibernatedoclet destdir="${build.hibernate.dir}" mergedir="${build.hibernate.dir}">
		
		<fileset dir="${src.home}">
			<include name="**/xgmed/domain/**/*.java"/>
		</fileset>		

		<hibernate/>
		
	</hibernatedoclet>	
	
		
</target>	

<target depends="init" name="configuration">

<copy overwrite="true" todir="${build.hibernate.dir}">
       <fileset dir="conf">
        <patternset refid="property.files"/>
       </fileset> 
</copy>

<copy todir="${build.hibernate.dir}">
       <fileset dir="java">
	<patternset refid="property.files"/>
       </fileset> 
</copy>



</target>

<target depends="configuration" name="compile">
	<javac debug="true" destdir="${build.class.dir}" listfiles="true" optimize="true" srcdir="${src.home}">
		<include name="**/domain/**/*.java"/>
		<include name="**/test/**/*.java"/>
		<include name="**/helper/**/*.java"/>
		<classpath>
			<path refid="lib.class.path"/>
		</classpath>	
		
	</javac>

</target>	




<target depends="init" name="xdoclet.hibernate.ddl">
	<fileset dir="${build.hibernate.dir}" id="hibernate.mapping.files">
		                <include name="**/*.hbm.xml"/>
	</fileset>
        <pathconvert pathsep=" " property="hibernate.mappings" refid="hibernate.mapping.files"/>



<java classname="cirrus.hibernate.tools.SchemaExport" fork="true">
       <!--for hibernate 2  classname="net.sf.hibernate.tool.hbm2ddl.SchemaExport"  --> 

     <arg line="--quiet --delimiter=; --format --text --output=${build.sql.dir}/schemas.sql ${hibernate.mappings}"/>
      <jvmarg value="-Dhibernate.dialect=${hibernate.dialect}"/>
      <jvmarg value="-Dhibernate.connection.driver_class=${db.driver}"/>
      <jvmarg value="-Dhibernate.connection.url=${db.url}"/>
      <jvmarg value="-Dhibernate.connection.username=${db.user}"/>
      <jvmarg value="-Dhibernate.connection.password=${db.password}"/>
      <classpath>
	     
	      <pathelement path="${build.class.dir}"/> 
	      <path refid="lib.class.path"/>
      </classpath>
</java>

</target>

<target depends="xdoclet.hibernate.ddl" name="hibernate.codegen">
	<fileset dir="${build.hibernate.dir}" id="hibernate.mapping.files">
	     <include name="**/*.hbm.xml"/>
	</fileset>

<java classname="cirrus.hibernate.tools.CodeGenerator" fork="true">

      <arg line="--output=${build.hibernate.codegen.dir} ${hibernate.mappings}"/>
      <jvmarg value="-Dhibernate.dialect=${hibernate.dialect}"/>
      <jvmarg value="-Dhibernate.connection.driver_class=${db.driver}"/>
      <jvmarg value="-Dhibernate.connection.url=${db.url}"/>
      <jvmarg value="-Dhibernate.connection.username=${db.user}"/>
      <jvmarg value="-Dhibernate.connection.password=${db.password}"/>
      <classpath>
	      <pathelement path="${build.class.dir}"/> 
	      <path refid="lib.class.path"/>
	      </classpath>
	      </java>
																    
</target>

<target depends="compile" name="test_basic_observation">
	<java classname="xgmed.test.TestBasicObservation" fork="true">
         <classpath>
                <!-- jvmarg "-Djava.initial.naming.context -->
                <path refid="lib.class.path"/>
		<!-- <dirset dir="${build.class.dir}" /> -->
                <pathelement path="${build.class.dir}"/>
		<pathelement path="./conf"/>
                 </classpath>
                    <jvmarg value="-Dschema.export=on"/> <!-- whether to export new new database -->
	</java>
</target>
                
<target depends="compile" name="test_multi_person">
  <java classname="xgmed.test.TestAccountabilityParty" fork="true">
         <classpath>
                <!-- jvmarg "-Djava.initial.naming.context -->
                <path refid="lib.class.path"/>
		<!-- <dirset dir="${build.class.dir}" /> -->
                <pathelement path="${build.class.dir}"/>
		<pathelement path="./conf"/>
        </classpath>
        <jvmarg value="-Dtest.persons.number=50"/> <!-- number of patients to create -->
        <jvmarg value="-Dschema.export=off"/> <!-- whether to export new new database -->
  </java>
</target>

<target depends="compile" name="test_measurements">
<java classname="xgmed.test.TestBasicMeasurements" fork="true">
    <classpath>
        <path refid="lib.class.path"/>
        <pathelement path="${build.class.dir}"/>
        <pathelement path="./conf"/>
       
    </classpath>
    <jvmarg value="-Dschema.export=off"/>
</java>

</target>

<target depends="xdoclet.hibernate.ddl" name="ddl">
</target>




    <target name="test">
        <antcall target="test_basic_observation"/>
        <antcall target="test_multi_person"/>
        <antcall target="test_measurements"/>
    </target>
</project>
