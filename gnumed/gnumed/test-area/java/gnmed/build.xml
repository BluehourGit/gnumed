<?xml version="1.0" encoding="UTF-8"?>
<!-- Written to assume that classpath is rooted in the current directory. --><!-- So this should be OK if you make this script in the root of a filesystem. --><!-- If not, you may prefer to adjust the basedir, or move some directories around. --><!-- The idea is that both Ant and NetBeans have to know what the package root is --><!-- for the classes in your application. --><project basedir="." default="all" name="gnmed">

    <!-- Don't worry if you don't know the Ant syntax completely or need help on some tasks! -->
    <!-- The standard Ant documentation can be downloaded from AutoUpdate and -->
    <!-- and then you can access the help in menu Help | Help Sets | Ant 1.5.1 Manual. -->

    <target name="init">
        <!-- You can set up any variables you want used throughout the script here. -->
        <property name="hello" value="world"/>
        <!-- To use e.g. Jikes, uncomment this line. -->
        <!-- (Or make the same change in Tools | Options | Ant Settings | Properties.) -->
        <!-- <property name="build.compiler" value="jikes"/> -->
        <!-- You might like to set up some overridable paths, etc.: -->
        <!-- <property name="mylib" value="../lib/mylib.jar"/> -->
        <property file="build.properties"/>
        <property file="database.property.file"/>
        
        
<!-- once a path with an id is defined, it is referred by <path refid="the id defined"/> inside a <classpath> -->		
	<path id="ref.lib.path">
		<fileset dir="${lib.dir}" includes="**/*.jar"/>
	</path>
    
    </target>

    <target depends="init" name="compile">
        <!-- Both srcdir and destdir should be package roots. -->
        <!-- They could be different of course; in that case NetBeans can also be set -->
        <!-- up to compile to a different filesystem in the same way; see Compiler Types: -->
        <javac debug="true" deprecation="true" destdir="${build.class.dir}" srcdir="${src.home}">
        
            <!-- To add something to the classpath: -->
            <!-- <classpath><pathelement location="${mylib}"/></classpath> -->
            <!-- To exclude some files: -->
            <!-- <exclude name="com/foo/SomeFile.java"/><exclude name="com/foo/somepackage/"/> -->
            <classpath>
                <path refid="ref.lib.path"/>
            </classpath>
        </javac>
    </target>

    <target depends="init" name="xdocletToHibernate">
        <taskdef classname="xdoclet.modules.hibernate.HibernateDocletTask" classpathref="ref.lib.path" name="hibernateTask"/>
        
        <hibernateTask destdir="${build.class.dir}" mergedir="${build.class.dir}" validating="false" verbose="true">
            <fileset dir="${src.home}">
                <include name="**/*.java"/>
             </fileset>
	     <hibernate validateXML="true" version="2.0"/>
        </hibernateTask>

    </target>
    <target depends="init,compile, xdocletToHibernate" name="jar">
        <!-- To make a standalone app: -->
        <!-- 1. Create a myapp.mf manifest somewhere. -->
        <!-- 2. Put in it two lines: -->
        <!-- Manifest-Version: 1.0 -->
        <!-- Main-Class: com.foo.Main -->
        <!-- 3. Pass to <jar>: manifest="myapp.mf" -->
        <jar basedir="." compress="true" jarfile="myapp.jar">
            <exclude name="**/*.java"/>
            <exclude name="**/*.form"/>
            <exclude name="myapp.mf"/>
            <exclude name="myapp.jar"/>
            <exclude name="apidoc"/>
        </jar>
    </target>

    <target depends="init,jar" description="Build everything." name="all">
        <echo message="Application built. Hello ${hello}!"/>
    </target>

    <target depends="init, compile, xdocletToHibernate" description="Try running it." name="test">
        <java classname="gnmed.test.TestGmIdentity" failonerror="true" fork="true">
            <classpath path="./lib">
                <pathelement location="."/>
                <fileset dir="${lib.dir}"> <include name="**/*.jar"/> </fileset>
            </classpath>
        </java>
        <java classname="gnmed.test.TestGmGIS" failonerror="true" fork="true">
            <classpath path="./lib">
                <pathelement location="."/>
                <fileset dir="${lib.dir}"> <include name="**/*.jar"/> </fileset>
            </classpath>
    	</java>
        <java classname="gnmed.test.TestIdentityAddress" failonerror="true" fork="true">
            <classpath path="./lib">
                <pathelement location="."/>
                <fileset dir="${lib.dir}"> <include name="**/*.jar"/> </fileset>
            </classpath>
    	</java>
        <java classname="gnmed.test.TestClinHealthIssue" failonerror="true" fork="true">
            <classpath path="./lib">
                <pathelement location="."/>
                <fileset dir="${lib.dir}"> <include name="**/*.jar"/> </fileset>
            </classpath>
    	</java>
    </target>

    <target depends="init" description="Javadoc for my API." name="javadoc">
        <mkdir dir="apidoc"/>
        <javadoc destdir="apidoc" packagenames="com.foo.mylib.*,com.foo.myapi.*">
            <sourcepath>
                <pathelement location="."/>
            </sourcepath>
        </javadoc>
    </target>

    <target depends="init" description="Clean all build products." name="clean">
        <delete>
            <fileset dir=".">
                <include name="**/*.class"/>
            </fileset>
        </delete>
    <delete file="myapp.jar"/>
        <delete dir="apidoc"/>
    </target>

    <target depends="init, xdocletToHibernate, compile" name="testClinHealthIssue">
        <java classname="gnmed.test.TestClinHealthIssue" failonerror="true" fork="true">
            <classpath path="./lib">
                <pathelement location="."/>
                <fileset dir="${lib.dir}"> <include name="**/*.jar"/> </fileset>
            </classpath>
    	</java>
    </target>
    <target depends="init, xdocletToHibernate, compile" name="testLoadPostcode">
        <java classname="gnmed.test.TestCSVLoader" failonerror="true" fork="true">
            <classpath path="./lib">
                <pathelement location="."/>
                <fileset dir="${lib.dir}"> <include name="**/*.jar"/> </fileset>
            </classpath>
    	</java>
    </target>
    <target depends="init, xdocletToHibernate, compile" name="testClinEncounter">
        <java classname="gnmed.test.TestClinEncounter" failonerror="true" fork="true">
            <classpath path="./lib">
                <pathelement location="."/>
                <fileset dir="${lib.dir}"> <include name="**/*.jar"/> </fileset>
            </classpath>
    	    <jvmarg line="-server"/>
        </java>
    </target>
    <target depends="init, xdocletToHibernate, compile" name="testScript">
        <java classname="gnmed.test.TestScript" failonerror="true" fork="true">
            <classpath path="./lib">
                <pathelement location="."/>
                <fileset dir="${lib.dir}"> <include name="**/*.jar"/> </fileset>
            </classpath>
    	    <jvmarg line="-server"/>
        </java>
    </target>
</project>
