/*
 * Testgnmed1.java
 *
 * Created on 1 August 2003, 18:20
 */

package quickmed.usecases.test;
import java.util.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;
import org.gnumed.gmIdentity.identity;

/**
 *
 * @author  sjtan
 */
public class Testgnmed1 extends javax.swing.JFrame {
   
    /** Creates new form Testgnmed1 */
    public Testgnmed1() {
        initComponents();
          new Thread( new Runnable()  {
            public void run() {
                try {
                    gnmed.test.HibernateInit.initAll();
                } catch (Exception e) {
                    e.printStackTrace();
                    System.exit(-3);
                }
            }
        } ).start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        closeMenuItem2 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        referraljMenuItem2 = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setTitle("test gnumed java client");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        desktopPane.setPreferredSize(new java.awt.Dimension(1000, 800));
        desktopPane.setAutoscrolls(true);
        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        jMenuItem1.setText("New Patient");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        fileMenu.add(jMenuItem1);

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic(java.util.ResourceBundle.getBundle("SummaryTerms").getString("Save").charAt(0));
        saveMenuItem.setText(java.util.ResourceBundle.getBundle("SummaryTerms").getString("Save"));
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveMenuItem);

        closeMenuItem2.setMnemonic(java.util.ResourceBundle.getBundle("SummaryTerms").getString("Close").charAt(0));
        closeMenuItem2.setText(java.util.ResourceBundle.getBundle("SummaryTerms").getString("Close"));
        closeMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItem2ActionPerformed(evt);
            }
        });

        fileMenu.add(closeMenuItem2);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        jMenu1.setMnemonic('d');
        jMenu1.setText(java.util.ResourceBundle.getBundle("SummaryTerms").getString("Documents"));
        referraljMenuItem2.setText(java.util.ResourceBundle.getBundle("SummaryTerms").getString("referral_letter"));
        referraljMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referraljMenuItem2ActionPerformed(evt);
            }
        });

        jMenu1.add(referraljMenuItem2);

        menuBar.add(jMenu1);

        windowMenu.setMnemonic('w');
        windowMenu.setText("Window");
        menuBar.add(windowMenu);

        helpMenu.setText("Help");
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents

    private void closeMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItem2ActionPerformed
        // Add your handling code here:
        getFocusedFrame().doDefaultCloseAction();
    }//GEN-LAST:event_closeMenuItem2ActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // Add your handling code here:
        if ( getFocusedFrame() instanceof PatientInnerFrame) {
            PatientInnerFrame patientFrame = (PatientInnerFrame) getFocusedFrame();
            patientFrame.saveIdentity();
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void referraljMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referraljMenuItem2ActionPerformed
        // Add your handling code here:
        TestReferralInternalFrame frame = new TestReferralInternalFrame();
        frame.setClient(getFocusedIdentity());
        desktopPane.add(frame);
        frame.setVisible(true);
        addWindowMenuItem(frame);
    }//GEN-LAST:event_referraljMenuItem2ActionPerformed
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Add your handling code here:
        // creates a new patient inner frame
        PatientInnerFrame frame = createPatientInnerFrame( new identity(), new SingleSessionManagerReference(), false);
        desktopPane.add(frame);
        frame.setVisible(true);
        addWindowMenuItem(frame);
         
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Add your handling code here:
        //        if (idFinder == null)
        
        // using a Single Session manager reference so that the session is shared
        // for all components created for one identity (  one session per identity ).
        // Hibernate documentation says a caching is normally at a session division.
        
        idFinder= new FindIdentity((Frame)SwingUtilities.getAncestorOfClass(Frame.class,  this), true, new SingleSessionManagerReference() );
        idFinder.setLocationRelativeTo(desktopPane);
        idFinder.setLocation(desktopPane.getWidth()/3, desktopPane.getHeight()/3);
        idFinder.show();
        
        Object[] selected = idFinder.getSelectedValues();
        for (int i = 0; i < selected.length; ++i) {
            PatientInnerFrame frame =createPatientInnerFrame( (identity) selected[i], idFinder.getManagerRef(), true);
           
            desktopPane.add(frame);
            frame.setVisible(true);
            addWindowMenuItem(frame);
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        saveInternalFrameEditing();
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    protected  PatientInnerFrame createPatientInnerFrame( identity id, Object persister, boolean freezeDemographics) {
        PatientInnerFrame frame = new PatientInnerFrame();
        id.setPersister(persister);
        frame.setIdentity(id);
        frame.setDemographicsFrozen(freezeDemographics);
        frame.addInternalFrameListener(  new Testgnmed1.FocusIdentityListener() );
        return frame;
    }
    class FocusIdentityListener extends InternalFrameAdapter {
        public void internalFrameActivated( InternalFrameEvent event) {
            PatientInnerFrame frame = (PatientInnerFrame) event.getInternalFrame();
            setFocusedIdentity( frame.getIdentity());
            setFocusedFrame( frame);
        }
    }
    /** 
     * saves any unsaved edited records by invoking a internalFrameClosing event  on
     * each internal frame
     */
    public void saveInternalFrameEditing() {
        // bug : don't use desktopPane.getAllFrames() as the ongoing variable.
        // need this variable reference as each frame closes will change the referemced value of desktopPane.getAllFrames()
        JInternalFrame frames[] = desktopPane.getAllFrames();
        for (int i = 0; i <  frames.length; ++i) {
            try {
               
                frames[i].doDefaultCloseAction();
               
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new Testgnmed1().show();
    }
    
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem closeMenuItem2;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem referraljMenuItem2;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenu windowMenu;
    // End of variables declaration//GEN-END:variables
    /**
     * list of patient frames.
     */
    java.util.List frameList = new ArrayList();
    
    FindIdentity idFinder;
    
    /** Holds value of property focusedIdentity. */
    private identity focusedIdentity;
    
    /** Holds value of property focusedFrame. */
    private JInternalFrame focusedFrame;
    
    /**
     * the action of selecting a window from the window menu.
     */
    static class WindowShowAction extends AbstractAction {
        JInternalFrame frame;
        public WindowShowAction(JInternalFrame frame) {
            super(frame.getTitle());
            this.frame = frame;
        }
        
        /** deiconifies and brings the window to front.
         */
        public void actionPerformed(java.awt.event.ActionEvent e) {
            try {
            frame.setIcon(false);
            } catch (Exception ex)  {
                ex.printStackTrace();
            }
            
            frame.toFront();
        }
        
    }
    
    
    /**
     *removes the menuitem associated with the given frame
     */
    class MenuItemRemovalOnInnerFrameCloseListener extends InternalFrameAdapter {
        JMenuItem item;
        public MenuItemRemovalOnInnerFrameCloseListener(JMenuItem item) {
            this.item = item;
        }
        public void internalFrameClosed(InternalFrameEvent evt) {
            windowMenu.remove(item);
        }
    }
    
    
    /**
     * adds a menuItem for the new internal frame on the window menu, and a listener for removing the
     * menu item when the frame closes.
     */
    void addWindowMenuItem(JInternalFrame frame) {
        
        Action action = new Testgnmed1.WindowShowAction(frame);
        action.setEnabled(true);
        frame.addInternalFrameListener( new Testgnmed1.MenuItemRemovalOnInnerFrameCloseListener( windowMenu.add(action)) );
        
    }
    
    /** Getter for property focusedIdentity.
     * @return Value of property focusedIdentity.
     *
     */
    public identity getFocusedIdentity() {
        return this.focusedIdentity;
    }
    
    /** Setter for property focusedIdentity.
     * @param focusedIdentity New value of property focusedIdentity.
     *
     */
    public void setFocusedIdentity(identity focusedIdentity) {
        this.focusedIdentity = focusedIdentity;
    }
    
    /** Getter for property focusedFrame.
     * @return Value of property focusedFrame.
     *
     */
    public JInternalFrame getFocusedFrame() {
        return this.focusedFrame;
    }
    
    /** Setter for property focusedFrame.
     * @param focusedFrame New value of property focusedFrame.
     *
     */
    public void setFocusedFrame(JInternalFrame focusedFrame) {
        this.focusedFrame = focusedFrame;
    }
    
}
