#!/usr/bin/env python
# generated by wxGlade 0.2 on Sun Feb  2 18:41:07 2003

from wxPython.wx import *
from wxPython.grid import *
import getopt

class MyFrame(wxFrame):
    def __init__(self, *args, **kwds):
	self.table = kwds["table"]
	del kwds["table"]		
	self.regex_ex_field = 'id.*' 
	if kwds.has_key("regex_ex_field"):
		self.regex_ex_field = kwds['regex_ex_field']
		del kwds['regex_ex_field']


        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wxDEFAULT_FRAME_STYLE
        wxFrame.__init__(self, *args, **kwds)
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        # end wxGlade

    def __do_layout(self):

        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wxBoxSizer(wxHORIZONTAL)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        self.Layout()
        # end wxGlade
	sizer_1.Add(TableView1(self, -1, url = 'http://localhost:9000', table = self.table, regex_ex_field = self.regex_ex_field), wxEXPAND)

# end of class MyFrame

from xmlrpclib import *


class TableView1(wxPanel):
    def __init__(self, *args, **kwds):
	self.table = kwds['table']
	self.url = kwds['url']
	self.re_prog = re.compile( kwds['regex_ex_field'])
	del kwds['table']
	del kwds['url']
	del kwds['regex_ex_field']

        # begin wxGlade: TableView1.__init__
        kwds["style"] = wxTAB_TRAVERSAL
        wxPanel.__init__(self, *args, **kwds)
        self.grid_1 = wxGrid(self, -1)
        self.create_button = wxButton(self, -1, "create")
        self.save_row_button = wxButton(self, -1, "save_row")
        self.delete_button = wxButton(self, -1, "delete")
        self.find_button = wxButton(self, -1, "find")
        self.button_5 = wxButton(self, -1, "button_5")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def is_matching_exclude_regex(self, s):
	re_obj = self.re_prog.match( s)
	if re_obj == None:
		return 0
	return 1
		    

		
    def __init_config(self):
	self.server = Server(self.url)	
	exec('list = self.server.describe_fields_'+self.table+"()")
	fields = []
	self.grid_1.DeleteCols(0,1)
	for fieldname , list in list:
		if not self.is_matching_exclude_regex(fieldname):
			fields.append(fieldname)

	self.grid_1.AppendCols( len (fields))
	for y in xrange(0, len(fields)):
		self.grid_1.SetColLabelValue(y, fields[y])
	
	self.grid_1.AppendRows(10)
	self.grid_1.AutoSize()
	
	
	
	
    def __set_properties(self):
        # begin wxGlade: TableView1.__set_properties
        self.grid_1.CreateGrid(10, 1)
        self.grid_1.EnableEditing(0)
        self.grid_1.EnableDragGridSize(0)
        # end wxGlade
	self.__init_config()


    def __do_layout(self):
        # begin wxGlade: TableView1.__do_layout
        grid_sizer_1 = wxFlexGridSizer(2, 1, 0, 0)
        sizer_2 = wxStaticBoxSizer(wxStaticBox(self, -1, "commands"), wxHORIZONTAL)
        grid_sizer_1.Add(self.grid_1, 1, wxEXPAND, 0)
        sizer_2.Add(self.create_button, 0, 0, 0)
        sizer_2.Add(self.save_row_button, 0, 0, 0)
        sizer_2.Add(self.delete_button, 0, 0, 0)
        sizer_2.Add(self.find_button, 0, 0, 0)
        sizer_2.Add(self.button_5, 0, 0, 0)
        grid_sizer_1.Add(sizer_2, 1, wxEXPAND, 0)
        self.SetAutoLayout(1)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self)
        grid_sizer_1.SetSizeHints(self)
        grid_sizer_1.AddGrowableRow(0)
        grid_sizer_1.AddGrowableCol(0)
        self.Layout()
        # end wxGlade

# end of class TableView1




class MyApp( wxApp) :
	
        def OnInit(self):
		self.tablename = None
		self.get_local_options()
                wxInitAllImageHandlers()
		if self.tablename == None:
                	frame = MyFrame( None, -1, "Harry" , table="clinical_history")
		else:
			frame = MyFrame( None, -1, "Harry", table = self.tablename, regex_ex_field = self.regex_ex_field)
                frame.SetSize((800,600))
                self.SetTopWindow(frame)
                frame.Show()
                return true

	def get_local_options(self):
		
		opts, args = getopt.getopt( sys.argv[1:], "ht:e:")
		self.regex_ex_field = '000'
		for option, value in opts:
			if option == '-h':
				print"""
		-h	help

		-t	table to display

		-e	regex expression to match excluded fields

		"""
				sys.exit(1)
			if option == '-t':
				self.tablename = value

			if option == '-e':
				self.regex_ex_field = value
				

def main():
        app = MyApp(0)
        app.MainLoop()

if __name__ == '__main__':
        main()

