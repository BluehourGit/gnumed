# GnuMed database system bootstrapping config file
#-------------------------------------------------
# license: GPL
# author: Karsten Hilbert@gmx.net

#----------------------------------
[revision control]
file = $Source: /home/ncq/Projekte/cvs2git/vcs-mirror/gnumed/gnumed/test-area/bootstrap-ng/Attic/localhost-monolithic-no_data.conf,v $
version = $Revision: 1.1 $

#----------------------------------
[installation]

# set this to no if you want to run this script without
# any user interaction, in this case you must provide passwords
# for the users to be installed,
# this has been conceived to make Debian postinst happy :-)
interactive = yes

# these NEED NOT correspond to GnuMed service names,
# you just need to have a group corresponding to each line
services = $services$
config
demographics
$services$

# where to look for dynamic libraries for procedural languages
# - we can safely list any directories here that we come
#   across on any distribution
# - the first match will be used
# - reorder the list if you want to force a particular
#   directory to be used for a particular language
language library dirs = $language library dirs$
/usr/lib/postgresql/lib/
/usr/lib/pgsql/
$language library dirs$

#----------------------------------
# these really shouldn't be changed
[GnuMed defaults]

database owner alias = GnuMed owner

# - these are the standard groups that exist
#   in every GnuMed database
# - note how some groups don't have a write-enabled counterpart
# - you can (and probably should) define site-specific
#   groups in another file
# - at the end of the setup you'll be asked if you want to
#   install your site-specific groups/users, too
groups = $groups$
gm-doctors
_gm-doctors
gm-staff_medical
_gm-staff_medical
gm-staff_office
_gm-staff_office
gm-trainees_medical
gm-trainees_office
gm-public
$groups$

# - activate these backend languages
# - the names just point to the corresponding sections
procedural languages = $procedural languages$
pg/SQL
$procedural languages$

#pg/Python

#----------------------------------
# services
#----------------------------------
[service config]
name = default
version = 0.1
database alias = gnumed-test
postgres version = 7.1
schema = $schema$
sql/gmconfiguration.sql
sql/gmServices.sql
$schema$

[service demographics]
name = personalia
version = 0.1
database alias = gnumed-test
postgres version = 7.1
schema = $schema$
sql/gmidentity.sql
sql/gmgis.sql
sql/gmServices.sql
$schema$

#----------------------------------
# databases
#----------------------------------
[database gnumed-test]
name = gnumed-test
server alias = localhost

#----------------------------------
# servers
#----------------------------------
[server localhost]
name = localhost
port = 5432
template database = template1
super user alias = postgres

#----------------------------------
# users
#----------------------------------
[user GnuMed owner]
name = gm-dbowner
#password = 

[user postgres]
name = postgres
#password =

#----------------------------------
# languages
#----------------------------------
[pg/SQL]
library name = plpgsql.so

call handler = $call handler$
CREATE FUNCTION plpgsql_call_handler () RETURNS OPAQUE AS '%s' LANGUAGE 'C';
$call handler$

language activation = $language activation$
CREATE TRUSTED PROCEDURAL LANGUAGE 'plpgsql' HANDLER plpgsql_call_handler LANCOMPILER 'PL/pgSQL';
$language activation$

#----------------------------------
[pg/Python]
library name = plpython.so

call handler = $call handler$
CREATE FUNCTION plpython_call_handler () RETURNS OPAQUE AS '%s' LANGUAGE 'C';
$call handler$

language activation = $language activation$
CREATE TRUSTED PROCEDURAL LANGUAGE 'plpython' HANDLER plpython_call_handler;
$language activation$

#----------------------------------
# $Log: localhost-monolithic-no_data.conf,v $
# Revision 1.1  2003-01-22 22:50:36  ncq
# - example of minimal monolithic database on localhost
#
# Revision 1.3  2003/01/21 01:11:09  ncq
# - current (non-complete) state of affairs
#
# Revision 1.2  2003/01/14 20:52:46  ncq
# - works "more" :-)
#
# Revision 1.1  2003/01/13 16:55:20  ncq
# - first checkin of next generation
#
# Revision 1.3  2002/11/16 01:12:09  ncq
# - now finally also imports sql schemata from files
#
# Revision 1.2  2002/11/01 13:56:05  ncq
# - now also installs the GnuMed core database "gnumed"
#
# Revision 1.1  2002/10/31 22:59:19  ncq
# - tests environment, bootstraps users, bootstraps procedural languages
# - basically replaces gnumed.sql and setup-users.py
#
# Revision 1.9  2002/10/29 23:03:32  ncq
# - gm-public is intended to be a group holding _all_ gnumed users
# - useful for access to select on config/db setup etc.
#
# Revision 1.8  2002/10/29 22:54:06  ncq
# - consistenly use "gm-" prefix for GnuMed groups/users (except for test users)
#
# Revision 1.7  2002/10/20 15:29:14  ncq
# - now has support for site-specific configuration in a separate file
# - remembers passwords from "usr" to "_usr"
#
# Revision 1.6  2002/10/08 14:08:37  ncq
# - seems to fully work now
#
# Revision 1.5  2002/10/04 15:49:08  ncq
# - name default users/groups usefully
#
# Revision 1.4  2002/10/03 14:05:36  ncq
# - actually create the gnumed superuser
#
# Revision 1.3  2002/10/03 00:22:37  ncq
# - add a clarifying comment
#
# Revision 1.2  2002/10/03 00:16:20  ncq
# - first real steps: connect and verify database version
#
# Revision 1.1  2002/09/30 23:06:26  ncq
# - first shot so people can see what I am getting at
#
