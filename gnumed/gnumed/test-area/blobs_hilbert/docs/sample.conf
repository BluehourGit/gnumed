# sample config file for GNUmed document archive binaries
# $Source: /home/ncq/Projekte/cvs2git/vcs-mirror/gnumed/gnumed/test-area/blobs_hilbert/docs/Attic/sample.conf,v $
# $Revision: 1.7 $
#-----------------------------------------------------------------
# The config file needs to have the same name as the binary
# with .py replaced by .conf so that the config file can be
# found automatically. You can put the config file in either
# of the following places:
#
# - ~/.<name-of-binary>/<name-of-binary>.conf
# - ~/.<name-of-binary>.conf
# - /etc/<name-of-binary>/<name-of-binary>.conf
# - /etc/<name-of-binary>.conf
#
# You can, of course, make symlinks with the name of the binary
# point to one and the same config file used for all binaries.
#
# Alternatively, you can hand over the config file via the command
# line option "--conf-file=<conf-file-name>".
#-----------------------------------------------------------------
# merged cfg file for index, scan and view
#-----------------------------------------

[metadata]
# read document metadata from here
description = document.xml

# these are the valid document types
# they need to be sync'ed with what's in the database
doctypes = $doctypes$
Entlassung Chirurgie
Entlassung Interne
Entlassung Psychatrie
Entlassung Reha
Entlassung Orthopädie
Arztbrief Chirurgie
Arztbrief Orthopädie
Arztbrief Innere
Arztbrief Neurologie
Arztbrief Psychotherapie
Arztbrief Radiologie
Arztbrief Umweltmedizin
Arztbrief Mikrobiologie
Labor
$doctypes$

# XML tags for document metadata
document_tag = document
name_tag = last_name
firstname_tag = first_name
birth_tag = dob
date_tag = doc_date
type_tag = doc_type
comment_tag = doc_comment
aux_comment_tag = doc_desc
ref_tag = doc_ref
obj_tag = object

#-------------------------------
[index]

# if this checkpoint file exists, indexing can start on a directory
checkpoint file = index.ok

# if this semaphore file exists, a directory is locked by some other indexing process
lock file = indexing.now

# this must be set to a unique string per machine that you do indexing on,
# it is used to detect document directories that were locked for
# indexing but not finished due to a crash
cookie = a_unique_string_per_machine

# read patient data from here
#patient file = c:\My Documents\GnuMed-Archiv\data\pat_idx.dat
#patient file = c:\Eigene Dateien\GnuMed-Archiv\data\pat_idx.dat
patient file = ~/gnumed/pat_idx.dat

# which format is the patient file in ?
patient file format = xdt

# - directories below this one need to be indexed
# - on Windows use something like "c:\My Documents\GnuMed-Archiv\data\scans\"
# - it also makes sense to point this to a directory
#   exported from a server
#repository = c:\My Documents\GnuMed-Archiv\data\scans\
#repository = c:\Eigene Dateien\GnuMed-Archiv\data\scans\
repository = ~/gnumed/scans/

#-------------------------------
[import]

# if this exists import can proceed, eg. frontend work is assumed to be complete
checkpoint file = import.ok

# if this file exists the dir is assumed to be under import currently
lock file = importing.now

# this is where the patient data is stored
patient file = pat_idx.dat
patient file format = xdt

# if this file exists a previous import on this directory has succeeded
# and the files and directory can safely be removed
completion marker file = imported.txt

# - this may or may not be the same as index.repository depending
#   on your indexing client and your setup
#
#repositories = $repositories$
#c:\My Documents\GnuMed-Archiv\data\scans\
#$repositories$
#
#repositories = $repositories$
#c:\Eigene Dateien\GnuMed-Archiv\data\scans\
#$repositories$
#
repositories = $repositories$
~/gnumed/scans/
$repositories$

#-------------------------------
[scanning]

# - this is the mode for document ID generation
# 1) random      - generate random unique IDs
# 2) consecutive - generate consecutive (but still unique) numbers
#document ID mode = consecutive
document ID mode = random

# - this is where the most recently used document ID is stored
#   if you use consecutive numbering of documents
#document ID file = c:\Eigene Dateien\GnuMed-Archiv\data\last_doc_ID.dat
#document ID file = c:\My Documents\GnuMed-Archiv\data\last_doc_ID.dat
document ID file = ~/.gnumed/last_doc_ID.dat

# - do you want to see the final document ID so you can put
#   it on the originals ?
#show document ID = no
show document ID = yes

# - this should sit on the fastest disk/RAM disk you have
#tmp = c:\WINDOWS\TEMP\
#tmp = /tmp/
#tmp = /tmp/gnumed/
tmp = ~/gnumed/tmp/

# do we do barcodes ?
generate barcode = yes
barcode generation command = barcode -e 128

#===============================
[viewer]

# read patient data from here
patient file = ~/gnumed/pat_view.dat
patient file format = xdt

# export objects into this directory for display/reuse
export dir = ~/gnumed/export/

#===============================
# the database connection
[database]
user = 
password = 
host = 
port = 5432
database = 
#options = None
#tty = None

## unused ##########################################
# scanning:
# hand this over as the first argument !

# configure if you want to use special preferences or not
# 0 --> No, I want to use the twain/sane gui to adjust options
# 1 --> Yes please let me do so
# the details are in scan-config.ini
#[activate]
#setting = 0
