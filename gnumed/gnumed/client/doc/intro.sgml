    <chapter id="intro">
     <title>Introduction</title>

    <para>GNUMed is  a comprehensive scalable software solution for paperless 
medical practice with emphasis on privacy protection, secure patient-centric 
record sharing, decision support and ease of use.
</para>
       <para>GNUMed is not yet ready for download as a package.
It will become available at 
<ulink url="http://gnumed.org/">
<citetitle>gnumed.org</citetitle></ulink>.
 
It is released under the GNU 
General Public Licence, see the file <filename>LICENCE</filename> for details.
</para>
<para>The latest sources are available by CVS at 
<ulink url="http://savannah.gnu.org/projects/gnumed/">
<citetitle>savannah.gnu.org</citetitle></ulink>.
If CVS asks for a password, use a blank line. The module name is 
<emphasis>gnumed</emphasis>
</para>
<sect1 id="linux">
<title>Linux Installation</title>
<para>GNUMed has run successfully on Linux. It requires a number of
packages to be installed before it can be run.</para>
      <para>GNUMed requires the following packages:

<table frame=all><title>Requirements</title>
<tgroup cols=3 align=left colsep=1 rowsep=1>
<thead>
<row>
  <entry>Package</entry>
  <entry>URL</entry>
  <entry>Version</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Python Scripting Language</entry>
  <entry><ulink url="http://www.python.org/">
<citetitle>python.org</citetitle></ulink>
</entry>
<entry>
<filename>2.1</filename>
</entry>
</row>
<row>
  <entry>GTK libraries</entry>
  <entry><ulink url="http://www.gtk.org/">
<citetitle>gtk.org</citetitle></ulink>
</entry>
<entry>
<filename>1.2</filename>
</entry>
</row>
<row>
  <entry>mx extension libraries</entry>
  <entry><ulink url="http://www.lemburg.com/files/python/eGenix-mx-Extensions.html">
<citetitle>mx</citetitle></ulink>
</entry>
<entry>
<filename>mx</filename>
</entry>
</row>
<row>
  <entry>PostgreSQL Database server</entry>
  <entry><ulink url="http://www.postgresql.org/">
<citetitle>postgresql.org</citetitle></ulink>
<footnote><para>Don't forget to include the Python interface
libraries.
</para></footnote>
</entry>
<entry>
7.0
</entry>
</row>
<row>
  <entry>wxWindows windowing library</entry>
  <entry><ulink url="http://www.wxwindows.org/dl_gtk.htm#dev">
<citetitle>wxwindows web site</citetitle></ulink>,
<ulink url="http://www.wxpython.org/download.php#binaries">
<citetitle>wxpython (wxWindows for Python bindings)</citetitle></ulink>
</entry>
<entry>
2.3.1 (both must be the same)
</entry>
</row>
</tbody>
</tgroup>
</table></para>

<para>This list looks daunting, but Python and GTK libraries are
almost invariably installed, and PostgreSQL, if not installed, will be
on your Linux CDs somewhere.</para>
<para>Note that the packages should be installed in the listed order, as 
some depend upon others. Also, if using RPM, you must install the libraries 
(postgresql-lib), then the main package (postgresql), then the others, 
including postgresql-python.
</para>

<para>
On some distros, some of the Python libraries get installed in funny places.
So Python can find them, add this line to your <filename>.profile</filename>:

<screen>
export PYTHONPATH=/usr/lib/python1.5/site-packages:/usr/local/lib/python2.1/site-packages
</screen>
</para>

<para>
NOTE: on some the later distros (Mandrake is where I have seen this), wxGTK does not install 
as it requires a version of libpng older than what's installed. This old library is vanishing off 
the web. Here is a  
<ulink url="http://mail.student.unimelb.edu.au/~ihaywood/libpng-1.0.8-1.i386.rpm"> 
<citetitle>mirror</citetitle></ulink></para> 


<sect2><title>Configuring PostgreSQL (quoting Steven Duffy)</title>
<para> Some steps are required to get the <application>PostgreSQL</application>
database system running.</para>
<para>First, make sure you have the PostgreSQL server daemon running.
Check under <filename>/etc/rc.d/</filename>, or run <application>Linuxconf</application>. If isn't you can set it up with these commands as root:
<screen>
su - postgres
initdb -D ~postgres/data
postmaster -D ~postgres/data >logfile 2>&1 &
</screen></para>
<para>
One minor issue has been overlooked so far, this is TCP/IP access to the database. In order to do this:</para>
<procedure>
<step><para>find and open <filename>/etc/postgresql/postgresql.conf</filename></para></step>
<step><para>change <command>tcpip_socket = false</command> to <command>tcpip_socket = on</command></para></step>
<step><para>save changes and restart <application>PostgreSQL</application></para></step>
</procedure>
<para>
This can also be accomplished by passing the <command>-i</command>
option to 
the postmaster upon execution. If your distribution uses as postgresql 
script to start the server, it is likely the <command>pg_ctl</command> 
is used to run postmaster. In this case, find where
<command>pg_ctl</command> 
is executed and add<command> insert -o \&quot;-i\&quot;</command> as one of
the 
options to pg_ctl. Otherwise, find the script from which postmaster is 
executed and simply add <command>-i</command> as an argument.
</para>

<para>Once PostgreSQL is set up, go to the section on
setting up the database (<xref linkend="pgsql">.)</para>

</sect2>

<sect1 id="mac"><title>Mac</title>
<para>This has been done, more information is needed.
</para>
</sect1>


<sect1 id="win9x"><title>Windows</title>

   <para>GNUMed requires the following packages. Each link points to a .EXE file. Download them and run each in turn.

<table frame=all><title>Requirements</title>
<tgroup cols=3 align=left colsep=1 rowsep=1>
<thead>
<row>
  <entry>Package</entry>
  <entry>URL</entry>
<entry>Version</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Python Scripting Language</entry>
  <entry><ulink url="ftp://ftp.python.org/pub/python/2.2.1/Python-2.2.1c2.exe">
<citetitle>python.org</citetitle></ulink>
</entry>
<entry>2.1</entry>
</row>
<row>
  <entry>wxWindows windowing library</entry>
   <entry>
<ulink url="http://prdownloads.sourceforge.net/wxpython/wxPython-2.3.2.1-Py22.exe">
<citetitle>wxWindows for Python bindings</citetitle></ulink>
</entry><entry>2.3.2</entry></row>
<row>
  <entry>mx extension libraries</entry>
  <entry><ulink url="http://www.egenix.com/files/python/egenix-mx-base-2.0.3.win32-py2.2.exe">
<citetitle>mx</citetitle></ulink>
</entry><entry>2.0.3</entry>
</row>
<row>
 <entry>PyGresQL -- Python libraries for SQL</entry>
 <entry><ulink url="http://prdownloads.sourceforge.net/pypgsql/pyPgSQL-2.0.win32-py2.2.exe"><citetitle>PyGresQL</citetitle></ulink></entry><entry>3.2</entry>
</row>
<row>
  <entry>CYGWIN UNIX emulator</entry>
  <entry><ulink url="http://www.cygwin.com/setup.exe">
<citetitle>cygwin.com</citetitle></ulink>
</entry>
<entry>2.1</entry>
</row>
<row>
  <entry>IPC for Cygwin</entry>
  <entry>
<ulink url="http://www.neuro.gatech.edu/users/cwilson/cygutils/V1.1/cygipc/cygipc-1.11-1.tar.bz2">
<citetitle>CygIPC </citetitle></ulink>(this is not an .EXE file. Save it to C:\CYGWIN)
</entry><entry>1.11</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para>
Download these packages. For cygwin, make sure you select
the package <application>PostgreSQL</application> in the Databases category. 
</para>

<sect2><title>Installing PostgreSQL</title>

<para>
Double-click on the Cygwin icon on your desktop. The UNIX command
prompt appears. Take a deep breath, and type:
<screen>
cd /
tar xvjf /cygipc-1.11-1.bz2
/usr/local/bin/ipc-daemon &
mkdir /usr/share/postgresql/data
/usr/bin/initdb -D /
/usr/bin/postmaster -D /usr/share/postgresql/data &
</screen>
Postgres should now be running. <emphasis>DO NOT</emphasis> close
the window containing these commands. 
</para>
<para>Every time to want to run PostgreSQL again, open up Cygwin as
before and type:
<screen>
/usr/local/bin/ipc-daemon &
/usr/bin/postmaster -D /usr/share/postgresql/data &
</screen>
</para>
<para>Once PostgreSQL is set up, go to the section on
setting up the database (<xref linkend="pgsql">.)</para>


<sect3><title>Running PostgreSQL as an NT service</title>

<para>On Windows NT, 2000 or XP it is possible to run
PostgreSQL as a background process (similar to a UNIX daemon).
</para>
<para>Go to Control Panel: "Users", and create a new user for your
system, called "postgres". Give the user privileges to run as a service.
<para>At the Cygwin prompt, type:
<screen>
ipc-daemon --install-as-service
</screen>
Then,as a single line:
<screen>
cygrunsrv --install postmaster --path /usr/bin/postmaster --args "-D
  /usr/share/postgresql/data -i" --dep ipc-daemon --termsig INT --user
  postgres --shutdown
</screen>
Then
<screen>
mkdir /usr/share/postgresql/data
chown postgres /usr/share/postgresql/data
</screen>
If this directory (/usr/share/postgresql/data) already exists from your previous
efforts, delete it with "rm -R /usr/share/postgresql/data", and repeat.
</para><para>
Reboot the computer.
Now log in as the "postgres" user, load Cygwin again and type:
<screen>
initdb -D /usr/share/postgresql/data
</screen>
The database will now run whenever Windows is loaded. 
You <emphasis>must</emphasis> be user "postgres" to use the database
on this computer. </para>
<para>Once PostgreSQL is set up, go to the section on
setting up the database (<xref linkend="pgsql">.)</para>

</sect3>
</sect2>

<sect2><title>Running the client</title>
<para>
Once you have done this, you can run GNUMed from the Python interpreter.
Click on the Python icon and type:
<screen>
<prompt>>>></prompt>  import sys
<prompt>>>></prompt>  sys.path.append ('path-to-gnumed-files')
<prompt>>>></prompt>  import gnumed
<prompt>>>></prompt>  gnumed.main ()
</screen></para>
</sect2>

</sect1>

<sect1 id="pgsql" xreflabel="SQL Setup">
<title>Setting up <application>PostgreSQL</application></title>
<para>Quoting Steven Duffy in the gnumed.org website</para>
<para>
Now that PostgreSQL is installed and working, the server scripts from the CVS repository can be executed. These scripts all end in .sql are intended to be executed from within psql. The one required script is gmconfiguration.sql. To set it up, do the following from the <filename>gnumed/gnumed/server/sql</filename>
directory:
</para>
<screen>
<prompt>#</prompt> createdb gnumed
<prompt>#</prompt> psql gnumed
<prompt>gnumed=&gt;</prompt> \i gmconfiguration.sql 
<prompt>gnumed=&gt;</prompt> \i gmidentity.sql
<prompt>gnumed=&gt;</prompt> \i gmgis.sql
</screen>
<para>
Then enter the <filename>country.specific</filename> directory, then the directory  for your country's code, and then install the <filename>.sql</filename>
file there too. <footnote><para>The only such directory at the moment is au, the only working databases is postcodes.au.sql</para></footnote></para>

<para>FIXME: presumably some shell script to create all the databases and
feed in the ER scripts?</para>
</sect1>

</chapter>


