<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY gfdl SYSTEM "gfdl.sgml"> 
]>
<book>
   <bookinfo>
     <date>26-2-2002</date>
     <title>GNUMed</title>
     <subtitle>User's Manual</subtitle>    
	<author>
		<firstname>Ian</firstname>
		<surname>Haywood</surname>
      </author>
	<author>	
      		<firstname>Gerardo</firstname>
		<surname>Arnaez</surname>
      
      </author>
	<author>	
   		<firstname>Hilmar</firstname>
		<surname>Berger</surname>
      
      </author>

<abstract>
	<para>      
      Copyright (c) 2001,2002 GNUMed developers</para>
      <para>
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no
      Front-Cover Texts, and with no Back-Cover Texts.</para>
      <para>
      A copy of the license is included in the section entitled "GNU
      Free Documentation License".</para>
   </abstract>

<revhistory>
      <revision>
	<revnumber>0.1.6</revnumber>
	<date>2004-02-11</date>
	<authorinitials>hb</authorinitials>
	<revremark>added Yudhvir's RedHat installation guide</revremark>
      </revision>
      <revision>
	<revnumber>0.1.5</revnumber>
	<date>2003-07-29</date>
	<authorinitials>gea, hb</authorinitials>
	<revremark>updates on login procedure, configuration etc.</revremark>
      </revision>
      <revision>
	<revnumber>0.1.4.2.1</revnumber>
	<date>2003-04-02</date>
	<authorinitials>gea</authorinitials>
	<revremark>added more config info, and started mandrake
	installation, but needs more work</revremark>
      </revision>

      <revision>
	<revnumber>0.1.4.2</revnumber>
	<date>2003-01-27</date>
	<authorinitials>hb</authorinitials>
	<revremark>added configuration information</revremark>
      </revision>

      <revision>
	<revnumber>0.1.4.1</revnumber>
	<date>2002-12-22</date>
	<authorinitials>gea</authorinitials>
	<revremark>a more helpful requirements for debian</revremark>
      </revision>

      <revision>
	<revnumber>0.1.4</revnumber>
	<date>2002-11-08</date>
	<authorinitials>hb</authorinitials>
	<revremark>updated a few more requirements</revremark>
      </revision>

      <revision>
	<revnumber>0.1.3</revnumber>
	<date>2002-08-09</date>
	<authorinitials>gea</authorinitials>
	<revremark>updated a few more requirements</revremark>
      </revision>

      <revision>
	<revnumber>0.1.2</revnumber>
	<date>2002-08-02</date>
	<authorinitials>gea</authorinitials>
	<revremark>Intro.sgml converted into installation.sgml since each section will be a different file. also moved things about to make it clear and addded more hints in getting things running</revremark>
      </revision>
	<revision>
		<revnumber>0.1.1</revnumber>
		<date>2002-08-01</date>
		<authorinitials>gea</authorinitials>
		<revremark>Took into.sgml and modified.  Adding a section of thigs noted while trying to get GnuMed up and running	
	</revremark>
	</revision>
</revhistory>


   </bookinfo>
   <toc></toc>

<preface id="preface">
	<title>Preface</title>
	<para>GnuMed never sleeps.</para>
</preface>

<part id="administration">
<title>Administration: Installation and Configuration</title>
<chapter id="intro">
     <title>Introduction</title>

    <para>GNUMed is  a comprehensive scalable software solution for paperless 
medical practice with emphasis on privacy protection, secure patient-centric 
record sharing, decision support and ease of use.
</para>
       <para>GNUMed is not yet ready for download as a package.
It will become available at 
<ulink url="http://gnumed.org/">
<citetitle>gnumed.org</citetitle></ulink>.
 
It is released under the GNU 
General Public Licence, see the file <filename>LICENCE</filename> for details.
</para>

  </chapter>
  <chapter id="installation">
    <title>Installation</title>

<sect1 id="linux">
	<title>Linux Installation</title>

	<sect2>
		<title>Distrubutions 'supported'</title>
		<para>GnuMed is known being actively developed on:</para>
		<para>
		<table frame=all>
			<title>"Supported" Distributions</title>
			<tgroup cols=4 align=left colsep=1 rowsep=1>
			<thead>
			<row>
				<entry>Distribution</entry>
				<entry>Version</entry>
				<entry>URL</entry>
		  		<entry>Functional?</entry>
			</row>
			</thead>
			
			<tbody>
			<row>
				<entry>Debian</entry>
				<entry>unstable</entry>
				<entry><ulink url="http://www.debian.org">www.debian.org</ulink></entry>
		  		<entry>Yes</entry>	
			</row>
		
		<row>
		  <entry>RedHat</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.redhat.com">www.redhat.com</ulink></entry>
		  <entry>yes</entry>
		</row>
			<row>
				<entry>Suse</entry>
				<entry>???</entry>
				<entry><ulink url="http://www.suse.com">www.suse.com</ulink></entry>
			</row>
			<row>
				<entry>Mandrake</entry>
				<entry>8.2 (2.4.18-6mdk kernel)</entry>
				<entry><ulink url="http://www.mandrake.com">www.mandrake.com</ulink></entry>
		  <entry>Yes</entry>
			</row>

			<row>
				<entry>Microsoft</entry>
				<entry>Win98</entry>
				<entry><ulink url="http://www.microsoft.com">www.microsoft.com</ulink></entry>
		  <entry>yes</entry>
			</row>

		<row>
		  <entry>Gentoo</entry>
		  <entry>N/A</entry>
		  <entry><ulink url="http://www.gentoo.org">www.gentoo.org</ulink></entry>
		  <entry>Gentoo ebuild coming soon.</entry>
		</row>

		<row>
		  <entry>Solaris</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.sun.com">www.sun.com</ulink></entry>
		  <entry>Sporadically</entry>
		</row>
<row>
		  <entry>BSD</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.sun.com">www.freebsd.org</ulink></entry>
		  <entry>Sporadically</entry>
		</row>

<row>
		  <entry>w-smith</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.e-smith.org">www.e-smith.org</ulink></entry>
		  <entry>server side only</entry>
		</row>
		<row>
		  <entry>Mac OS X</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.apple.com">www.apple.com</ulink></entry>
		  <entry>Unknown</entry>
		</row>

		
		<row>
		  <!-- one of (ENTRYTBL ENTRY) -->

		  <entry>WinME</entry>

		  <entry>???</entry>
		  
		  <entry><ulink url="http://www.microsoft.com">www.microsoft.com</ulink></entry>
		  
		  <entry>Does not work with authentication type "crypt" in pg_hba.conf. Must be "password"</entry>
		</row>
			</tbody>
			</tgroup>

		</table>
		</para>




	</sect2>

	
      <sect2>
	<title>Requirements</title>
      <para>GNUMed has run successfully on Linux. It requires a number of
packages to be installed before it can be run.</para>
      
<para>GNUMed requires the following packages:</para>

<para>
<table frame=all>
	<title>Requirements</title>
	<tgroup cols=3 align=left colsep=1 rowsep=1>
		<thead>
			<row>
				<entry>Package</entry>
				<entry>URL</entry>
				<entry>Version</entry>
			</row>
		</thead>

		<tbody>
		
			<row>
				<entry>Python Scripting Language</entry>
				<entry><ulink url="http://www.python.org/"><citetitle>python.org</citetitle></ulink></entry>
				<entry><filename>2.2</filename></entry>
			</row>

			<row>
				<entry>GTK libraries</entry>
				<entry><ulink url="http://www.gtk.org/"><citetitle>gtk.org</citetitle></ulink></entry>
		  <entry><filename>1.2</filename></entry>
			</row>

			<row>
				<entry>mx extension libraries</entry>
				<entry><ulink url="http://www.lemburg.com/files/python/eGenix-mx-Extensions.html"><citetitle>mx</citetitle></ulink></entry>
				<entry><filename>mx</filename></entry>
			</row>
			<row>
				<entry>PostgreSQL Database server</entry>
				<entry><ulink url="http://www.postgresql.org/"><citetitle>postgresql.org</citetitle></ulink>
					<footnote><para>
						Don't forget to include the Python interface libraries.
					</para></footnote>
				</entry>

				<entry>7.2</entry>
			</row>

			<row>
				<entry>wxWindows windowing library</entry>
				<entry>
                <ulink url="http://www.wxwindows.org/dl_gtk.htm#dev"><citetitle>wxwindows web site</citetitle></ulink>
                </entry>
				<entry>2.4</entry>
			</row>
			<row>
				<entry>wxPython</entry>
				<entry>
    			<ulink url="http://www.wxpython.org/download.php#binaries"><citetitle>wxpython.org</citetitle></ulink>
				</entry>
		  		<entry>2.4</entry>
			</row>

		<row>
	
		  <!-- one of (ENTRYTBL ENTRY) -->
		  
		  <entry>PyPgSQL</entry>
	  
		  <entry><ulink url="http://pypgsql.sourceforge.net/">www.pypgsql.sourceforge.net</ulink></entry>
		  
		  <entry>2.3</entry>
		</row>
		</tbody>
	</tgroup>
</table>

	  </para>

<para>This list looks daunting, but Python and GTK libraries are
almost invariably installed, and PostgreSQL, if not installed, will be
on your Linux CDs somewhere.</para>
<para>Note that the packages should be installed in the listed order, as 
some depend upon others. Also, if using RPM, you must install the libraries 
(postgresql-lib), then the main package (postgresql), then the others, 
including postgresql-python.
</para>

<para>
On some distros, some of the Python libraries get installed in funny places.
So Python can find them, add this line to your <filename>.profile</filename>:

<screen>
export PYTHONPATH=/usr/lib/python1.5/site-packages:/usr/local/lib/python2.1/site-packages
</screen>
</para>

<para>
NOTE: on some the later distros (Mandrake is where I have seen this), wxGTK does not install 
as it requires a version of libpng older than what's installed. This old library is vanishing off 
the web. Here is a  
<ulink url="http://mail.student.unimelb.edu.au/~ihaywood/libpng-1.0.8-1.i386.rpm"> 
<citetitle>mirror</citetitle></ulink></para> 


      </sect2>


      <sect2>
	<title>Postgresql</title>

	<sect3>
	<title>Configuring PostgreSQL (quoting Steven Duffy)</title>
		<para> Usually PostgresSQL should be started automatically at bootup. Most modern
        distributions configure PostgresSQL correctly to do so. If you installed the package
        from sources, some steps may be required to get the <application>PostgreSQL</application>
        database system running.</para>
        <para>First, make sure you have the PostgreSQL server daemon running. Just enter
        the following lines on the command line:</para>
        <screen>
$ ps ax | grep "postmaster"

 this should print something like 

 212  ?  S    0:00 /usr/local/pgsql/bin/postmaster -i -o -F -D/usr/local/pgsql/...
		</screen>
		<para> You might as well check under <filename>/etc/rc.d/</filename>, or
         run <application>Linuxconf</application> or whatever your distribution offers.</para>
		<para>
         If <application>postmaster</application> isn't running you can set it up 
         with these commands as root:
		<screen>
su - postgres
initdb -D ~postgres/data
postmaster [-i] -D ~postgres/data >logfile 2>&1 &
		</screen></para>

		<para>
		You should enable TCP/IP access to the database. In order to do this you can either 
        add the '-i' option when starting <application>postmaster</application> (see above and below) or do the following:
        </para>
		<procedure>
		<step><para>find and open <filename>/etc/postgresql/postgresql.conf</filename></para></step>
		<step><para>change <command>tcpip_socket = false</command> to <command>tcpip_socket = on</command></para></step>
		<step><para>save changes and restart <application>PostgreSQL</application></para></step>
		</procedure>
        <para>If you'd rather like to add the '-i' option and don't know where 
        <application>postmaster</application> is started:</para>
		<para>
		If your distribution uses as <application>postgresql</application> 
		script to start the server, it is likely the <command>pg_ctl</command> 
		is used to run postmaster. In this case, find where
		<command>pg_ctl</command> 
		is executed and add<command> insert -o \&quot;-i\&quot;</command> as one of
		the options to pg_ctl. Otherwise, find the script from which postmaster is 
		executed and simply add <command>-i</command> as an argument.
		</para>

		<para>Once PostgreSQL is set up, go to the section on
		setting up the database (<xref linkend="pgsql">.)</para>
		</sect3>
      </sect2>
    </sect1>


<sect1 id="mac"><title>Mac - GnuMED on MacOSX 10.2</title>
	<sect2>
    	<title>System</title>
		<para>
        Install the Developer's applications from the Developer's CD that comes 
        with MacOSX10.2
        Make sure you have installed security update 2002-08-23 as well as 
        MaxOSX 10.2
		</para>
	</sect2>
    <sect2>
    	<title>Installing Python and wxWindows</title>
        <para>
        Download the latest versions of MachoPython and wxPythonOSX from 
        	<ulink url="http://sourceforge.net/project/showfiles.php?group_id=10718"><citetitle>Sourceforge</citetitle></ulink>
        </para><para>
        The versions at time of writing (8 Sept 2002) were 
        MachoPython-2.2.1-4.dmg and wxPythonOSX-2.3.3pre6.dmg respectively.
        </para><para>

        These files are disk images. Open and  install them by doubleclicking 
        the MachoPython.pkg package and then wxPythonOSX.pkg
        </para>
    </sect2>

    <sect2>
    	<title>Install mx extensions</title>
        <para>
        Download the mx extensions from 
        <ulink url="http://www.egenix.com/files/python/egenix-mx-base-2.0.3.tar.gz"><citetitle>Egenix</citetitle></ulink>        
        (The latest version can be found at 
		<ulink url="http://www.lemburg.com/files/python/eGenix-mx-Extensions.html"><citetitle>this site</citetitle></ulink>.)
        </para><para>
		The .tar.gz file will be uncompressed as egenix-mx-base-2.0.3
        </para><para>
        Open the terminal application and CD to the directory 
        egenix-mx-base-2.0.3
        type:
		</para>
<screen>
su root
password
python setup.py install
exit
</screen>
    </sect2>

    <sect2>
    	<title>Installing postgresql</title>
        <para>
        Good instructions for installing Postgresql from binary on MaxOSX 10.2 
        are available at
		<ulink url="http://www.entropy.ch/software/MacOSx/postgresql/"><citetitle>this page</citetitle></ulink>
        </para><para>
        Also install the StartUp Item script (available on the same web page) 
        so that postgresql is loaded at system startup.
        </para><para>
        To include /usr/local/bin in the command path, enter this command
        <screen>
        echo 'setenv PATH /usr/local/bin:$PATH' >> ~/.tcshrc
        </screen>
        </para>
    </sect2>

    <sect2>
    	<title>Installing pypgsql</title>

        <para>
        Download the source code from 
        http://sourceforge.net/project/showfiles.php?group_id=16528
        </para><para>
        You may need to se a text editor to edit the file setup.py in the 
        untarred folder pypgsql
        so that the lines starting include_dirs and library_dirs look like this 
        </para>
        <screen>
        include_dirs  = [ "/usr/local/pgsql/include" ]
        library_dirs  = [ "/usr/local/pgsql/lib" ]
        </screen>
        <para>
        In the terminal, go to the pypgsql directory and type
		<screen>
        python setup.py build
        </screen>
        </para><para>
        If you have build errors, download the setup.py file from
		<ulink url="http://www.gnumed.org/directory/documents/144/setup.py"><citetitle>the Gnumed Homepage</citetitle></ulink>,
        move it to the pypgsql directory, and repeat the command.
        </para><para>
        Wait for the build to finish and then type
		<screen>
        sudo python setup.py install
        </screen>
        (Enter your root password when prompted)
        </para><para>
        To test the install, type
        <screen>
        python test/PgSQLTestCases.py
        </screen>
        </para>
    </sect2>

    <sect2>
    	<title>Download gnumed cvs</title>
        <para>
		Open a new terminal window, and type
        </para>
		<screen>
export CVS_RSH="ssh"
cvs -z3 -d:ext:anoncvs@subversions.gnu.org:/cvsroot/gnumed checkout gnumed
		</screen>
        <para>
		All the gnumed files will be downloaded to your hard drive.
        </para>
	</sect2>

	<sect2>
        <title>Configuring postgres for Gnumed</title>
		<para>
        See (<xref linkend="pgsql">).
		</para>
</sect2>
</sect1>

<sect1 id="mac-panther">
<title>Installing GNUMed on Mac OSX 10.3 (Panther)</title>
<para>
There are a number of changes in MacOSX between Jaguar and Panther that 
necessitate some changes to the installation procedure.
</para>
<orderedlist>
<listitem><para>
<emphasis>Mac Developer Tools (Xtools)</emphasis>
</para>
<para>Install the Developer tools which are on the disc called XTools.
The default Easy Install is satisfactory.
</para></listitem>
<listitem><para>
<emphasis>wxPython</emphasis></para>
<para>
The correct version of Python is included with Panther. However, you 
need to install wxPython, which is a package that enables applications 
written in Python to use the native GUI (In MacOSX case, that is called 
aqua).
</para><para>
Download and install the latest version of the wxPython installer for 
Panther from <ulink url="http://wxpython.sourceforge.net/download.php#binaries"><citetitle>SourceForge</citetitle></ulink>
To test your installation, run the application 'RunDemo' in 
<application>Applications&gt;wxPythonOSX-2.4.2.4-panther</application>
</para></listitem>
<listitem><para>
<emphasis>Install postgresql</emphasis>, which is the database used by gnumed.</para>
<para>A binary package and instructions for the Panther version are available 
from <ulink url="http://www.entropy.ch/software/MacOSx/postgresql/"><citetitle>here</citetitle></ulink>
</para><para>      
Take note of the command required to start postgres - <screen>
/usr/local/bin/pg_ctl -D /usr/local/pgsql/data -l postgres.log 
start
</screen></para>
<para>
If you want postgres to start at system startup, download the startup 
application from the same page.
</para></listitem>
<listitem><para>

<emphasis>Setting the Command Path</emphasis></para>
<para>
'/usr/local/bin' needs to be included in the command PATH, if not 
already included.</para><para>
In a terminal window, type</para><para>
<screen>
echo $PATH
</screen></para><para>
the result will be a list of directories seperated by colons, like this
</para><para><screen>
/bin:/sbin:/usr/bin:/usr/local/bin
</screen></para><para>
if '/usr/local/bin' is one of the directories, you can skip this 
section.
otherwise type</para><para><screen>
echo "export PATH=$PATH:/usr/local/bin" >> ~/.bash_profile
</screen></para><para>
</para></listitem>
<listitem><para>

<emphasis> Python add-ons (new) (egenix and pyPgSQL)</emphasis></para>
<para>
The egenix extensions (Date/Time) and pypgsql (which allows python to 
interface with postgresql) can be downloaded using the mac python 
add-ons pack which you should download from <ulink url="http://homepages.cwi.nl/~jack/macpython/download.html"><citetitle>here</citetitle></ulink>
</para><para>        
Install the package, then open the Package Manager 
(Applications>MacPython-2.3>Package Manager)
In the File menu, select Open URL and type </para><para>
http://undefined.org/python/pimp/darwin-7.2.0-Power_Macintosh.plist</para>
<para>Select the file <application>egenix-mxbase</application> and click install, 
<application>pyPgSQL</application> and click install
</para></listitem>
<listitem><para>

<emphasis>Download gnumed</emphasis></para>
<para>The gnumed files are downloaded from cvs.</para><para>
Open a new terminal window and type</para><para><screen>
     export CVS_RSH=ssh
     export CVSROOT=:ext:anoncvs@savannah.gnu.org:/cvsroot/gnumed
     cd &lt;some directory where you want the gnumed cvs checkout to go&gt;
     cvs -z3 co gnumed OR cvs -z3 checkout gnumed (z3 is for compression)
</screen></para><para>
The gnumed cvs files will all be downlaoded to your computer.
Repeat these commands to update these files at a later date.
</para><para>
Test setup so far: </para><para><screen>
pythonw ~/gnumed/gnumed/client/wxpython/gnumed.py
</screen></para><para>
If all is well, the gnumed log in window will be displayed.
You will not be able to log in as the gnumed postgres tables are not 
yet set up.
</para></listitem>
<listitem><para>
<emphasis>Install gnumed SQL tables</emphasis>
</para><para>
Go to the directory /server/bootstrap
</para><para>
<screen>
     cd ~/gnumed/gnumed/server/bootstrap/
</screen></para><para>
Run the shell program redo-public.sh
</para><para><screen>
  	./redo-public.sh
</screen></para><para>
Answer yes to all the questions and enter the passwords as requested.
The postgres password is the one you used when setting up postgres in 
section 3.
</para><para>
The gm-dbo password, if not already set, will be remembered when 
you first enter it (so don't forget).
</para></listitem>

<listitem><para>
<emphasis>Run Gnumed</emphasis>
</para><para><screen>
pythonw ~/gnumed/gnumed/client/wxpython/gnumed.py
</screen></para><para>
(Note - use pythonw rather than python for applications that use the 
wxWindows gui)
</para><para>
The log in screen opens.</para><para>
Click Options, and select from the pop-ups
</para><para><screen>
database - gnumed
host - localhost
port - 5432
OK
</screen></para><para>
Log in to gnumed using username test-doc, password test-doc
</para><para>
All being well, a window opens tracking the modules as they are loaded, 
and then a clinical screen.
</para><para>
Don't get too excited - wxPython on MacOSX  is slooooow, and somewhat 
unstable, and there is nothing much to do in gnumed ...... yet.
</para>
</listitem>
</orderedlist>
</sect1>


<sect1 id=redhat><title>RedHat (8.0)</title>
<para>Author: Yudhvir Singh Sidhu, <ULINK URL="mailto:Yudhvir@hawaii.edu">Yudhvir@hawaii.edu</ULINK> 
</PARA>
<PARA>Date Created: 4 Nov 03, modified 06 Nov 03 by Yudhvir</PARA>
<para>What I did :Moved pypgSQL to client side and added stuff on how to drop a database.
</para>
<PARA>Disclaimer: No guarantees if these instructions will work or cause any damage.
</PARA>
<para>Refinement is needed, so please send me your suggestions. I'll make changes and send it to the listserv. Since I do not have any other Linux flavor, I am limited to RedHat. 
</PARA>
	<sect2><title>Introduction</title>
 		<sect3>
		<title>General</title>
		<para>
		I divided gnumed installation in two parts: client-only and client + server. The division is important because the client install is relatively easier and you can use it to connect to a remote database and play with the screens. As you can tell, the database part is being called the server. Both installs require cvs download of the module "gnumed."
		</para>
		</sect3>
	</sect2>

<sect2 >

<title>Preparation</title>

<sect3><title>Notes</title>
<para>

Download these files. If you have the RH 8.0 set of 5 cds, many of these files are on cds under the RPM directory. Get them together first, the order in which they are installed is important. I'll list that later.

<emphasis>NOTE: RedHat's GUI rpm "Package" GUI utility works and is simpler to use than the command line because it figures out dependencies and installs them also. However, it sometimes hangs. Maybe "hangs" is not the right description, it hides so you don't see it on your screen and won't let you install the rpm package. You have to logout and log back in or kill the process.

NOTE: It is important that you get the right versions of all these rpms that match your RedHat release. gnumed.org's cvs download directories show which versions belong to which RedHat release.</emphasis>

</para>
</sect3>
<sect3>

<title>Prepare for Client</title>

<para>
<orderedlist>
<listitem><para>
Python Scripting Language from python.org, version 2.2. I used version 2.2.1 installed via the Red Hat "Packages" GUI under "System Settings." The GUI prompts you to put in the right cd, so you don't have to know which one the software is on. gnumed.org reminds us to "Don't forget to include the Python interface libraries." I have no idea what rpm these files are in or what their names are, but apparently they are loaded as part of the python package by the GUI install of python.
</para></listitem><listitem><para>
GTK libraries from gtk.org, version 1.2, If you have a Gnome windows manager, you probably have these libraries installed. Please keep in mind that KDE uses QT instead of GTK. So, if you have a KDE-only setup, you will have to install these from the rpms on cd or the net. My RedHat setup includes both KDE and GNOME - so I did not have to install these.
</para></listitem><listitem><para>
mx extension libraries from mx, no version given from lemburg.com/files/python/eGenix-mx-Extensions.html . I used egenix-mx-base-2.0.5-py2.2_1.i386.rpm. RedHat 8.0 cd contains the mx-2.0.3-6.i386.rpm.
</para></listitem><listitem><para>
wxWindows windowing library from wxwindows web site, version 2.4. I used wxGTK-static-2.4.2-1.i386.rpm
</para></listitem><listitem><para>
wxPython from wxpython.org, version 2.4. I used wxPythonGTK-py2.2-2.4.2.4-1.i386.rpm
</para></listitem>
</orderedlist>
</para>
</sect3>

<sect3>
<title>Prepare for Server</title>

<para>
<orderedlist>
<listitem><para>
The libraries: I used postgresql-libs-7.2.2-1.i386.rpm from the RH 8.0 install cds
</para></listitem><listitem><para>
The database: I used postgresql-7.2.2-1.i386.rpm from the RH 8.0 install cds
</para></listitem><listitem><para>
The server: PostgreSQL Database server from postgresql.org, version 7.2. I used postgresql-server-7.2.2-1.i386.rpm from the RH 8.0 install cds
</para></listitem><listitem><para>
PyPgSQL from www.pypgsql.sourceforge.net, version 2.3. I used pyPgSQL-2.3-1.rh80.i386.rpm
</para></listitem>
</orderedlist>
</para>

</sect3>


<sect3>
<title>Create gnudb User Account</title>
<para>
Log in as root and create the user account.
</para>
</sect3>

<sect3 >
<title>Get gnumed via CVS</title>
<para>
You need not know anything about cvs, just run these commands as user gnumed:
<screen>
mkdir gnumed 
export CVS_RSH="ssh"
cvs -d :ext:anoncvs@savannah.gnu.org:/cvsroot/root
</screen>
<emphasis>NOTE: you really do not need to create this directory. I did and all my examples follow that path.</emphasis>
<emphasis>NOTE: There is no password. Hit enter when it asks you for it.</emphasis>

This takes some time and brings down all the software and puts it into a directory called gnumed. You will end up with two or three gnumed directories. One created for the user account, the second that you created in 3a above, and cvs creates the third.
</para>
</sect3>
</sect2>

<sect2>
<title>Installation</title>

<sect3>
<title>General</title>
<para>
If you are doing a clinet+server install the software should be loaded in the following order. <emphasis>That is the order I followed successfully.</emphasis>
<orderedlist>
<listitem><para>
python - I assume the libraries are loaded at the same time.
</para></listitem><listitem><para>
GTK libraries
</para></listitem><listitem><para>
mx extension libraries
</para></listitem><listitem><para>
PostgreSQL Database server - load the libs first, then the database and lastly the server:
	<orderedlist>
	<listitem><para>postgressql-libs
	</para></listitem><listitem><para>
	postgresql database
	</para></listitem><listitem><para>
	postgresql server
	</para></listitem></orderedlist>
</para></listitem>
<listitem><para>
wxWindows windowing library
</para></listitem><listitem><para>
wxPython
</para></listitem><listitem><para>
PyPgSQL
</para></listitem>
</orderedlist>
However, if all that you are doing is a client install, I think you can get away with going with the following:
</para>
</sect3>

<sect3>
<title>Install Client</title>
<para>
Install the rpms in this order:
<orderedlist>
<listitem><para>
Python and the libraries [This should already be installed. If not, use the RH package manager GUI.]
</para></listitem><listitem><para>
GTK libraries [This should already be installed. If not, use the RH package manager GUI.]
</para></listitem><listitem><para>
mx
</para></listitem><listitem><para>
wxWindows windowing library
</para></listitem><listitem><para>
wxPython
</para></listitem><listitem><para>
pyPgSQL
</para></listitem>
</orderedlist>
</para>
</sect3>

<sect3>
<title>Install Server</title>
<para>
Most people would not install just the server and <emphasis>I did not do that.</emphasis> I am guessing that if you wanted to do that, you would only load:
<orderedlist>
<listitem><para>
postgressql-libs
</para></listitem><listitem><para>
postgresql database
</para></listitem><listitem><para>
postgresql server
</para></listitem><listitem><para>
pyPgSQL <emphasis>I HAVE BEEN TOLD: This is Needed on the client, mainly. Only needed on the server machine if one is doing the bootstrapping on that machine. </emphasis>
</para></listitem><listitem><para>
Then, obviously you would need to create the gnumed database and the bootstrap directory has the scripts. I ran the monolithica one I call mono when doing a complete install.
</para></listitem></orderedlist>
</para>
</sect3>
</sect2>

<sect2>
<title>Configure Files and Setup Environment Parameters</title>

<sect3>
<title>PYTHONPATH and GNUMED_DIR</title>
<para>
<emphasis>I HAVE BEEN TOLD: GnuMed should run without GNUMED_DIR in most circumstances. One only needs to set it if GnuMed absolutely cannot find its files.</emphasis> [I needed to set it on my RH 8.0 system.]
<orderedlist>
<listitem><para>as root: find / -name site-packages
</para></listitem><listitem><para>
Copy that full path down
</para></listitem><listitem><para>
As user gnumed: vi ~/.bashrc - I am assuming you are running the bash script. It is okay if this file does not exist, vi will create it. Put that directory name in using the export command as below. My lines are:
<screen>
export PYTHONPATH=/usr/lib/python2.2/site-packages

export GNUMED_DIR=/home/gnumed/gnumed/gnumed/client
</screen>
</para></listitem><listitem><para>
source ~/.bashrc [this will make that an environment variable. You can check it by typing env|grep PYTHONPATH]
</para></listitem></orderedlist>
</para>

</sect3>

<sect3>

<title>pg_clog, postgres.conf and PGDATA</title>

<para>

<emphasis>[NOTE: you can skip this part for a client-only install]</emphasis>
<orderedlist>
<listitem><para>
su - postgres - This should put you in the postgres home directory
</para></listitem><listitem><para>
cd data - the actual path on my machine is: /var/lib/pgsql/data
</para></listitem><listitem><para>
vi pg_hba.conf - uncomment the "local all" and the "host all" lines towards the bottom of the file.
</para></listitem><listitem><para>
vi postgresql.conf and uncomment tcpip_socket line and edit it to read:
<screen>
tcip_socket = on
</screen>
</para></listitem><listitem><para>
uncomment the line: port = 5432
</para></listitem><listitem><para>
exit out of user postgres and come back to user gnumed
</para></listitem><listitem><para>
vi ~/.bashrc and add this line: 
<screen>export PGDATA=/var/lib/pgsql/data</screen>
</para></listitem>
</orderedlist>
</para>
</sect3>

<sect3>
<title>Shortcut Scripts mono and check_log, set password and Configure Files
</title>

<para>

<emphasis>[NOTE: you can skip this part for a client-only install]</emphasis>
<orderedlist>
<listitem><para>
as user gnumed, cd to the server/bootstrap directory.

Mine is cd /home/gnumed/gnumed/gnumed/server/bootstrap
</para></listitem><listitem><para>
vi mono and put this line in it:
<screen>
python bootstrap_gm_db_system.py --conf-file=bootstrap-monolithic_core.conf
</screen>
</para></listitem><listitem><para>
exit and type: chmod 744 mono

</para></listitem><listitem><para>
vi check_log and put this line in it:
<screen>
tail -100 /home/gnumed/.bootstrap_gm_db_system/bootstrap_gm_db_system.log
</screen>
<emphasis>NOTE: If your logfile is somewhere else, su - root and do a find / -name "*log*"</emphasis>

</para></listitem><listitem><para>
exit and type: <screen>chmod 744 check_log</screen>

</para></listitem><listitem><para>
as user gnumed and in the bootstrap directory, run ./make-links.sh

<emphasis>I HAVE BEEN TOLD: This is not needed anymore in normal circumstances.</emphasis>

</para></listitem><listitem><para>
su to root and type passwd postgres and set the password. This sets a password for the system user 'postgres' which is different from the database user 'postgres' <emphasis>I HAVE BEEN TOLD: This is not needed. </emphasis> [I chose to create a password because I can su into postgres from any user. I do not have to jump to root to get into postgres.]

</para></listitem><listitem><para>
in the bootstrap directory vi bootstrap-monolithic_core.conf and uncomment BOTH password lines for gm-dbo and postgres and type in the passwords. Select a password for gm-dbo. I selected the same one I use for the gnumed user account. <emphasis>I HAVE BEEN TOLD: Many setups use the same name for both thesystem level user account "postgres" under which the

postgresql data files are installed in the filesystem and for the database superuser. Those accounts are actually unrelated entities. They need not have the same password. In fact, the system account postgres need not have a password at all. It is sufficient to be able to su - to it from root. It helps to

have a password for the DB account "postgres", though. </emphasis>
</para></listitem>
</orderedlist>
</para>
</sect3>
</sect2>

<sect2 >
<title>Run Client</title>
<para>
<orderedlist>
<listitem><para>
as user gnumed, cd to the ....client/wxpython directory.

Mine is cd /home/gnumed/gnumed/gnumed/client/wxpython
</para></listitem><listitem><para>
./gnumed.sh - this should bring up a login GUI. If the GUI comes up, you have successfully installed the client.

</para></listitem><listitem><para>
Write an e mail to "Karsten" and request a hostname, a username, and a password and input them into the GUI. Under the "options" button, select "gnumed" and put in the hostname and leave the port as 5432. In the main GUI, input username and pasword.

<emphasis>NOTE: If Karsten gives you "anydoc" as the username and password, he actually means any-doc for both fields. Also NOTE: You should be logged onto the net when you do this, I was user gnumed when I did it.</emphasis>

</para></listitem><listitem><para>
If the GUI does not come up:
	<itemizedlist>
	<listitem><para>
	lookup the logfile - mine is created at: /home/gnumed/.gnumed/gnumed.log

	</para></listitem><listitem><para>
	gnumed.sh tells you where it is creating one

	</para></listitem><listitem><para>
	input the error into google and see what comes up
	</para></listitem>
	</itemizedlist></para>
</listitem><listitem><para>
If your error lists files "gmCLI" and "gmLog" - the error actually means files "gmCLI.py" and "gmLog.py" These files are on your system.

</para></listitem><listitem><para>
This error means that your GNUMED_DIR environment variable is not set to ".....client" directory. Do an env| grep GNUMED_DIR or do an echo $GNUMED_DIR to see if it is set correctly. See section above.
</para></listitem>
</orderedlist>
</para>
</sect2>

<sect2>
<title>Run Server</title>

<para>
<orderedlist>
<listitem><para>
log out of the gnumed account and log back in for all the environment variables to take affect
</para></listitem><listitem><para>
su - postgres and type pg_ctl restart
</para></listitem><listitem><para>
exit out of user postgres and back into user gnumed
</para></listitem><listitem><para>
in the bootstrap directory, type ./mono
</para></listitem><listitem><para>
A loooooooong list will start scrolling by - <emphasis>leave it alone.</emphasis> It will list errors, many of them. Let it run. It should give you a satisfying message: "Done bootstrapping: We probably succeeded."

<emphasis>I HAVE BEEN TOLD: We now log this list. It doesn't scroll by anymore.</emphasis>

</para></listitem><listitem><para>
su - postgres and do pg_ctl restart - just for good measure.
</para></listitem><listitem><para>
Click on the redhat logo and bring up the services GUI - it is under Server Settings. Check the postgres box for the service to load upon bootup.
</para></listitem><listitem><para>
Now you can start your client - see 6b above. Except you will not be connecting to a remote server. Your database is gnumed and your host is localhost. Use the gnumed password and the application should come up.
</para></listitem><listitem><para>
If you stopped the mono process the first time, which creates the database, with a control-c like I did thinking the long scrolling list is not what I should be seeing: ====> you have to drop the half-created database and re-run mono again. Otherwise mono will not run all the way and you do not have a functioning server.

Since I have "webmin" running, I used that to drop the database gnumed. Otherwise, on the command line as any user you could:
<screen>
dropdb -U postgres gnumed
</screen>
</para></listitem><listitem><para>
There are other instructions in the gnumed.org installation writeup about how to create a real life instance. I have not reached that far - so I cannot say anything about it.
</para></listitem>
</orderedlist>
</para>
</sect2>
</sect1>

<sect1 id="win9x"><title>Windows</title>

   <para>GNUMed requires the following packages. Each link points to a .EXE file. Download them and run each in turn.

<table frame=all><title>Requirements</title>
<tgroup cols=3 align=left colsep=1 rowsep=1>
<thead>
<row>
  <entry>Package</entry>
  <entry>URL</entry>
<entry>Version</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Python Scripting Language</entry>
  <entry><ulink url="ftp://ftp.python.org/pub/python/2.2.1/Python-2.2.1c2.exe">
<citetitle>python.org</citetitle></ulink>
</entry>
<entry>2.1</entry>
</row>
<row>
  <entry>wxWindows windowing library</entry>
   <entry>
<ulink url="http://prdownloads.sourceforge.net/wxpython/wxPython-2.3.2.1-Py22.exe">
<citetitle>wxWindows for Python bindings</citetitle></ulink>
</entry><entry>2.3.2</entry></row>
<row>
  <entry>mx extension libraries</entry>
  <entry><ulink url="http://www.egenix.com/files/python/egenix-mx-base-2.0.3.win32-py2.2.exe">
<citetitle>mx</citetitle></ulink>
</entry><entry>2.0.3</entry>
</row>
<row>
 <entry>PyGresQL -- Python libraries for SQL</entry>
 <entry><ulink url="http://prdownloads.sourceforge.net/pypgsql/pyPgSQL-2.0.win32-py2.2.exe"><citetitle>PyGresQL</citetitle></ulink></entry><entry>2.2</entry>
</row>
<row>
  <entry>CYGWIN UNIX emulator</entry>
  <entry><ulink url="http://www.cygwin.com/setup.exe">
<citetitle>cygwin.com</citetitle></ulink>
</entry>
<entry>2.1</entry>
</row>
<row>
  <entry>IPC for Cygwin</entry>
  <entry>
<ulink url="http://www.neuro.gatech.edu/users/cwilson/cygutils/V1.1/cygipc/cygipc-1.11-1.tar.bz2">
<citetitle>CygIPC </citetitle></ulink>(this is not an .EXE file. Save it to C:\CYGWIN)
</entry><entry>1.11</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para>
Download these packages. For cygwin, make sure you select
the package <application>PostgreSQL</application> in the Databases category. 
</para>

<sect2><title>Installing PostgreSQL</title>

<para>
Double-click on the Cygwin icon on your desktop. The UNIX command
prompt appears. Take a deep breath, and type:
<screen>
cd /
tar xvjf /cygipc-1.11-1.bz2
/usr/local/bin/ipc-daemon &
mkdir /usr/share/postgresql/data
/usr/bin/initdb -D /
/usr/bin/postmaster -D /usr/share/postgresql/data &
</screen>
Postgres should now be running. <emphasis>DO NOT</emphasis> close
the window containing these commands. 
</para>
<para>Every time to want to run PostgreSQL again, open up Cygwin as
before and type:
<screen>
/usr/local/bin/ipc-daemon &
/usr/bin/postmaster -D /usr/share/postgresql/data &
</screen>
</para>
<para>Once PostgreSQL is set up, go to the section on
setting up the database (<xref linkend="pgsql">.)</para>


<sect3><title>Running PostgreSQL as an NT service</title>

<para>On Windows NT, 2000 or XP it is possible to run
PostgreSQL as a background process (similar to a UNIX daemon).
</para>
<para>Go to Control Panel: "Users", and create a new user for your
system, called "postgres". Give the user privileges to run as a service.
	  </para>
<para>At the Cygwin prompt, type:
<screen>
ipc-daemon --install-as-service
</screen>
Then,as a single line:
<screen>
cygrunsrv --install postmaster --path /usr/bin/postmaster --args "-D
  /usr/share/postgresql/data -i" --dep ipc-daemon --termsig INT --user
  postgres --shutdown
</screen>
Then
<screen>
mkdir /usr/share/postgresql/data
chown postgres /usr/share/postgresql/data
</screen>
If this directory (/usr/share/postgresql/data) already exists from your previous
efforts, delete it with "rm -R /usr/share/postgresql/data", and repeat.
</para><para>
Reboot the computer.
Now log in as the "postgres" user, load Cygwin again and type:
<screen>
initdb -D /usr/share/postgresql/data
</screen>
The database will now run whenever Windows is loaded. 
You <emphasis>must</emphasis> be user "postgres" to use the database
on this computer. </para>
<para>Once PostgreSQL is set up, go to the section on
setting up the database (<xref linkend="pgsql">.)</para>

</sect3>
</sect2>

</sect1>
</chapter>

<chapter id="configuration">
     <title>Configuration</title>

      <sect1 id="confignotes">
	<title>Language configuration</title>
	<para>
Upon startup the client autoconfigures the language used
in the database.
	</para>
	<para>
The following things influence its decision:
	  <itemizedlist>
	    <listitem>
	      <para>
The language is taken from the system locale in the environment
variables checked for the GUI language by gmI18N.py.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
If there's no i18n_curr_lang table in the database the client
assumes that no translations are wanted and tries to work
without it. Same if other errors prevent normal operations - a
warning is logged and things continue.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
	      If the language given in the database doesn't match the system
	      locale the user is asked whether to update the database setting
	      to that. </para>
	      <para>
	      If the user chooses "No" when asked whether the database locale
	      should be changed to match the system locale this decision will
	      be remembered in the config file (usually ~/.gnumed/gnumed.conf)
	      until either the system locale is changed or the option
	      removed from the config file. This option can also be edited
	      from within GnuMed courtesy of the ConfigRegistry plugin.	
	      </para>
	      <para>
	      One can influence the system locale setting in
	      per-instance wrapper scripts if so desired.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
The database language setting is only updated if translations
are actually available for the target language. Two levels of
truncation of the system locale are used to find matching
		translations:
		<itemizedlist>
		  <listitem>
		    <para>
1) full locale: 'de_DE@euro'
		    </para>
		  </listitem>
		  <listitem>
		    <para>
2) no dialect:  'de_DE'
		    </para>
		  </listitem>
		  <listitem>
		    <para>
3) no country:  'de'
		    </para>
		  </listitem>
		</itemizedlist></para>
	    </listitem>
	  </itemizedlist></para>
	<para>
This allows for a missing Austrian translation to fall back to
	  a general German (de_AT -> de) one, for example.
	</para>
      </sect1>
 

<sect1 id="user-structure" xreflabel="DB user structure">
<title>GnuMed database user structure</title>
	<para>
    PostgreSQL does not support read-write versus read-only connections.
    To protect us from unwanted writes we emulate this separation by
    setting up two accounts per user. The normal account name "user" is
    used for read-only connections. This is ensured by only granting
    SELECT rights to those accounts. The read-write account name is
    formed by prepending a "_" to the normal account such that "user"
    has a companian account named "_user". Those accounts are granted
    appropriate INSERT, DELETE and UPDATE rights in the database.
	</para>
	<para>
    As it is very tedious to grant rights to each and every single
    account the concept of user groups is used. A group "group" is
    actually granted SELECT rights only, while "_group" receives
    INSERT, UPDATE, and DELETE rights on database objects. Users
    are simply added to those groups, name "user" to group "group" and
    "_user" to group "_group" thereby acquiring the respective database
    rights.
	</para>
	<para>
    Default groups that always exist in a properly configured GnuMed
    database are:
	</para>
	<para>
    <screen>
    gm-doctors              _gm-doctors
    gm-staff_medical        _gm-staff_medical
    gm-staff_office         _gm-staff_office
    gm-trainees_medical
    gm-trainees_office
    gm-public
    </screen>
	</para>
	<para>
    Notice how there are no write rights for trainees and the public.
	</para>
	<para>
    gmPG will return read-only connections by default. If a read-write
    connection is requested  by means of setting read_only = 0 a new
    connection to the service is instantiated for the user "_CURRENT_USER".
    Read-only connections are cached and shared, read-write ones are not.
	</para>
</sect1>

<sect1 id="plugin-conf" xreflabel="Plugin configuration">
<title>Plugin Configuration</title>
	<para>
	The plugin configuration is now implemented as follows:
	</para>
	<para>		
    IMHO this is GnuMed configuration information. Actually it
    should live in an Administrators Guide as discussed recently
    on the list but for now we can share admin and user staff
    in the User Manual since we don't have much user level
    information yet...
	</para>
	<para>
	Upon startup GnuMed tries to read a list of which plugins to
	load. It looks in several places:
	</para>
    <para>
    <screen>
1) in the database (the config tables in gmconfiguration.sql
   need to be imported)
   a) as the current user on the current machine
   b) as the current user on the "default" machine
   c) as the "default" user on the current machine
   d) as the "default" user on the "default" machine

2) in the file plugins.conf in the corresponding plugin
   directory (note that the format changed - this is now
   expected to be a standard gmCfg config file, group is
   "plugins", the list option "load order")

3) direct scan of the plugin directory
	</screen>
	</para>
    <para> 
    If any of the stages one b-d finds corresponding data that
    configuration is saved specific to the current user/machine.
	</para>
	<para>
    If stage two finds a plugins.conf file it assumes that the
    admin has set up a default for all users of this machine and
    thus writes that configuration into the database specific to
    the current user/machine.
	</para>
	<para>
    Stage three will always load all available plugins. It will
    therefore write that configuration into the database specific
    to the machine but not specific to a user (eg. to the default
    user).
	</para>
	<para>
    Subsequent loading will thus find the configuration at earlier
    stages. Thusly the client should be autoconfiguring to a
    certain degree.
	</para>
	<para>
    I have not yet connected to the backend explicit add/drop of
    plugins via Ian's new popup menu. This will come next.
	</para>
</sect1>

</chapter>
</part>

<part id="manual">

<title>Using GnuMed</title>
	<chapter id="usage">
      <title>Usage</title>
<sect1 id="login">
	<title>Logging In</title>
	<sect2>
	  <title>Setting Up Test Account</title>
	  <para>Before you can start login you will need to create
	  test accounts. The developers have provided such a test
	    account. It is located at
	  <computeroutput>gnumed/server/sql/gmTestAccounts.sql</computeroutput>.
	  Usually this account will be installed together with the backend tables
	  using <filename>bootstrap_gm_db_system.py</filename>.
	  There are currently three test accounts: </para>
	  <screen>
	  test-doc (password: test-doc)
	  test-nurse (password: test-nurse)
	  test-secretary (password: test-secretary)
	  </screen>
	  <para>
	  You should use <emphasis>test-doc</emphasis> since this is the least 
	  restricted one.
	  </para>
	  <para>Do *NOT* use these accounts on a production system.</para>
	  
	</sect2>
	<sect2>
	  <title>Login/Password</title>
	<para>When you first gnumed, you will see the login
	screen</para>
	<para>For <computeroutput>user</computeroutput> type <computeroutput>test-doc</computeroutput></para>
	<para>for <computeroutput>password</computeroutput> type <computeroutput>test-doc</computeroutput></para>
	</sect2>

      </sect1>

      <sect1 id="cupoftea">
	<title>How do I use GnuMed to make a cup of tea</title>
      <para>Ask Marvin</para>
      </sect1>
    </chapter>
  </part>
&gfdl;
</book>
