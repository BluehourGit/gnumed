<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY gfdl SYSTEM "gfdl.sgml"> 
]>
<book>
   <bookinfo>
     <date>26-2-2002</date>
     <title>GNUMed</title>
     <subtitle>User's Manual</subtitle>
    
	<author>
		<firstname>Ian</firstname>
		<surname>Haywood</surname>
      </author>
	<author>	
      		<firstname>Gerardo</firstname>
		<surname>Arnaez</surname>
      
      </author>
	<author>	
   		<firstname>Hilmar</firstname>
		<surname>Berger</surname>
      
      </author>

<abstract>
	<para>      
      Copyright (c) 2001,2002 GNUMed developers</para>
      <para>
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no
      Front-Cover Texts, and with no Back-Cover Texts.</para>
      <para>
      A copy of the license is included in the section entitled "GNU
      Free Documentation License".</para>
   </abstract>

<revhistory>
      <revision>
	<revnumber>0.1.4.2.1</revnumber>
	<date>2003-04-02</date>
	<authorinitials>gea</authorinitials>
	<revremark>added more config info, and started mandrake
	installation, but needs more work</revremark>
      </revision>

      <revision>
	<revnumber>0.1.4.2</revnumber>
	<date>2003-01-27</date>
	<authorinitials>hb</authorinitials>
	<revremark>added configuration information</revremark>
      </revision>

      <revision>
	<revnumber>0.1.4.1</revnumber>
	<date>2002-12-22</date>
	<authorinitials>gea</authorinitials>
	<revremark>a more helpful requirements for debian</revremark>
      </revision>

      <revision>
	<revnumber>0.1.4</revnumber>
	<date>2002-11-08</date>
	<authorinitials>hb</authorinitials>
	<revremark>updated a few more requirements</revremark>
      </revision>

      <revision>
	<revnumber>0.1.3</revnumber>
	<date>2002-08-09</date>
	<authorinitials>gea</authorinitials>
	<revremark>updated a few more requirements</revremark>
      </revision>

      <revision>
	<revnumber>0.1.2</revnumber>
	<date>2002-08-02</date>
	<authorinitials>gea</authorinitials>
	<revremark>Intro.sgml converted into installation.sgml since each section will be a different file. also moved things about to make it clear and addded more hints in getting things running</revremark>
      </revision>
	<revision>
		<revnumber>0.1.1</revnumber>
		<date>2002-08-01</date>
		<authorinitials>gea</authorinitials>
		<revremark>Took into.sgml and modified.  Adding a section of thigs noted while trying to get GnuMed up and running	
	</revremark>
	</revision>
</revhistory>


   </bookinfo>
   <toc></toc>

<preface id="preface">
	<title>Preface</title>
	<para>GnuMed never sleeps.</para>
</preface>

<part id="administration">
<title>Administration: Installation and Configuration</title>
<chapter id="intro">
     <title>Introduction</title>

    <para>GNUMed is  a comprehensive scalable software solution for paperless 
medical practice with emphasis on privacy protection, secure patient-centric 
record sharing, decision support and ease of use.
</para>
       <para>GNUMed is not yet ready for download as a package.
It will become available at 
<ulink url="http://gnumed.org/">
<citetitle>gnumed.org</citetitle></ulink>.
 
It is released under the GNU 
General Public Licence, see the file <filename>LICENCE</filename> for details.
</para>

  </chapter>
  <chapter id="installation">
    <title>Installation</title>
    
    <sect1 id="optaining-gnumed">
      <title>Obtaining Gnumed software</title>
<para>The latest sources are available by CVS at 
<ulink url="http://savannah.gnu.org/projects/gnumed/">
<citetitle>savannah.gnu.org</citetitle></ulink>.
If CVS asks for a password, use a blank line. The module name is 
<emphasis>gnumed</emphasis>
</para>

      <para>Qouting from GnuMed's CVS instruction</para>
	  <para>
	"This project's CVS repository can be checked out through anonymous (pserver) CVS with the following instruction set. The module [<emphasis>gnumed</emphasis>]  you wish to check out must be specified as the modulename. When prompted for a password for anoncvs, simply press the Enter key.
	    </para>
      <para>You would type:</para>

	<screen>
Source tree: cvs -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnumed login
	</screen>
	
      <para>Remeber to hit enter when it asks for a password. Then type:</para>

	<screen>
cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnumed co gnumed
	</screen>
      <para>You should then see the cvs directory download into a gnumed directory</para>
    </sect1>

<sect1 id="linux">
	<title>Linux Installation</title>

	<sect2>
		<title>Distrubutions 'supported'</title>
		<para>GnuMed is known being actively developed on:</para>
		<para>
		<table frame=all>
			<title>"Supported" Distributions</title>
			<tgroup cols=4 align=left colsep=1 rowsep=1>
			<thead>
			<row>
				<entry>Distribution</entry>
				<entry>Version</entry>
				<entry>URL</entry>
		  		<entry>Functional?</entry>
			</row>
			</thead>
			
			<tbody>
			<row>
				<entry>Debian</entry>
				<entry>unstable</entry>
				<entry><ulink url="http://www.debian.org">www.debian.org</ulink></entry>
		  		<entry>Yes</entry>	
			</row>
		
		<row>
		  <entry>RedHat</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.redhat.com">www.redhat.com</ulink></entry>
		  <entry>yes</entry>
		</row>
			<row>
				<entry>Suse</entry>
				<entry>???</entry>
				<entry><ulink url="http://www.suse.com">www.suse.com</ulink></entry>
			</row>
			<row>
				<entry>Mandrake</entry>
				<entry>8.2 (2.4.18-6mdk kernel)</entry>
				<entry><ulink url="http://www.mandrake.com">www.mandrake.com</ulink></entry>
		  <entry>Yes</entry>
			</row>

			<row>
				<entry>Microsoft</entry>
				<entry>Win98</entry>
				<entry><ulink url="http://www.microsoft.com">www.microsoft.com</ulink></entry>
		  <entry>yes</entry>
			</row>

		<row>
		  <entry>Gentoo</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.gentoo.org">www.gentoo.org</ulink></entry>
		  <entry>Yes</entry>
		</row>

		<row>
		  <entry>Solaris</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.sun.com">www.sun.com</ulink></entry>
		  <entry>Sporadically</entry>
		</row>
<row>
		  <entry>BSD</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.sun.com">www.freebsd.org</ulink></entry>
		  <entry>Sporadically</entry>
		</row>

<row>
		  <entry>w-smith</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.e-smith.org">www.e-smith.org</ulink></entry>
		  <entry>server side only</entry>
		</row>
		<row>
		  <entry>Mac OS X</entry>
		  <entry>???</entry>
		  <entry><ulink url="http://www.apple.com">www.apple.com</ulink></entry>
		  <entry>Unknown</entry>
		</row>

		
		<row>
		  <!-- one of (ENTRYTBL ENTRY) -->

		  <entry>WinME</entry>

		  <entry>???</entry>
		  
		  <entry><ulink url="http://www.microsoft.com">www.microsoft.com</ulink></entry>
		  
		  <entry>Does not work with authentication type "crypt" in pg_hba.conf. Must be "password"</entry>
		</row>
			</tbody>
			</tgroup>

		</table>
		</para>




	</sect2>

	
      <sect2>
	<title>Requirements</title>
      <para>GNUMed has run successfully on Linux. It requires a number of
packages to be installed before it can be run.</para>
      
<para>GNUMed requires the following packages:</para>

<para>
<table frame=all>
	<title>Requirements</title>
	<tgroup cols=3 align=left colsep=1 rowsep=1>
		<thead>
			<row>
				<entry>Package</entry>
				<entry>URL</entry>
				<entry>Version</entry>
			</row>
		</thead>

		<tbody>
		
			<row>
				<entry>Python Scripting Language</entry>
				<entry><ulink url="http://www.python.org/"><citetitle>python.org</citetitle></ulink></entry>
				<entry><filename>2.2</filename></entry>
			</row>

			<row>
				<entry>GTK libraries</entry>
				<entry><ulink url="http://www.gtk.org/"><citetitle>gtk.org</citetitle></ulink></entry>
		  <entry><filename>1.2</filename></entry>
			</row>

			<row>
				<entry>mx extension libraries</entry>
				<entry><ulink url="http://www.lemburg.com/files/python/eGenix-mx-Extensions.html"><citetitle>mx</citetitle></ulink></entry>
				<entry><filename>mx</filename></entry>
			</row>
			<row>
				<entry>PostgreSQL Database server</entry>
				<entry><ulink url="http://www.postgresql.org/"><citetitle>postgresql.org</citetitle></ulink>
					<footnote><para>
						Don't forget to include the Python interface libraries.
					</para></footnote>
				</entry>

				<entry>7.2</entry>
			</row>

			<row>
				<entry>wxWindows windowing library</entry>
				<entry>
                <ulink url="http://www.wxwindows.org/dl_gtk.htm#dev"><citetitle>wxwindows web site</citetitle></ulink>
                </entry>
				<entry>2.4</entry>
			</row>
			<row>
				<entry>wxPython</entry>
				<entry>
    			<ulink url="http://www.wxpython.org/download.php#binaries"><citetitle>wxpython.org</citetitle></ulink>
				</entry>
		  		<entry>2.4</entry>
			</row>

		<row>
	
		  <!-- one of (ENTRYTBL ENTRY) -->
		  
		  <entry>PyPgSQL</entry>
	  
		  <entry><ulink url="http://pypgsql.sourceforge.net/">www.pypgsql.sourceforge.net</ulink></entry>
		  
		  <entry>2.3</entry>
		</row>
		</tbody>
	</tgroup>
</table>

	  </para>

<para>This list looks daunting, but Python and GTK libraries are
almost invariably installed, and PostgreSQL, if not installed, will be
on your Linux CDs somewhere.</para>
<para>Note that the packages should be installed in the listed order, as 
some depend upon others. Also, if using RPM, you must install the libraries 
(postgresql-lib), then the main package (postgresql), then the others, 
including postgresql-python.
</para>

<para>
On some distros, some of the Python libraries get installed in funny places.
So Python can find them, add this line to your <filename>.profile</filename>:

<screen>
export PYTHONPATH=/usr/lib/python1.5/site-packages:/usr/local/lib/python2.1/site-packages
</screen>
</para>

<para>
NOTE: on some the later distros (Mandrake is where I have seen this), wxGTK does not install 
as it requires a version of libpng older than what's installed. This old library is vanishing off 
the web. Here is a  
<ulink url="http://mail.student.unimelb.edu.au/~ihaywood/libpng-1.0.8-1.i386.rpm"> 
<citetitle>mirror</citetitle></ulink></para> 


      </sect2>


      <sect2>
	<title>Postgresql</title>

	<sect3>
	<title>Configuring PostgreSQL (quoting Steven Duffy)</title>
		<para> Usually PostgresSQL should be started automatically at bootup. Most modern
        distributions configure PostgresSQL correctly to do so. If you installed the package
        from sources, some steps may be required to get the <application>PostgreSQL</application>
        database system running.</para>
        <para>First, make sure you have the PostgreSQL server daemon running. Just enter
        the following lines on the command line:</para>
        <screen>
$ ps ax | grep "postmaster"

 this should print something like 

 212  ?  S    0:00 /usr/local/pgsql/bin/postmaster -i -o -F -D/usr/local/pgsql/...
		</screen>
		<para> You might as well check under <filename>/etc/rc.d/</filename>, or
         run <application>Linuxconf</application> or whatever your distribution offers.</para>
		<para>
         If <application>postmaster</application> isn't running you can set it up 
         with these commands as root:
		<screen>
su - postgres
initdb -D ~postgres/data
postmaster [-i] -D ~postgres/data >logfile 2>&1 &
		</screen></para>

		<para>
		You should enable TCP/IP access to the database. In order to do this you can either 
        add the '-i' option when starting <application>postmaster</application> (see above and below) or do the following:
        </para>
		<procedure>
		<step><para>find and open <filename>/etc/postgresql/postgresql.conf</filename></para></step>
		<step><para>change <command>tcpip_socket = false</command> to <command>tcpip_socket = on</command></para></step>
		<step><para>save changes and restart <application>PostgreSQL</application></para></step>
		</procedure>
        <para>If you'd rather like to add the '-i' option and don't know where 
        <application>postmaster</application> is started:</para>
		<para>
		If your distribution uses as <application>postgresql</application> 
		script to start the server, it is likely the <command>pg_ctl</command> 
		is used to run postmaster. In this case, find where
		<command>pg_ctl</command> 
		is executed and add<command> insert -o \&quot;-i\&quot;</command> as one of
		the options to pg_ctl. Otherwise, find the script from which postmaster is 
		executed and simply add <command>-i</command> as an argument.
		</para>

		<para>Once PostgreSQL is set up, go to the section on
		setting up the database (<xref linkend="pgsql">.)</para>
		</sect3>
      </sect2>

<sect2>
	<title>Running GnuMed</title>
		<para>To start Gnumed you must go the the <filename>client/wxpython</filename> 
        directory of the <application>gnumed</application>-CVS tree. If you 
        installed <application>gnumed</application> in your homedir this should be:
		<screen>cd ~/gnumed/gnumed/client/wxpython</screen></para>
	    <para>Now type<screen>python gnumed.py</screen></para>

	    <para>Do not be surprised with a multitude of [WARN} and [INFO] the the python 
        interpreter will spew out. With any luck you will see a login gui</para>
	    <para>
        When running from the client/wxpython/ directory of a normal
        CVS tree it shouldn't be necessary at all to set GNUMED_DIR.                
        Actually, the combination of _setting_ GNUMED_DIR and a
        subsequent failure on import of GnuMed modules hints towards
        an incorrectly set GNUMED_DIR. If at all it needs to be set to
        the directory where your python-common/ subdir resides in the tree.
        </para>

      <sect3>
	     <title>Logging in</title>
	     <para>You will then be faced with login parameters. If you have set up the 
         postgresql correctly, you only need to fill in the following parameters.</para>
         <para>
	     Enter 'test-doc' for login and password as those are the predefined test accounts.
         </para>
         <para>
         Pressing the button 'options' you can change the parameters used to connect to the
         database. These should normally be set up correctly so you usually don't have to 
         change anything there.
         </para><para>
         After pressing the 'Ok' button there should appear a progress bar showing the 
         modules being loaded. Finally the <application>gnumed</application>-GUI will appear.
         </para>
      </sect3>
</sect2>
    </sect1>

<sect1 id="debian">
	<title>Debian specific requirements</title>
	  <para>This is what is known to work on Debian as of late</para>
	  <para>Son 01 Dez 2002 11:54:06 CET  <email>gouchi@altern.org</email></para>
	  <para>I have reinstalled Gnumed on Debian Woody (2.4.18-bf2.4), and this the list of package, I have installed, if he can help:
	    <itemizedlist>
	      <listitem>
		<para>
egenix-mx-base-2.0.4.tar.gz</para>
	      </listitem>
	      <listitem>
		<para>
libwxgtk2.3-python_2.3.3.2_i386.deb</para>
	      </listitem>
	      <listitem>
		<para>
libwxgtk2.3_2.3.3.2_i386.deb</para>
	      </listitem>
	      <listitem>
		<para>
postgresql-7.2.3.tar.gz</para>
	      </listitem>
	      <listitem>
		<para>
pypgsql-2.3.tar.gz</para>
	      </listitem>
	      <listitem>
		<para>
python2.2-dev_2.2.1-4_i386.deb</para>
	      </listitem>

	      <listitem>
		<para>
python2.2-egenix-mxdatetime_2.0.3-3.2_i386.deb</para>
	      </listitem>
	      <listitem>
		<para>
python2.2-egenix-mxtools_2.0.3-3.2_i386.deb</para>
	      </listitem>
	      <listitem>
		<para>
python2.2_2.2.1-4_i386.deb</para>
	      </listitem>
	    </itemizedlist></para>
</sect1>
      
<sect1 id="mandrake">
	<title>Mandrake- GnuMed on Mandrake 9.1</title>
	<para>GnuMed Install Instructions for Mandrake Linux 9.1
by Michael Bonert</para>
	<para><email>michael.bonert@utoronto.ca</email></para>
	<para>Wed Apr  2 00:17:07 EST 2003</para>
	<sect2>
	  <title>Package Installation</title>
	  <orderedlist>
	    <listitem>
	      <para>
		  Install CVS (from the Mandrake CDs):
		  cvs-1.11.5-1mdk</para>
	    </listitem>
	    <listitem>
			<para>
			Install postgresql (from the Mandrake CDs):
			<footnote>
				<para>
	            NOTE: If the packages all show up when you do a
	            'remove software packages' (in 'mcc') they are all
	            installed.</para>
			</footnote>
	     	</para>
	    </listitem>
	    
        <listitem>
        <para>
        Install Postgresql-7.3:
        </para>
	      <itemizedlist>
		<listitem>
		  <para>
			postgresql-7.3.2-5mdk</para>
		</listitem>
		<listitem>
		  <para>
			postgresql-devel-7.3.2-5mdk</para>
		</listitem>
		<listitem>
		  <para>
			postgresql-python-7.3.2-5mdk</para>
		</listitem>
		<listitem>
		  <para>
			postgresql-server-7.3.2-5mdk</para>
		</listitem>
		<listitem>
		  <para>
			postgresql-pl-7.3.2-5mdk</para>
		</listitem>
		<listitem>
		  <para>
			pgaccess-0.98.8.20030117-2mdk		# nice to have</para>
		</listitem>
		<listitem>
		  <para>
			postgresql-docs-7.3.2-5mdk		# nice to have</para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	    
        <listitem>
	      <para>
			Install wxPython -- (version used: wxPythonGTK-py2.2-2.4.0.1-1.i386.rpm)</para>
	    </listitem>
	    
        <listitem>
	      <para>
			Install mx extenstion libraries -- (egenix-mx-base-2.0.4-py2.2_1.i386.rpm)</para>
	    </listitem>
	    
        <listitem>
	      <para>
			Install pyPgSQL</para>
			<para>
	        This package can be installed either from source or from a RPM.
	        Email me (bonerti AT mie DOT utoronto DOT ca) for the RPM.</para>
	    	<itemizedlist>	    
				<listitem>
               	<para>
	            If you install the RMP:
		         </para>
		         <para>
	             Before installing pyPgSQL make sure you have the following
	             (from the Mandrake CDs): 
                 </para><para><emphasis>
	             libpython2.2-devel-2.2.2-6mdk
                </emphasis></para>
                 <para>
	             Install the rpm and check that everything went right:
                 </para>
				<para>
			    <screen>
$ su root
# su postgres		# trick to avoid having to know the postgres passwd
$ cd /usr/share/doc/pyPgSQL-2.3/test
$ python PgSQLTestCases.py

this should print:

	..................................................................
	----------------------------------------------------------------------
	Ran 66 tests in 1.090s

	OK
		    </screen>

				  </para>

				<para>
				IMPORTANT NOTE:
			    </para>
			    <para>
				A database user with your user name has to exist for the test to work
	            properly if you are testing as a normal user.  See step #10
	            for how	to create database users.
	            </para>
				</listitem>
                
                <listitem>
                <para>
                If you would like to install from sources:
                </para>

	            <para>
	            Before building and installing pyPgSQL make sure you have the following
	            (from the Mandrake CDs):<emphasis>
	            libpython2.2-devel-2.2.2-6mdk</emphasis></para>

	              <screen>$ tar zxvf pyPgSQL-2.3.tar.gz<footnote>
	                  <para>gunzip + untar 'pyPgSQL-2.3.tar.gz'</para>
	                </footnote>
$ cd pypgsql
				 </screen>
	              <para>
            Set include and library directories in "setup.py" with your favourite editor:</para>
	              <screen>
# Set this to 1 if you need to use your own settings
USE_CUSTOM = 1
                  <footnote><para>
					Don't forget to change this line!!!
				 </para></footnote>
            ...

if USE_CUSTOM:
    include_dirs = ["/usr/include/pgsql"]
    library_dirs = ["/usr/lib/pgsql"]</screen>
      <para>
      Now build pyPgSQL and install it:
      </para>
      <screen>
$ python setup.py build
	    $ python setup.py install
        <footnote><para>
NOTE: If the directory settings in 'setup.py' are wrong you will 
get a misleading error about 'gcc'
		</para></footnote>
        
      </screen>

	  <para>Testing pyPgSQL:</para>

	  <screen>
$ cd test<footnote>
	      <para>
install directory: ../pypgsql/test</para>
	    </footnote>
$ python PgSQLTestCases.py

 this should print:

	..................................................................
	----------------------------------------------------------------------
	Ran 66 tests in 1.090s

	OK
	    	</screen>
		</itemizedlist>
        </listitem>
       </orderedlist>
	</sect2>

	<sect2>
	  <title>Get GnuMed source</title>
	  <para>
RECOMMENDATION: install gnumed in "/home/your_user_name/"
	-- where 'your_user_name' is your favourite normal user - e.g. 'michael'
	  </para>
	  <screen>
$ cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnumed login
$ cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnumed checkout gnumed
	  </screen>
	</sect2>
	<sect2>
	  <title>Modify postgresql.conf</title>
	  <screen>
$ su
# cd /var/lib/pgsql/data
# vi postgresql.conf<footnote>
	      <para>change '#tcpip_socket=false' to 'tcpip_socket=on'</para>
	    </footnote></screen>
	    </sect2>
	<sect2>
	  <title>Modify "pg_hba.conf" found in
	  "/var/lib/pgsql/data"</title>
	  <screen>
# vi pg_hba.conf</screen>
	  <para>
last part of our "pg_hba.conf" should look like this:
	    <screen>
# Using sockets credentials for improved security. Not available everywhere,
# but works on Linux, *BSD (and probably some others)

#local  all     all     ident   sameuser
local   all         all                                             trust
host    all         all         127.0.0.1         255.255.255.255   trust
	    </screen>
	  </para>
	</sect2>
	<sect2>
	  <title>Create db</title>
	  <para>
(see -- http://mail.gnu.org/archive/html/gnumed-devel/2003-02/msg00079.html)</para>
	  <screen>
$ su root
	    # passwd postgres<footnote>
	      <para># change password (I don't know what the default is</para>
</footnote></screen>
	  <caution>
	    <para># you'll need this password later so remember it.</para>
	  </caution>
      <para>If you wish to create a user for gnumed please change 
      <filename>sql/gmTestAccounts.sql</filename>. Creating them at the command
      line is not recommended.</para>

	  <para>
	  Now change back to your normal account and bootstrap the gnumed database.</para>
	  <screen>
$ cd /home/your_user_name/gnumed/gnumed/server/bootstrap
$ cp bootstrap-standard-AU.conf.sample your_user_name-db.conf
$ ln -s /home/your_user_name/gnumed/gnumed/client/python-common modules
$ ln -s /home/your_user_name/gnumed/gnumed/server/sql/ sql
	  </screen>
	  <para>
	At this point you may want to confirm that postgresql is
	running:</para>
	  <screen>
$ mcc
	  </screen>
	  <para>click on 'System'</para>
	  <para>click on 'DrakXServices...'</para>
<para>'postgresql' should say 'running'</para>
	  <screen>
$ python bootstrap-gm_db_system.py
	    --conf-file=your_user_name-db.conf</screen>
	  <para>
When prompted:
	    <itemizedlist>
	      <listitem>
		<para>
- yes</para>
	      </listitem>
	      <listitem>
		<para>
- give password</para>
	      </listitem>
	      <listitem>
		<para>
- give another password</para>
	      </listitem>
	    </itemizedlist></para>

	  <para><emphasis>
NOTE: If you have problems the log file is in: "/home/your_user_name/.bootstrap-gm_db_system"
	    </emphasis></para>
	</sect2>
	<sect2>
	  <title>Set 'GNUMED_DIR' variable</title>
	  <screen>
$ cd 			# cd to home
$ vi .bash_profile	# or your favourite text editor
	  </screen>
	  <para>
Add the following:</para>
	  <screen>
GNUMED_DIR=$GNUMED_DIR/home/your_user_name/gnumed/gnumed/client
	  </screen>
	</sect2>

	<sect2>
	  <title>Running GnuMed:</title>
	  <screen>
$ cd /home/your_user_name/gnumed/gnumed/client/wxpython
$ python gnumed.py --debug
	  </screen>
	</sect2>
      </sect1>
   

<sect1 id="mac"><title>Mac - GnuMED on MacOSX 10.2</title>
	<sect2>
    	<title>System</title>
		<para>
        Install the Developer's applications from the Developer's CD that comes 
        with MacOSX10.2
        Make sure you have installed security update 2002-08-23 as well as 
        MaxOSX 10.2
		</para>
	</sect2>
    <sect2>
    	<title>Instaling Python and wxWindows</title>
        <para>
        Download the latest versions of MachoPython and wxPythonOSX from 
        	<ulink url="http://sourceforge.net/project/showfiles.php?group_id=10718"><citetitle>Sourceforge</citetitle></ulink>
        </para><para>
        The versions at time of writing (8 Sept 2002) were 
        MachoPython-2.2.1-4.dmg and wxPythonOSX-2.3.3pre6.dmg respectively.
        </para><para>

        These files are disk images. Open and  install them by doubleclicking 
        the MachoPython.pkg package and then wxPythonOSX.pkg
        </para>
    </sect2>

    <sect2>
    	<title>Install mx extensions</title>
        <para>
        Download the mx extensions from 
        <ulink url="http://www.egenix.com/files/python/egenix-mx-base-2.0.3.tar.gz"><citetitle>Egenix</citetitle></ulink>        
        (The latest version can be found at 
		<ulink url="http://www.lemburg.com/files/python/eGenix-mx-Extensions.html"><citetitle>this site</citetitle></ulink>.)
        </para><para>
		The .tar.gz file will be uncompressed as egenix-mx-base-2.0.3
        </para><para>
        Open the terminal application and CD to the directory 
        egenix-mx-base-2.0.3
        type:
		</para>
<screen>
su root
password
python setup.py install
exit
</screen>
    </sect2>

    <sect2>
    	<title>Installing postgresql</title>
        <para>
        Good instructions for installing Postgresql from binary on MaxOSX 10.2 
        are available at
		<ulink url="http://www.entropy.ch/software/MacOSx/postgresql/"><citetitle>this page</citetitle></ulink>
        </para><para>
        Also install the StartUp Item script (available on the same web page) 
        so that postgresql is loaded at system startup.
        </para><para>
        To include /usr/local/bin in the command path, enter this command
        <screen>
        echo 'setenv PATH /usr/local/bin:$PATH' >> ~/.tcshrc
        </screen>
        </para>
    </sect2>

    <sect2>
    	<title>Installing pypgsql</title>

        <para>
        Download the source code from 
        http://sourceforge.net/project/showfiles.php?group_id=16528
        </para><para>
        You may need to se a text editor to edit the file setup.py in the 
        untarred folder pypgsql
        so that the lines starting include_dirs and library_dirs look like this 
        </para>
        <screen>
        include_dirs  = [ "/usr/local/pgsql/include" ]
        library_dirs  = [ "/usr/local/pgsql/lib" ]
        </screen>
        <para>
        In the terminal, go to the pypgsql directory and type
		<screen>
        python setup.py build
        </screen>
        </para><para>
        If you have build errors, download the setup.py file from
		<ulink url="http://www.gnumed.org/directory/documents/144/setup.py"><citetitle>the Gnumed Homepage</citetitle></ulink>,
        move it to the pypgsql directory, and repeat the command.
        </para><para>
        Wait for the build to finish and then type
		<screen>
        sudo python setup.py install
        </screen>
        (Enter your root password when prompted)
        </para><para>
        To test the install, type
        <screen>
        python test/PgSQLTestCases.py
        </screen>
        </para>
    </sect2>

    <sect2>
    	<title>Download gnumed cvs</title>
        <para>
		Open a new terminal window, and type
        </para>
        <screen>
cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnumed login
		</screen>
        <para>
		Just press 'return' when asked for a password. Then type
		<screen>
cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnumed checkout gnumed
		</screen>
        </para><para>
		All the gnumed files will be downloaded to your hard drive.
        </para>
	</sect2>

	<sect2>
        <title>Configuring postgres for Gnumed</title>
		<para>
        See (<xref linkend="pgsql">).
		</para>
</sect2>

</sect1>


<sect1 id="win9x"><title>Windows</title>

   <para>GNUMed requires the following packages. Each link points to a .EXE file. Download them and run each in turn.

<table frame=all><title>Requirements</title>
<tgroup cols=3 align=left colsep=1 rowsep=1>
<thead>
<row>
  <entry>Package</entry>
  <entry>URL</entry>
<entry>Version</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Python Scripting Language</entry>
  <entry><ulink url="ftp://ftp.python.org/pub/python/2.2.1/Python-2.2.1c2.exe">
<citetitle>python.org</citetitle></ulink>
</entry>
<entry>2.1</entry>
</row>
<row>
  <entry>wxWindows windowing library</entry>
   <entry>
<ulink url="http://prdownloads.sourceforge.net/wxpython/wxPython-2.3.2.1-Py22.exe">
<citetitle>wxWindows for Python bindings</citetitle></ulink>
</entry><entry>2.3.2</entry></row>
<row>
  <entry>mx extension libraries</entry>
  <entry><ulink url="http://www.egenix.com/files/python/egenix-mx-base-2.0.3.win32-py2.2.exe">
<citetitle>mx</citetitle></ulink>
</entry><entry>2.0.3</entry>
</row>
<row>
 <entry>PyGresQL -- Python libraries for SQL</entry>
 <entry><ulink url="http://prdownloads.sourceforge.net/pypgsql/pyPgSQL-2.0.win32-py2.2.exe"><citetitle>PyGresQL</citetitle></ulink></entry><entry>2.2</entry>
</row>
<row>
  <entry>CYGWIN UNIX emulator</entry>
  <entry><ulink url="http://www.cygwin.com/setup.exe">
<citetitle>cygwin.com</citetitle></ulink>
</entry>
<entry>2.1</entry>
</row>
<row>
  <entry>IPC for Cygwin</entry>
  <entry>
<ulink url="http://www.neuro.gatech.edu/users/cwilson/cygutils/V1.1/cygipc/cygipc-1.11-1.tar.bz2">
<citetitle>CygIPC </citetitle></ulink>(this is not an .EXE file. Save it to C:\CYGWIN)
</entry><entry>1.11</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para>
Download these packages. For cygwin, make sure you select
the package <application>PostgreSQL</application> in the Databases category. 
</para>

<sect2><title>Installing PostgreSQL</title>

<para>
Double-click on the Cygwin icon on your desktop. The UNIX command
prompt appears. Take a deep breath, and type:
<screen>
cd /
tar xvjf /cygipc-1.11-1.bz2
/usr/local/bin/ipc-daemon &
mkdir /usr/share/postgresql/data
/usr/bin/initdb -D /
/usr/bin/postmaster -D /usr/share/postgresql/data &
</screen>
Postgres should now be running. <emphasis>DO NOT</emphasis> close
the window containing these commands. 
</para>
<para>Every time to want to run PostgreSQL again, open up Cygwin as
before and type:
<screen>
/usr/local/bin/ipc-daemon &
/usr/bin/postmaster -D /usr/share/postgresql/data &
</screen>
</para>
<para>Once PostgreSQL is set up, go to the section on
setting up the database (<xref linkend="pgsql">.)</para>


<sect3><title>Running PostgreSQL as an NT service</title>

<para>On Windows NT, 2000 or XP it is possible to run
PostgreSQL as a background process (similar to a UNIX daemon).
</para>
<para>Go to Control Panel: "Users", and create a new user for your
system, called "postgres". Give the user privileges to run as a service.
	  </para>
<para>At the Cygwin prompt, type:
<screen>
ipc-daemon --install-as-service
</screen>
Then,as a single line:
<screen>
cygrunsrv --install postmaster --path /usr/bin/postmaster --args "-D
  /usr/share/postgresql/data -i" --dep ipc-daemon --termsig INT --user
  postgres --shutdown
</screen>
Then
<screen>
mkdir /usr/share/postgresql/data
chown postgres /usr/share/postgresql/data
</screen>
If this directory (/usr/share/postgresql/data) already exists from your previous
efforts, delete it with "rm -R /usr/share/postgresql/data", and repeat.
</para><para>
Reboot the computer.
Now log in as the "postgres" user, load Cygwin again and type:
<screen>
initdb -D /usr/share/postgresql/data
</screen>
The database will now run whenever Windows is loaded. 
You <emphasis>must</emphasis> be user "postgres" to use the database
on this computer. </para>
<para>Once PostgreSQL is set up, go to the section on
setting up the database (<xref linkend="pgsql">.)</para>

</sect3>
</sect2>

<sect2><title>Running the client</title>
<para>
Once you have done this, you can run GNUMed from the Python interpreter.
Click on the Python icon and type:
<screen>
<prompt>>>></prompt>  import sys
<prompt>>>></prompt>  sys.path.append ('path-to-gnumed-files')
<prompt>>>></prompt>  import gnumed
<prompt>>>></prompt>  gnumed.main ()
</screen></para>
</sect2>

</sect1>
</chapter>

<chapter id="configuration">
     <title>Configuration</title>
<sect1 id="pgsql" xreflabel="SQL Setup">
<title>Configuring <application>PostgreSQL</application> for GnuMed</title>
      <para>This section applies is distribtuion/OS independant.</para>

	<sect2>
	<title>GnuMed database 101</title>

        <para>
        GnuMed does not simply store all of it's data in a monolithic database.
        It rather uses the concept of a service. A service is a set of tables
        relating to a semantically reasonably distinct part of the data. It's
        probably easiest to understand via the example of the "blobs" service.
        This service stores medical documents relating to patients. These can
        be scans of referral letters or discharge summaries, paper-based lab
        results or incoming faxes. Any aggregate of diverse medical data on a
        patient that's not easily split up and stored.
        </para>
        <para>
        Other services include "default" (the core database tables that tell
        your client software which service is to be found where), "personalia"
        (holding all the patient demographics), and various clinical services
        for drug data, clinical history, etc. The authoritative list of services
        is found in server/sql/gmconfiguration.sql. Any service living in the
        same database as the "default" service does not need to be mapped
        explicitely (but it can). If there's no mapping it is assumed that
        a service lives in the "default" service's database.
        </para>
        <para>
        Services can coexist in one and the same database on a single server
        or be spread out across several databases or even servers both on-site
        and off-site. However, non-monolithic services have not been tested
        well yet and will require the non-standard dblink PostgreSQL extension
        (found in contrib/ in the PostgreSQL source tree). Until further notice
        it is recommended to stick to non-distribution of services via
        monolithic databases except for services that don't require
        cross-database referential integrity links such as a drug database
        for informational purposes. What has been tested successfully, however,
        is access to GnuMed databases over WAN links, including via internet
        from arbitrary locations.
        </para>
	</sect2>
    
	<sect2>
	<title>Database setup</title>
        <para>
        The theory roughly goes like this:
        </para>

   	    <itemizedlist mark=opencircle>
		    <listitem><para>
            create databases
            </para></listitem>
		    <listitem><para>
            import all the necessary tables for the services you want to support
            </para></listitem>
		    <listitem><para>
            import any necessary translation files for the languages
            you wish to support
            </para></listitem>
		    <listitem><para>
            grant appropriate access rights
		    <listitem><para>
            set up service-to-database/server mappings
            </para></listitem>
		</itemizedlist>

        <para>
        All of this is handled automatically by the script bootstrap-gm_db_system.py
        living in server/utils/. This script does not yet set up mappings of
        services to their databases/servers (although in theory it can install
        services on remote servers already). As this is not yet fully supported by
        GnuMed anyways (due to dblink being non-standard) one should stick
        to a monolithic service layout. Several sample config files for
        bootstrapping are supplied in server/utils/. </para>

        <para>
        Before running the bootstrap script make sure you've installed the symbolic links 
        to <literal>modules</literal> and <literal>sql</literal>. You can do this
        by typing 
        <screen>
sh make-links.sh
		</screen>
        </para>

		<para>
		Now use a sample config file by calling the script like this:
		<screen>
         bootstrap-gm_db_system.py --conf-file=&lt;a config file&gt;
		</screen>
        </para>

		<para>You should see some line like
        <screen>
Done bootstrapping: We probably succeeded.	
		</screen>
	     at the end of the output if everything went right.
         </para>
            
		<para>Make sure you check the following section in your config file 
        points to the pgsql libraries.
		<screen>
language library dirs = $language library dirs$
/usr/lib/postgresql/                                                            
/usr/lib/postgresql/lib/                                                        
/usr/lib/pgsql/                                                                 
/usr/local/pgsql/lib                                                            
$language library dirs$ 
		</screen>
        Many known locations are already listed so you might not have to 
        change anything.
        </para>
        <para>
        To set up a straightforward monolithic system on the local machine use
        the config file <literal>localhost-monolithic.conf.sample</literal>.
        </para>
        <para>
        Make sure to remove test accounts and to set up your own config file
        if you want to go life.
        </para>
        <para>
        If you want to tweak things by hand read the config files and the source
        of the bootstrapping scripts. All the config file parameters are documented
        in <literal>bootstrap-gm_db_system.conf.sample</literal>.
        </para>
</sect1>



      <sect1 id="confignotes">
	<title>Language configuration</title>
	<para>
Upon startup the client autoconfigures the language used
in the database.
	</para>
	<para>
The following things influence its decision:
	  <itemizedlist>
	    <listitem>
	      <para>
The language is taken from the system locale in the environment
variables checked for the GUI language by gmI18N.py.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
If there's no i18n_curr_lang table in the database the client
assumes that no translations are wanted and tries to work
without it. Same if other errors prevent normal operations - a
warning is logged and things continue.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
If the language given in the database doesn't match the system
locale the user is asked whether to update the database setting
to that. One can influence the system locale setting in
per-instance wrapper scripts if so desired.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
The database language setting is only updated if translations
are actually available for the target language. Two levels of
truncation of the system locale are used to find matching
		translations:
		<itemizedlist>
		  <listitem>
		    <para>
1) full locale: 'de_DE@euro'
		    </para>
		  </listitem>
		  <listitem>
		    <para>
2) no dialect:  'de_DE'
		    </para>
		  </listitem>
		  <listitem>
		    <para>
3) no country:  'de'
		    </para>
		  </listitem>
		</itemizedlist></para>
	    </listitem>
	  </itemizedlist></para>
	<para>
This allows for a missing Austrian translation to fall back to
	  a general German (de_AT -> de) one, for example.
      </sect1>
 

<sect1 id="user-structure" xreflabel="DB user structure">
<title>GnuMed database user structure</title>
	<para>
    PostgreSQL does not support read-write versus read-only connections.
    To protect us from unwanted writes we emulate this separation by
    setting up two accounts per user. The normal account name "user" is
    used for read-only connections. This is ensured by only granting
    SELECT rights to those accounts. The read-write account name is
    formed by prepending a "_" to the normal account such that "user"
    has a companian account named "_user". Those accounts are granted
    appropriate INSERT, DELETE and UPDATE rights in the database.
	</para>
	<para>
    As it is very tedious to grant rights to each and every single
    account the concept of user groups is used. A group "group" is
    actually granted SELECT rights only, while "_group" receives
    INSERT, UPDATE, and DELETE rights on database objects. Users
    are simply added to those groups, name "user" to group "group" and
    "_user" to group "_group" thereby acquiring the respective database
    rights.
	</para>
	<para>
    Default groups that always exist in a properly configured GnuMed
    database are:
	</para>
	<para>
    <screen>
    gm-doctors              _gm-doctors
    gm-staff_medical        _gm-staff_medical
    gm-staff_office         _gm-staff_office
    gm-trainees_medical
    gm-trainees_office
    gm-public
    </screen>
	</para>
	<para>
    Notice how there are no write rights for trainees and the public.
	</para>
	<para>
    gmPG will return read-only connections by default. If a read-write
    connection is requested  by means of setting read_only = 0 a new
    connection to the service is instantiated for the user "_CURRENT_USER".
    Read-only connections are cached and shared, read-write ones are not.
	</para>
</sect1>

<sect1 id="plugin-conf" xreflabel="Plugin configuration">
<title>Plugin Configuration</title>
	<para>
	The plugin configuration is now implemented as follows:
	</para>
	<para>		
    IMHO this is GnuMed configuration information. Actually it
    should live in an Administrators Guide as discussed recently
    on the list but for now we can share admin and user staff
    in the User Manual since we don't have much user level
    information yet...
	</para>
	<para>
	Upon startup GnuMed tries to read a list of which plugins to
	load. It looks in several places:
	</para>
    <para>
    <screen>
1) in the database (the config tables in gmconfiguration.sql
   need to be imported)
   a) as the current user on the current machine
   b) as the current user on the "default" machine
   c) as the "default" user on the current machine
   d) as the "default" user on the "default" machine

2) in the file plugins.conf in the corresponding plugin
   directory (note that the format changed - this is now
   expected to be a standard gmCfg config file, group is
   "plugins", the list option "load order")

3) direct scan of the plugin directory
	</screen>
	</para>
    <para> 
    If any of the stages one b-d finds corresponding data that
    configuration is saved specific to the current user/machine.
	</para>
	<para>
    If stage two finds a plugins.conf file it assumes that the
    admin has set up a default for all users of this machine and
    thus writes that configuration into the database specific to
    the current user/machine.
	</para>
	<para>
    Stage three will always load all available plugins. It will
    therefore write that configuration into the database specific
    to the machine but not specific to a user (eg. to the default
    user).
	</para>
	<para>
    Subsequent loading will thus find the configuration at earlier
    stages. Thusly the client should be autoconfiguring to a
    certain degree.
	</para>
	<para>
    I have not yet connected to the backend explicit add/drop of
    plugins via Ian's new popup menu. This will come next.
	</para>
</sect1>

</chapter>
</part>

<part id="manual">
<title>How to use GnuMed</title>
	<chapter id="usage">
		<title>How do I use GnuMed to make a cup of tea</title>
      <para>Ask Marvin</para>
    </chapter>
  </part>
&gfdl;
</book>
