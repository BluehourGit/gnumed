#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4.1 on Mon May  7 21:06:13 2007

import wx

class wxgUnhandledExceptionDlg(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: wxgUnhandledExceptionDlg.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX|wx.MINIMIZE_BOX|wx.THICK_FRAME|wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.__szr_middle_staticbox = wx.StaticBox(self, -1, _("Error Details"))
        self.__pnl_top_message = wx.Panel(self, -1, style=wx.NO_BORDER)
        self._TCTRL_logfile = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY|wx.NO_BORDER)
        self._TCTRL_exc_type = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY|wx.NO_BORDER)
        self._TCTRL_exc_value = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY|wx.NO_BORDER)
        self._TCTRL_traceback = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.HSCROLL)
        self._BTN_ok = wx.Button(self, wx.ID_CANCEL, _("OK"))
        self._BTN_close = wx.Button(self, wx.ID_CANCEL, _("Close GNUmed"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self._on_close_gnumed_button_pressed, id=wx.ID_CANCEL)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: wxgUnhandledExceptionDlg.__set_properties
        self.SetTitle(_("GNUmed exception handler"))
        self.__pnl_top_message.SetBackgroundColour(wx.Colour(255, 0, 0))
        self._TCTRL_logfile.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_BACKGROUND))
        self._TCTRL_logfile.Enable(False)
        self._TCTRL_exc_type.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_BACKGROUND))
        self._TCTRL_exc_type.Enable(False)
        self._TCTRL_exc_value.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_BACKGROUND))
        self._TCTRL_exc_value.Enable(False)
        self._BTN_ok.SetToolTipString(_("Close this dialog."))
        self._BTN_ok.SetDefault()
        self._BTN_close.SetToolTipString(_("Close this dialog AND the GNUmed client."))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: wxgUnhandledExceptionDlg.__do_layout
        __szr_main = wx.BoxSizer(wx.VERTICAL)
        __szr_buttons = wx.BoxSizer(wx.HORIZONTAL)
        __szr_middle = wx.StaticBoxSizer(self.__szr_middle_staticbox, wx.VERTICAL)
        _gszr_exception = wx.FlexGridSizer(3, 2, 3, 3)
        __szr_top_inner = wx.BoxSizer(wx.VERTICAL)
        __lbl_top_message = wx.StaticText(self.__pnl_top_message, -1, _("An unhandled exception has occurred."), style=wx.ALIGN_CENTRE)
        __lbl_top_message.SetBackgroundColour(wx.Colour(255, 0, 0))
        __lbl_top_message.SetForegroundColour(wx.Colour(255, 255, 0))
        __lbl_top_message.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        __szr_top_inner.Add(__lbl_top_message, 0, wx.ALL|wx.EXPAND, 10)
        self.__pnl_top_message.SetAutoLayout(True)
        self.__pnl_top_message.SetSizer(__szr_top_inner)
        __szr_top_inner.Fit(self.__pnl_top_message)
        __szr_top_inner.SetSizeHints(self.__pnl_top_message)
        __szr_main.Add(self.__pnl_top_message, 0, wx.EXPAND, 0)
        __lbl_explanation = wx.StaticText(self, -1, _("GNUmed detected an error for which no specific handler had been defined.\n\nDetails about the error can be found in the log file a copy of which has\nbeen saved away in your home directory (see below). It may contain\nbits of sensitive information so you may want to screen the content\nbefore handing it to IT staff for debugging.\n\nGNUmed will try to keep running. However, it is strongly advised to\nclose this client as soon as possible. You can try to save unsaved data\nbut don't count on it.\n\nIt should then be safe to restart the client."))
        __szr_main.Add(__lbl_explanation, 0, wx.ALL|wx.EXPAND, 5)
        __lbl_logfile = wx.StaticText(self, -1, _("Log file"))
        _gszr_exception.Add(__lbl_logfile, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        _gszr_exception.Add(self._TCTRL_logfile, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        __lbl_type = wx.StaticText(self, -1, _("Type"))
        _gszr_exception.Add(__lbl_type, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        _gszr_exception.Add(self._TCTRL_exc_type, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        __lbl_value = wx.StaticText(self, -1, _("Value"))
        _gszr_exception.Add(__lbl_value, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        _gszr_exception.Add(self._TCTRL_exc_value, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        _gszr_exception.AddGrowableCol(1)
        __szr_middle.Add(_gszr_exception, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 5)
        __szr_middle.Add(self._TCTRL_traceback, 1, wx.EXPAND, 0)
        __szr_main.Add(__szr_middle, 1, wx.ALL|wx.EXPAND, 5)
        __szr_buttons.Add((20, 20), 1, wx.EXPAND, 0)
        __szr_buttons.Add(self._BTN_ok, 0, wx.RIGHT|wx.EXPAND, 3)
        __szr_buttons.Add(self._BTN_close, 0, wx.LEFT|wx.EXPAND, 3)
        __szr_buttons.Add((20, 20), 1, wx.EXPAND, 0)
        __szr_main.Add(__szr_buttons, 0, wx.ALL|wx.EXPAND, 5)
        self.SetAutoLayout(True)
        self.SetSizer(__szr_main)
        __szr_main.Fit(self)
        __szr_main.SetSizeHints(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def _on_close_gnumed_button_pressed(self, event): # wxGlade: wxgUnhandledExceptionDlg.<event_handler>
        print "Event handler `_on_close_gnumed_button_pressed' not implemented"
        event.Skip()

# end of class wxgUnhandledExceptionDlg


