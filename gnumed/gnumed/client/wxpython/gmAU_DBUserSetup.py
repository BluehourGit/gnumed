
# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4cvs on Tue Jan 17 19:02:51 2006

import wx

import gmAU_AdminLoginV01
from Gnumed.pycommon import gmPG, gmDispatcher, gmSignals

import pyPgSQL.PgSQL as pgsql

from Gnumed.wxGladeWidgets.wxgAU_DBUserSetupV01 import cAU_DBUserSetupV01

class FailedPrecondition(Exception):
	pass

class LoginCancelled(Exception):
	pass

class NoAuthorityToCreateUsers(Exception):
	pass

# begin wxGlade: dependencies
# end wxGlade

class cAU_DBUserSetup(cAU_DBUserSetupV01):
    def __init__(self, *args, **kwds):
    	cAU_DBUserSetupV01.__init__(self, *args, **kwds)
	self.repopulate_pg_user_list()

    def repopulate_pg_user_list(self):
      	populate_pg_user_list( self.list_ctrl_2, "usename not in (select db_user from dem.v_staff)") 


    def update_pg_user(self, event): # wxGlade: cAU_DBUserSetup.<event_handler>
        #print "Event handler `update_pg_user' not implemented!"
        event.Skip()
	self._update_pg_user()
	self.repopulate_pg_user_list()


    def remove_pg_user(self, event): # wxGlade: cAU_DBUserSetup.<event_handler>
        print "Event handler `remove_pg_user' not implemented!"
        event.Skip()
	self.repopulate_pg_user_list()

    def listed_pg_user_activated(self, event): # wxGlade: cAU_DBUserSetup.<event_handler>
        print "Event handler `listed_pg_user_activated' not implemented"
	ix = event.GetIndex()
	self.set_pg_user_from_list( ix)
        event.Skip()

    def select_pg_user(self, event): # wxGlade: cAU_DBUserSetup.<event_handler>
        #print "Event handler `select_pg_user' not implemented"

        event.Skip()
	try:
		user = self.text_ctrl_6.GetValue()
		self.select_staff_pg_user_details(user)
		if self.GetParent().IsModal():
			self.GetParent().EndModal(wx.ID_OK)
	
	except Exception ,msg:
		wx.MessageDialog(self, str(msg) ).ShowModal()
	

# end of class cAU_DBUserSetup

    def set_pg_user_from_list(self, ix):
    	c = self.list_ctrl_2
	name = c.GetItem(ix, 0).GetText()
	groups = c.GetItem(ix, 1).GetText()
	print "selected ", name , groups
	self.set_pg_user_detail( name, groups)

    def set_pg_user_detail(self, name, groups):
	self.text_ctrl_6.SetValue(name)
	
	l =  [
	     (self.checkbox_9 ,"gm-doctors"),
             (self.checkbox_10, "gm-staff_medical"),
             (	self.checkbox_12 , "gm-staff_office"),
             (	self.checkbox_11 , "gm-public") ]
	for cb, group in l:
	    cb.SetValue(  group in groups)
	
	self.checkbox_11.Enable(True)
	self.checkbox_11.SetValue(True)

    def _update_pg_user(self): 
        print "Event handler `update_pg_user' not implemented!"
	try:
		self._precondition_update()
		#if self.GetParent().IsModal():
		#	self.GetParent().EndModal(wx.ID_OK)		
	except FailedPrecondition, e:
		wx.MessageDialog(self, str(e) ).ShowModal()	
	except LoginCancelled:
		wx.MessageDialog(self, "Login Was Cancelled").ShowModal()

	except pgsql.OperationalError, msg:
		wx.MessageDialog(self, str(msg) ).ShowModal()
	except:
		print "IsModel failed ? "
		import traceback as tb
		import sys
		tb.print_tb(sys.exc_info()[2])
		wx.MessageDialog(self, str(sys.exc_info()[0])  + "\n" + str(sys.exc_info()[1]) ).ShowModal()
		

   

    def _precondition_update(self):
	group_widg = [ self.checkbox_9, self.checkbox_10, self.checkbox_12, self.checkbox_11]
	groups = [ 'gm-doctors', 'gm-staff_medical', 'gm-staff_office', 'gm-public' ] 
	group_checked = [ x.GetValue() for x in group_widg]
	
	if [x for x in group_checked if x] == [] :
		raise FailedPrecondition, "no group selected"
	
	l2 = [ self.text_ctrl_6, self.text_ctrl_9, self.text_ctrl_10]
	l3 = [ x.GetValue() for x in l2]
	if [x for x in l3 if x.strip() <> ''] == []:
		raise FailedPrecondition, "No values in fields"

	[user, passwd, confirm] = [x.strip() for x in l3]
	
	if passwd <> confirm :
		raise FailedPrecondition, "Passwords don't match"
	

	if user == "":
		raise FailedPrecondition, "User cannot be blank"

	#import pdb
	
	#pdb.set_trace()
	
	enable_dbo = """echo "alter user \"gm-dbo\" createuser" > dat;su -c "su -c \"psql -f dat template1\" postgres" """


	[[canCreateUsers]] = gmPG.run_ro_query("historica", "select usesuper from pg_user where usename = 'gm-dbo'")
	if not canCreateUsers :
		while wx.MessageDialog(self, "The database owner cannot create users: you must do :-\n  alter user \"gm-dbo\" createuser \nAs postgres user.\n Press OK if this has been done", style = wx.OK | wx.CANCEL ).ShowModal() == wx.ID_OK :
			[[canCreateUsers]] = gmPG.run_ro_query("historica", "select usesuper from pg_user where usename = 'gm-dbo'")
			if canCreateUsers:
				break
		if not canCreateUsers:		
			raise NoAuthorityToCreateUsers
		

	
	result = gmPG.run_ro_query("historica", """select usename from pg_user where usename = '%s'  """ % user)
	
	perms = []
	for n, in_group in zip( groups, group_checked ):
		if in_group:
			perms.append(""" alter group \"%s\" add user \"%s\" """ % (n, user) )
		else:
			perms.append(""" alter group "%s" drop user "%s" """ %( n, user) )
	if result and len(result) == 1:
		#alter an existing user

		if passwd <> '': 
			pre = [""" alter user "%s" password '%s' """ % (user, passwd) ] 
		else:
			pre = []
			# allow to keep old passwords
			
		self._exec_su( pre + perms , self.su_login)
	
	else:
		#create a new user
		if passwd == '':
			raise FailedPrecondition, "New users must have password set"

		pre = [""" create  user "%s" password '%s' """ % (user, passwd) ]

		self._exec_su( pre  + perms , self.su_login)
	
	gmDispatcher.send(gmSignals.pg_users_changed())
	
    def _exec_su( self, stmt_list, pg_con_getter):
   	con = pg_con_getter()
	
	cursor = con.cursor()
	for stmt in stmt_list:
		cursor.execute(stmt)

	con.commit()
	con.close()	
	
	
    def su_login( self):
	dlg = gmAU_AdminLoginV01.cAU_AdminLoginDialogV01(self, -1)
	if dlg.ShowModal() == wx.ID_OK:
		con = dlg.get_connection()
		dlg.Destroy()
		return con		
	else:
		dlg.Destroy()
		raise CancelledLogin


    def select_staff_pg_user_details(self, name):
		if not name or name.strip() == '':
			raise FailedPrecondition, "User cannot be blank"

		self.pg_user = name

		group_widg = [ self.checkbox_9, self.checkbox_10, self.checkbox_12, self.checkbox_11]
		groups = [ 'gm-doctors', 'gm-staff_medical', 'gm-staff_office', 'gm-public' ]
		group_checked = [ x.GetValue() for x in group_widg]

		self.groups = ", ".join ( [grp for grp, checked  in zip( groups, group_checked) if checked ] )

	
    def set_existing_db_user(self, db_user):
    	user = get_user_grps(" usename = '%s' " % db_user)
	if user and len(user) == 1:
		self.set_pg_user_detail( db_user, groups = user.values()[0])



def get_user_grps( filter):
        stmt = "select usename,groname from pg_user p , pg_group g where p.usesysid = any ( grolist) and "+filter+" order by usename"

        result= gmPG.run_ro_query('historica', stmt)
        #import pdb
        #pdb.set_trace()
        user_grps = {}
        for x,y in result:
                if not user_grps.has_key(x):
                        user_grps[x] = []

                user_grps[x].append(y)

	return user_grps

def populate_pg_user_list( c, filter = "True"):
	user_grps = get_user_grps(filter)
	c.ClearAll()
        c.InsertColumn(0, _("pg user"))
        c.InsertColumn(1, _("group memberships"))


        for (k,v), i  in zip( user_grps.items(), range(len(user_grps)) ):

                c.InsertStringItem(i, k)
                c.SetStringItem(i, 1, ", ".join(v) )

        for i in range(2):
                c.SetColumnWidth(i, wx.LIST_AUTOSIZE)

if __name__== "__main__":
	
	a = wx.App()
	f = wx.Frame( None, -1 , "Test DBUser")
	p = cAU_DBUserSetup(f, -1)
	f.Fit()
	f.Show(1)
	a.SetTopWindow(f)
	a.MainLoop()
