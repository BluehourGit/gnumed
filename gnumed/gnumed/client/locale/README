# $Source: /home/ncq/Projekte/cvs2git/vcs-mirror/gnumed/gnumed/client/locale/README,v $
# $Revision: 1.7 $

NOTE: $LANG corresponds to the ISO code for your language
NOTE: Requires gettext tools to be installed.

All the message catalog sources live here.

With
 <create-gnumed_po.sh $LANG>
you can rescan the Python source for strings that need
translation. The result is merged with the file $LANG.po
which serves as a repository of previously translated
strings. You can then edit this file adding in more
translations for message strings. For this you can use
a simple text editor or any tool you wish as long as you
keep a copy of your final results in $LANG.po as a
repository for future translations.

With 
 <create-gnumed_mo.sh $LANG>
you can compile a *.mo file from the message catalog source.
You will end up with a $LANG-gnumed.mo file.

On a POSIX system this file should be moved into
 /usr/share/locale/$LANG/LC_MESSAGES/
or the corresponding standard place. Alternatively you
can make symlinks from there to
 /usr/share/gnumed/client/locale/$LANG.mo

On Windows it must live "right here" (relative to
../wxpython/) so that gmI18N can find $LANG-gnumed.mo
regardless. In this case you need to create the following
directories:

client/
 client/wxpython/
 client/locale/
  client/locale/$LANG/
   client/locale/$LANG/LC_MESSAGES/

and then symlink the $LANG-gnumed.mo file into the
appropriate language directory under the invariant name
gnumed.mo such that, for example, for German a link
 locale/de/LC_MESSAGES/gnumed.mo -> locale/de-gnumed.mo
would exist.


Karsten Hilbert
<Karsten.Hilbert@gmx.net>
GnuMed i18n/L10n coordinator
