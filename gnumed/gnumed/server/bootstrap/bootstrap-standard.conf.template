# GnuMed database system bootstrapping config file
#-------------------------------------------------
# license: GPL
# author: Karsten Hilbert@gmx.net

#----------------------------------
[revision control]
file = $Source: /home/ncq/Projekte/cvs2git/vcs-mirror/gnumed/gnumed/server/bootstrap/bootstrap-standard.conf.template,v $
version = $Revision: 1.4 $

#----------------------------------
[installation]

# set this to no if you want to run this script without
# any user interaction, in this case you must provide passwords
# for the users to be installed,
# this has been conceived to make Debian postinst happy :-)
interactive = yes

# this description is displayed just before the user is
# prompted whether she acutally wants to install this setup
description = $description$
This setup is not intended to actually be used. It just
serves to document the config file options. Also you cannot
rely on this setup to import all necessary schema files.

DO NOT USE !
$description$

# these NEED NOT correspond to GnuMed service names,
# you just need to have a section in this file
# corresponding to each line
services = $services$
config
patients
$services$

#----------------------------------
# corresponds to one of the services listed under installation
[service config]

# real GnuMed service name (see docs)
name = default

# under which [section] do we find database specifics
# for this service -> [database ...]
database alias = gnumed-test

# later to be used for service version tracking
version = 0.1

# the sql files to be imported for this service
schema = $schema$
../sql/gmconfiguration.sql
$schema$

# the PostgreSQL version necessary to run this service
postgres version = 7.1

# database alias in which to register this service
registration database = gnumed


[service patients]
database alias = gnumed-test
name = personalia
version = 0.1

schema = $schema$
../sql/gmidentity.sql
../sql/gmgis.sql
$schema$

postgres version = 7.1

registration database = gnumed

#----------------------------------
[database gnumed]

# the real name of the database in the PostgreSQL system
name = gnumed

# which [section] holds specifics about the server
# hosting this databse -> [server ...]
server alias = local host

# here you can import some schema files once per database
# such as revision tracking, translation, etc.
schema = $schema$
sql/gmSchemaRevision.sql
sql/gmServices.sql
sql/gmI18N.sql
$schema$


#----------------------------------
[server local host]

# can be a host name or an IP address
name = 127.0.0.1

# the port on which to connect to the server,
# standard is 5432
port = 5432

# the name of the template database on
# the server
template database = template1

# which [section] lists particulars about the
# database server super user -> [user ...]
super user alias = postgres

# you can put some schema files here,
# they will be imported into the template database
# so be very careful,
# this is mainly useful for importing database accounts
# for an example see server/sql/gmTestAccounts.sql
schema = $schema$
$schema$

#---------------------------------------------------------------------
# these shouldn't be changed unless you really know what you are doing
#---------------------------------------------------------------------
[GnuMed defaults]

# needs to have a section [user GnuMed owner] in this file
database owner alias = GnuMed owner

# - these are the standard groups that exist
#   in every GnuMed database
# - note how some groups don't have a write-enabled counterpart
# - you can (and probably should) define site-specific
#   groups in another file
# - at the end of the setup you'll be asked if you want to
#   install your site-specific groups/users, too
groups = $groups$
gm-doctors
_gm-doctors
gm-staff_medical
_gm-staff_medical
gm-staff_office
_gm-staff_office
gm-trainees_medical
gm-trainees_office
gm-public
$groups$

# - activate these backend languages
# - the names just point to the corresponding sections
procedural languages = $procedural languages$
pg/SQL
$procedural languages$

# Python isn't included in the default PostgreSQL
# binaries yet although this is being discussed,
# it may soon become a requirement for GnuMed, though
#pg/Python

# where to look for dynamic libraries for procedural languages
# - we can safely list any directories here that we come
#   across on any distribution
# - the first match will be used
# - reorder the list if you want to force a particular
#   directory to be used for a particular language
language library dirs = $language library dirs$
/usr/lib/postgresql/
/usr/lib/postgresql/lib/
/usr/lib/pgsql/
/usr/local/pgsql/lib
$language library dirs$

#----------------------------------
# if the password is not given for any account the script
# will ask the user to provide it given "interactive" is
# true, otherwise it will fail
#
# - this account will own the GnuMed databases and all
#   the objects in them
# - it is not intended to be used as an everyday account
# - it's also the one used to set up other GnuMed accounts
[user GnuMed owner]
name = gm-dbowner
#password = 

# - this user will hardly ever need to be changed
# - this group provides the details for the PostgreSQL
#   super user (the database root, if you will) which was
#   created when the database server was set up
# - on most standard Linux systems this is user "postgres"
#   and does not need a password on localhost
# - don't change unless you know what you are doing
[user postgres]
name = postgres
#password =

#----------------------------------
# don't ask, this is deep magic ;-)
# meditate over it and enlightenment will be thine
[pg/SQL]
library name = plpgsql.so

call handler = $call handler$
CREATE FUNCTION plpgsql_call_handler () RETURNS OPAQUE AS '%s' LANGUAGE 'C';
$call handler$

language activation = $language activation$
CREATE TRUSTED PROCEDURAL LANGUAGE 'plpgsql' HANDLER plpgsql_call_handler LANCOMPILER 'PL/pgSQL';
$language activation$

#----------------------------------
[pg/Python]
library name = plpython.so

call handler = $call handler$
CREATE FUNCTION plpython_call_handler () RETURNS OPAQUE AS '%s' LANGUAGE 'C';
$call handler$

language activation = $language activation$
CREATE TRUSTED PROCEDURAL LANGUAGE 'plpython' HANDLER plpython_call_handler;
$language activation$

#----------------------------------
# $Log: bootstrap-standard.conf.template,v $
# Revision 1.4  2003-05-12 12:47:25  ncq
# - import some schema files at the database level, too
# - add corresponding schema list in the config files
#
# Revision 1.3  2003/04/22 16:16:16  ncq
# - added lots of comments on the postgres/gm-dbowner users
#
# Revision 1.2  2003/04/18 13:21:16  ncq
# - include new script gmIdentityViews.sql
#
# Revision 1.1  2003/03/30 22:18:53  ncq
# - renamed after discussion with native speaker :-)
#
# Revision 1.3  2003/03/30 20:57:37  ncq
# - make localhost be 127.0.0.1 as Mandrake happens to want to rename that to the local hostname :-)
#
# Revision 1.2  2003/03/26 15:47:54  ncq
# - alas, some distros store procedural language libraries in /usr/lib/postgresql/
#
# Revision 1.1  2003/02/25 08:26:49  ncq
# - moved here from server/utils/
#
# Revision 1.5  2003/02/23 19:13:08  ncq
# - move language library dirs to [GnuMed defaults] and that to
#   the bottom of the file as per suggestion by Andreas
#
# Revision 1.4  2003/02/09 11:46:11  ncq
# - added core database option for registering services
# - convenience function _run_query()
#
# Revision 1.3  2003/01/28 13:39:14  ncq
# - implemented schema import at the server level (= template database)
# - this is mainly useful for importing users
#
# Revision 1.2  2003/01/26 13:30:25  ncq
# - document all options
#
# Revision 1.1  2003/01/26 12:47:17  ncq
# - next generation from test-area/
#
# Revision 1.4  2003/01/22 23:21:45  ncq
# - this sort of documents the whole affair
#
