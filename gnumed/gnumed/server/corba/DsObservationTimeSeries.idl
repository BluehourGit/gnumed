// File: DsObservationTimeSeries.idl

#ifndef _DS_OBSERVATION_TIME_SERIES_IDL_
#define _DS_OBSERVATION_TIME_SERIES_IDL_

#pragma prefix "omg.org"

#include "DsObservationAccess.idl"


module DsObservationTimeSeries
{
    
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// EXTERNAL TYPEDEFS
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//typedef DsObservationAccess::AbstractManagedObject	AbstractManagedObject;

	typedef DsObservationAccess::NameValuePair				NameValuePair;
	typedef DsObservationAccess::QueryPolicy				QueryPolicy;
	typedef DsObservationAccess::QueryPolicySeq 			QueryPolicySeq;
	typedef DsObservationAccess::ObservationQualifierSeq	ObservationQualifierSeq;
	typedef DsObservationAccess::QualifiedCodeStr			QualifiedCodeStr;
	typedef DsObservationAccess::TimeStamp					TimeStamp;
	typedef DsObservationAccess::TimeSpan					TimeSpan;

	typedef sequence<QualifiedCodeStr> QualifiedCodeStrSeq;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Time Types
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// TimeDelta : ObservationValue;
	struct TimeDelta
	{
		float delta;			 // calculated with constants below, NOT with calendaring
		QualifiedCodeStr units;
	};

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Approximations for use with TimeDelta, NOT for calendaring
    // All units here are seconds. use scaling as necessary for units of TimeDelta
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	const float YEAR        = 31557600.0; // 60*60*24*365.25
	const float MONTH       = 2629800.0;  // 60*60*24*365.25/12
	const float DAY         = 86400.0;    // 60*60*24
	const float HOUR        = 3600.0;     // 60*60
	const float MINUTE      = 60.0;       // 60
	const float SECOND      = 1.0;        // 1
	const float MILLISECOND = 0.001;      // 1/1000

	typedef NameValuePair Filter;
	typedef sequence<Filter> FilterSeq;

	enum ValueSeqType 
	{
		OtherSeqDataType,
		OctetType, 
		ShortType,
		LongType, 
		LongLongType, 
		FloatType, 
		DoubleType 
	};
	
	union ValueSeq switch(ValueSeqType)
	{
		case OctetType    : sequence< octet > octet_seq;
		case ShortType    : sequence< short > short_seq;
		case LongType     : sequence< long > long_seq;
		case LongLongType : sequence< long long > long_long_seq;
		case FloatType    : sequence< float > float_seq;
		case DoubleType   : sequence< double > double_seq;
		case OtherSeqDataType : any the_any;
	};

	interface TimeSeriesIterator : DsObservationAccess::AbstractManagedObject 
	{
		unsigned long max_left();

		boolean next_n
		(
			in unsigned long n,
			out ValueSeq curve_part
		);	
	};

	// TimeSeries : ObservationValue;
	struct TimeSeries
	{
		TimeDelta sample_period;
		ValueSeq values;
		QualifiedCodeStr value_units;
		unsigned long long total_size; // number of items in values + remaining on iterator
		TimeSeriesIterator the_iterator;
	};

	exception OutOfRange{};
	exception NotImplemented{};
	exception FilterNotSupported{};
	exception NoValidValues{};

	typedef	sequence<QualifiedCodeStr,1> optionalCodeSeq;
	typedef	sequence<float,1> optionalFloatSeq;
	
	struct TimeSeriesRemoteAttributes 
	{
		QualifiedCodeStr code;
		QualifiedCodeStr units;
		optionalCodeSeq accuracy;
		optionalFloatSeq precision;
		optionalFloatSeq corner_frequency;
		optionalFloatSeq highest_frequency;
		TimeSpan time_span;
		TimeDelta time_delta;
		unsigned long long total_size;
		QualifiedCodeStrSeq supported_filters;
		QueryPolicySeq supported_policies;
	};
	
	// TimeSeriesRemote : ObservationValue;
	interface TimeSeriesRemote : DsObservationAccess::AbstractManagedObject 
	{
		readonly attribute QualifiedCodeStr code;
		readonly attribute QualifiedCodeStr units;
		readonly attribute optionalCodeSeq accuracy;
		readonly attribute optionalFloatSeq precision;
		readonly attribute optionalFloatSeq corner_frequency;
		readonly attribute optionalFloatSeq highest_frequency;
		readonly attribute TimeSpan time_span;
		readonly attribute TimeDelta time_delta;
		readonly attribute unsigned long long total_size;
		readonly attribute QualifiedCodeStrSeq supported_filters;
		readonly attribute QueryPolicySeq supported_policies;
		readonly attribute ValueSeqType default_value_type;

		TimeSeriesRemoteAttributes get_attributes();

		float get_sample_number
		( 
			in unsigned long long index,
			out ObservationQualifierSeq qualifiers 
		)
		raises
		(
			OutOfRange 
		);
		
		float get_sample
		( 
			in TimeStamp time_stamp,
			out ObservationQualifierSeq qualifiers  
		)
		raises
		(
			OutOfRange
		);
		
		TimeSeries get_snippet
		( 
			in TimeSpan time_span,
			out ObservationQualifierSeq qualifiers  
		)
		raises
		(
			OutOfRange 
		);
		
		float get_max
		( 
			in TimeSpan time_span 
		)
		raises
		( 
			  OutOfRange, 
			  NoValidValues 
		);
		
		float get_min
		( 
			in TimeSpan time_span 
		)
		raises
		( 
			 OutOfRange, 
			 NoValidValues  
		);
		
		float get_mean
		( 
			in TimeSpan time_span 
		)
		raises
		( 
			OutOfRange, 
			NoValidValues  
		);
		
		float get_median
		( 
			in TimeSpan time_span 
		)
		raises
		( 
			 OutOfRange, 
			 NoValidValues 
		);
		
		TimeSeries get_resampled
		(
			in TimeSpan time_span, 
			in TimeDelta sample_rate,
			in QueryPolicySeq policy,
			out ObservationQualifierSeq qualifiers  
		)
		raises
		(
			NotImplemented 
		);

		TimeSeries get_rescaled
		( 
			in TimeSpan time_span, 
			in float scale_factor,
			in QueryPolicySeq policy,
			out ObservationQualifierSeq qualifiers  
		)
		raises
		(
			NotImplemented 
		);
		
		TimeSeries get_resampled_rescaled
		( 
			in TimeSpan time_span, 
			in TimeDelta sample_rate,
			in float scale_factor,
			in QueryPolicySeq policy,
			out ObservationQualifierSeq qualifiers  
		)
		raises
		(
			NotImplemented 
		);
		
		TimeSeries get_filtered
		( 
			in TimeSpan time_span, 
			in FilterSeq filters,
			in QueryPolicySeq policy,
			out ObservationQualifierSeq qualifiers  
		)
		raises
		( 
			NotImplemented,
			FilterNotSupported 
		);
	};
};

#endif // _DS_OBSERVATION_TIME_SERIES_IDL_
