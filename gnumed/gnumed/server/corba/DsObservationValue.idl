// File: DsObservationValue.idl
#ifndef _DS_OBSERVATION_VALUE_IDL_
#define _DS_OBSERVATION_VALUE_IDL_

#pragma prefix "omg.org"

#include "DsObservationAccess.idl"

module DsObservationValue
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// EXTERNAL TYPEDEFS
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef TerminologyServices::ConceptCode		ConceptCode;
	typedef DsObservationAccess::QualifiedCodeStr	QualifiedCodeStr;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Exceptions
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	exception NotImplemented{};

	//typedef DsObservationAccess::AbstractManagedObject AbstractManagedObject;

	// DateTime : ObservationValue;
	typedef DsObservationAccess::TimeStamp			DateTime;
	// TimeSpan : ObservationValue;
	typedef DsObservationAccess::TimeSpan			TimeSpan;
	// Person : ObservationValue;
	typedef DsObservationAccess::ObservedSubjectId	Person;


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// NoInformation
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// NoInformation : ObservationValue;
	struct NoInformation
	{
		QualifiedCodeStr reason;
		string text_description;
	};
	
	const QualifiedCodeStr NO_INFORMATION	= "DNS:omg.org/DsObservationValue/NO_INFORMATION";


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Text Types
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// PlainText : ObservationValue;
	typedef string PlainText;

	// UniversalResourceIdentifier : ObservationValue;
	struct UniversalResourceIdentifier
	{
		ConceptCode protocol;
		string address;
	};

	// PhysicalLocationDescription : ObservationValue;
	typedef string PhysicalLocationDescription;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Coded Types
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// CodedElement : ObservationValue;
	typedef TerminologyServices::QualifiedCodeInfo CodedElement;
	
	// LooselyCodedElement : ObservationValue;
	struct LooselyCodedElement
	{
		string text;
		TerminologyServices::CodingSchemeId coding_scheme_id;
		TerminologyServices::VersionId version_id;
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Multimedia
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	typedef sequence<octet> Blob;

	interface MultimediaIterator  : DsObservationAccess::AbstractManagedObject 
	{
		unsigned long max_left();

	    boolean next_n
		(
			in unsigned long n,
			out Blob multimedia_part
		);	
	};
	
	// Multimedia : ObservationValue;
	struct Multimedia 
	{
		string content_type;
		string other_mime_header_fields;
		Blob a_blob;
		unsigned long long total_size;  // summation of both sequence and remaining items on iterator
		MultimediaIterator the_iterator;
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Measurements Types
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Numeric : ObservationValue;
	struct Numeric
	{
		QualifiedCodeStr units;
		float value;
	};

	// Range : ObservationValue;
	struct Range
	{
		QualifiedCodeStr units;
		float lower;
		float upper;
	};

	// Ratio : ObservationValue;
	struct Ratio
	{
		float numerator;
		float denominator;
	};	

	struct XYPair 
	{
		float x;
		float y;
	};
	typedef sequence<XYPair> XYPairSeq;

	interface CurveIterator  : DsObservationAccess::AbstractManagedObject 
	{
		unsigned long max_left();

		boolean next_n
		(
			in unsigned long n,
			out XYPairSeq curve_part
		);	
	};

	// Curve : ObservationValue;
	struct Curve
	{
		XYPairSeq xy_pairs;
		QualifiedCodeStr x_units; 
		QualifiedCodeStr y_units; 
		unsigned long long total_size;
		CurveIterator the_iterator;
	};
};

#endif // _DS_OBSERVATION_VALUE_IDL_
