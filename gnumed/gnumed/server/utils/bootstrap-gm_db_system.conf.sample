# GnuMed database system bootstrapping config file
#-------------------------------------------------
# license: GPL
# author: Karsten Hilbert@gmx.net

#----------------------------------
[revision control]
file = $Source: /home/ncq/Projekte/cvs2git/vcs-mirror/gnumed/gnumed/server/utils/Attic/bootstrap-gm_db_system.conf.sample,v $
version = $Revision: 1.4 $

#----------------------------------
[installation]

# set this to no if you want to run this script without
# any user interaction, in this case you must provide passwords
# for the users to be installed,
# this has been conceived to make Debian postinst happy :-)
interactive = yes

# this description is displayed just before the user is
# prompted whether she acutally wants to install this setup
description = $description$
This setup is not intended to actually be used. It just
serves to document the config file options.

DO NOT USE !
$description$

# these NEED NOT correspond to GnuMed service names,
# you just need to have a section in this file
# corresponding to each line
services = $services$
config
patients
$services$

# where to look for dynamic libraries for procedural languages
# - we can safely list any directories here that we come
#   across on any distribution
# - the first match will be used
# - reorder the list if you want to force a particular
#   directory to be used for a particular language
language library dirs = $language library dirs$
/usr/lib/postgresql/lib/
/usr/lib/pgsql/
$language library dirs$

#----------------------------------
# these really shouldn't be changed
[GnuMed defaults]

# needs to have a section [user GnuMed owner] in this file
database owner alias = GnuMed owner

# - these are the standard groups that exist
#   in every GnuMed database
# - note how some groups don't have a write-enabled counterpart
# - you can (and probably should) define site-specific
#   groups in another file
# - at the end of the setup you'll be asked if you want to
#   install your site-specific groups/users, too
groups = $groups$
gm-doctors
_gm-doctors
gm-staff_medical
_gm-staff_medical
gm-staff_office
_gm-staff_office
gm-trainees_medical
gm-trainees_office
gm-public
$groups$

# - activate these backend languages
# - the names just point to the corresponding sections
procedural languages = $procedural languages$
pg/SQL
$procedural languages$

# Python isn't included in the default PostgreSQL
# binaries yet although this is being discussed,
# it may soon become a requirement for GnuMed, though
#pg/Python

#----------------------------------
# corresponds to one of the services listed under installation
[service config]

# real GnuMed service name (see docs)
name = default

# under which [section] do we find database specifics
# for this service -> [database ...]
database alias = gnumed-test

# later to be used for service version tracking
version = 0.1

# the sql files to be imported for this service
schema = $schema$
../sql/gmconfiguration.sql
$schema$

# the PostgreSQL version necessary to run this service
postgres version = 7.1

# database alias in which to register this service
registration database = gnumed


[service patients]
database alias = gnumed-test
name = personalia
version = 0.1

schema = $schema$
../sql/gmidentity.sql
../sql/gmgis.sql
$schema$

postgres version = 7.1

registration database = gnumed

#----------------------------------
[database gnumed]

# the real name of the database in the PostgreSQL system
name = gnumed

# which [section] holds specifics about the server
# hosting this databse -> [server ...]
server alias = localhost

#----------------------------------
[server localhost]

# can be a host name or an IP address
name = localhost

# the port on which to connect to the server,
# standard is 5432
port = 5432

# the name of the template database on
# the server
template database = template1

# which [section] lists particulars about the
# database server super user -> [user ...]
super user alias = postgres

# you can put some schema files here,
# they will be imported into the template database
# so be very careful,
# this is mainly useful for importing database accounts
# for an example see server/sql/gmTestAccounts.sql
schema = $schema$
$schema$

#----------------------------------
[user GnuMed owner]

# the name of the account in PostgreSQL
name = gm-dbowner

# if the password is not given here the script will
# ask the user if "interactive" is true, otherwise
# it will fail
#password = 

[user postgres]
name = postgres
#password =

#----------------------------------
# don't ask, this is deep magic ;-)
# meditate over it and enlightenment will be thine
[pg/SQL]
library name = plpgsql.so

call handler = $call handler$
CREATE FUNCTION plpgsql_call_handler () RETURNS OPAQUE AS '%s' LANGUAGE 'C';
$call handler$

language activation = $language activation$
CREATE TRUSTED PROCEDURAL LANGUAGE 'plpgsql' HANDLER plpgsql_call_handler LANCOMPILER 'PL/pgSQL';
$language activation$

#----------------------------------
[pg/Python]
library name = plpython.so

call handler = $call handler$
CREATE FUNCTION plpython_call_handler () RETURNS OPAQUE AS '%s' LANGUAGE 'C';
$call handler$

language activation = $language activation$
CREATE TRUSTED PROCEDURAL LANGUAGE 'plpython' HANDLER plpython_call_handler;
$language activation$

#----------------------------------
# $Log: bootstrap-gm_db_system.conf.sample,v $
# Revision 1.4  2003-02-09 11:46:11  ncq
# - added core database option for registering services
# - convenience function _run_query()
#
# Revision 1.3  2003/01/28 13:39:14  ncq
# - implemented schema import at the server level (= template database)
# - this is mainly useful for importing users
#
# Revision 1.2  2003/01/26 13:30:25  ncq
# - document all options
#
# Revision 1.1  2003/01/26 12:47:17  ncq
# - next generation from test-area/
#
# Revision 1.4  2003/01/22 23:21:45  ncq
# - this sort of documents the whole affair
#
